--- a/cosign/private/sign.bzl
+++ b/cosign/private/sign.bzl
@@ -35,18 +35,19 @@ run `bazel run :sign -- --repository=index.docker.io/org/test`
 
 _attrs = {
     "image": attr.label(allow_single_file = True, mandatory = True, doc = "Label to an oci_image"),
-    "repository": attr.string(mandatory = True, doc = """\
-        Repository URL where the image will be signed at, e.g.: `index.docker.io/<user>/image`.
-        Digests and tags are not allowed.
-    """),
+    "repository_url": attr.string(mandatory = True, doc = "Image repository url subject to make variable expansion"),
     "_sign_sh_tpl": attr.label(default = "sign.sh.tpl", allow_single_file = True),
 }
 
+def _compute_repository(ctx):
+    # handle make variable expansion
+    return ctx.expand_make_variables("repository_url", ctx.attr.repository_url, {})
+
 def _cosign_sign_impl(ctx):
     cosign = ctx.toolchains["@rules_oci//cosign:toolchain_type"]
     jq = ctx.toolchains["@aspect_bazel_lib//lib:jq_toolchain_type"]
 
-    if ctx.attr.repository.find(":") != -1 or ctx.attr.repository.find("@") != -1:
+    if ctx.attr.repository_url.find(":") != -1 or ctx.attr.repository_url.find("@") != -1:
         fail("repository attribute should not contain digest or tag.")
 
     executable = ctx.actions.declare_file("cosign_sign_{}.sh".format(ctx.label.name))
@@ -58,7 +59,7 @@ def _cosign_sign_impl(ctx):
             "{{cosign_path}}": cosign.cosign_info.binary.short_path,
             "{{jq_path}}": jq.jqinfo.bin.short_path,
             "{{image_dir}}": ctx.file.image.short_path,
-            "{{fixed_args}}": " ".join(["--repository", ctx.attr.repository]),
+            "{{fixed_args}}": " ".join(["--repository", _compute_repository(ctx)]),
         },
     )
 
