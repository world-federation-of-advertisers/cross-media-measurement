// Copyright 2023 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Command example-gateway-server is an example reverse-proxy implementation
whose HTTP handler is generated by grpc-gateway.
*/
package main

import (
	"context"
	"flag"

	"github.com/golang/glog"
	"service/gateway"
)

var (
	tlsCertPath = flag.String("tls_cert", "", "file location of the gRPC service cert")
	tlsKeyPath  = flag.String("tls_key", "", "file location of the gRPC service key")
	port        = flag.String("port", "8080", "port number for the gateway service")
	endpoint    = flag.String("endpoint", "localhost:8443", "endpoint of the gRPC service")
)

func main() {
	flag.Parse()
	defer glog.Flush()

	ctx := context.Background()
	opts := gateway.Options{
		Addr: ":" + *port,
		GRPCServer: gateway.Endpoint{
			Addr: *endpoint,
		},
		TlsCertPath: *tlsCertPath,
		TlsKeyPath:  *tlsKeyPath,
	}
	if err := gateway.Run(ctx, opts); err != nil {
		glog.Fatal(err)
	}
}
