#!/usr/bin/env bash

set -eEu -o pipefail

readonly IMAGE="${IMAGE:-docker.io/wfameasurement/bazel@sha256:6073b7e9fbc655c5ffd950b1959eccbbd80f368dc5fc73ae63913749ac2b2cf9}"
readonly DOCKER="${DOCKER:-docker}"
readonly USERNAME="$(id -un)"
readonly OUTPUT_USER_ROOT="${HOME}/.cache/bazel/_bazel_${USERNAME}"
readonly BAZELISK_HOME="${HOME}/.cache/bazelisk"

is_podman() {
  [[ "$($DOCKER -v)" == *podman* ]]
}

is_rootless() {
  if is_podman; then
    [[ "$($DOCKER info --format '{{.Host.Security.Rootless}}')" == 'true' ]]
    return
  fi

  [[ "$($DOCKER info --format '{{.SecurityOptions}}')" == *rootless* ]] ||
    [[ "$($DOCKER version --format '{{.Client.Os}}')" == 'darwin' ]]
}

command_exists() {
  hash "$1" 2>/dev/null
}

# Outputs the host's Bazel output user root.
# See https://docs.bazel.build/versions/4.0.0/output_directories.html
get_host_output_user_root() {
  if ! command_exists bazel; then
    echo "${OUTPUT_USER_ROOT}"
    return
  fi

  local install_base
  install_base="$(bazel info install_base)"
  readonly install_base

  dirname "$(dirname "${install_base}")"
}

get_host_cache_dir() {
  if [[ -v XDG_CACHE_HOME ]]; then
    echo "${XDG_CACHE_HOME}"
  elif [[ "${OSTYPE}" == 'darwin'* ]]; then
    echo "${HOME}/Library/Caches"
  else
    echo "${HOME}/.cache"
  fi
}

ensure_host_bazelisk_cache_dir() {
  local host_cache_dir
  host_cache_dir="$(get_host_cache_dir)"
  readonly host_cache_dir

  readonly bazelisk_cache_dir="${host_cache_dir}/bazelisk"
  mkdir -p "${bazelisk_cache_dir}"
  echo "${bazelisk_cache_dir}"
}

main() {
  local host_output_user_root
  host_output_user_root="$(get_host_output_user_root)"
  readonly host_output_user_root
  mkdir -p "${host_output_user_root}"

  local host_bazelisk_cache_dir
  host_bazelisk_cache_dir="$(ensure_host_bazelisk_cache_dir)"
  readonly host_bazelisk_cache_dir

  local -a docker_options=(
    '-it'
    '--rm'
    '--network=host'
    '--entrypoint=/usr/bin/bazel'
    '--env'
      "BAZELISK_HOME=${BAZELISK_HOME}"
    '--mount'
      "type=bind,source=${PWD},target=${PWD}"
    '--mount'
      "type=bind,source=${host_output_user_root},target=${OUTPUT_USER_ROOT}"
    '--mount'
      "type=bind,source=${host_bazelisk_cache_dir},target=${BAZELISK_HOME}"
    "--workdir=${PWD}"
  )

  if ! is_rootless; then
    docker_options+=(
      "--user=${EUID}:$(id -g)"
      "--env=USER=${USERNAME}"
    )
  fi

  local -a startup_options=(
    "--output_user_root=${OUTPUT_USER_ROOT}"
  )
  while [[ "$1" =~ [[:space:]]*-.* ]]; do
    startup_options+=("$1")
    shift 1
  done

  local command="$1"
  shift 1

  exec "${DOCKER}" run "${docker_options[@]}" \
    "${IMAGE}" \
    "${startup_options[@]}" \
    "${command}" \
    --config=container \
    "$@"
}

main "$@"
