# Copyright 2025 The Cross-Media Measurement Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "Build & Deploy Cloud Function"

on:
  workflow_call:
    inputs:
      environment:
        description: "GitHub environment (dev/stage/prod)"
        type: string
        required: true

      function_name:
        description: "gcloud functions name"
        type: string
        required: true

      entry_point:
        description: "Java FQN entry point"
        type: string
        required: true

      source_path:
        description: "Bazel target path to the function"
        type: string
        required: true

      uber_jar_path:
        description: "Bazel uber jar path "
        type: string
        required: true

      trigger_type:
        description: "'storage' or 'http'"
        type: string
        required: true

      # only for storage triggers
      trigger_bucket:
        description: "GCS bucket name"
        type: string
        required: false

      # everything below is per-function, so we make them inputs
      run_service_account:
        description: "Service account to run the function"
        type: string
        required: true

      trigger_service_account:
        description: "Service account to receive the trigger (storage-only)"
        type: string
        required: false

      # if you have arbitrary extra env-vars you want to set
      extra_env_vars:
        description: "Any additional --set-env-vars (comma-sep)"
        type: string
        required: false

permissions:
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-22.04
    environment: ${{ inputs.environment }}

    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
          service_account:        ${{ vars.TF_SERVICE_ACCOUNT }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ vars.GCLOUD_PROJECT }}

      - name: Build uber-jar
        run: |
          bazel build ${{ inputs.source_path }}

      - name: Copy to temp
        run: |
          mkdir -p "$RUNNER_TEMP/source"
          cp ${{ inputs.uber_jar_path }} "$RUNNER_TEMP/source/"

      - name: Deploy
        run: |
          set -euo pipefail

          ARGS=(
            functions deploy "${{ inputs.function_name }}"
            --gen2
            --runtime=java17
            --entry-point="${{ inputs.entry_point }}"
            --memory=512MB
            --region="${{ vars.GCLOUD_REGION }}"
            --run-service-account="${{ inputs.run_service_account }}"
            --source="$RUNNER_TEMP/source"
          )

          if [[ "${{ inputs.trigger_type }}" == "storage" ]]; then
            ARGS+=(  
              --trigger-event-filters="type=google.cloud.storage.object.v1.finalized"
              --trigger-event-filters="bucket=${{ inputs.trigger_bucket }}"
              --trigger-service-account="${{ inputs.trigger_service_account }}"
            )
          else
            ARGS+=(
              --trigger-http
              --allow-unauthenticated
            )
          fi

          if [[ -n "${{ inputs.extra_env_vars }}" ]]; then
            ARGS+=( --set-env-vars="${{ inputs.extra_env_vars }}" )
          fi

          gcloud "${ARGS[@]}"
