# Copyright 2024 The Cross-Media Measurement Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "Configure measurement system prober"

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      image-tag:
        description: "Tag of container images"
        type: string
        required: true
      apply:
        description: "Apply the new configuration"
        type: boolean
        required: true
  workflow_dispatch:
    inputs:
      environment:
        description: "GitHub-managed environment"
        required: true
        type: choice
        options:
          - dev
          - qa
          - head
      image-tag:
        description: "Tag of container images"
        type: string
        required: true
      apply:
        description: "Apply the new configuration"
        type: boolean
        default: false

permissions:
  id-token: write

env:
  KUSTOMIZATION_PATH: "k8s/cmms"

jobs:
  update-measurement-system-prober:
    runs-on: ubuntu-22.04
    environment: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v4

      # Authenticate to Google Cloud. This will export some environment
      # variables, including GCLOUD_PROJECT.
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ vars.GKE_CONFIG_SERVICE_ACCOUNT }}

      - name: Write auth.bazelrc
        env:
          BUILDBUDDY_API_KEY: ${{ secrets.BUILDBUDDY_API_KEY }}
        run: |
          cat << EOF > auth.bazelrc
          build --remote_header=x-buildbuddy-api-key=$BUILDBUDDY_API_KEY
          EOF

      - name: Write ~/.bazelrc
        env:
          IMAGE_TAG: ${{ inputs.image-tag }}
          KINGDOM_PUBLIC_API_TARGET: ${{ vars.KINGDOM_PUBLIC_API_TARGET }}
          MC_NAME: ${{ vars.MC_NAME }}
          MC_API_KEY: ${{ secrets.MC_API_KEY }}
          EDP1_NAME: ${{ vars.EDP1_NAME }}
          EDP2_NAME: ${{ vars.EDP2_NAME }}
        run: |
          cat << EOF > ~/.bazelrc
          common --config=ci
          build --remote_download_outputs=toplevel  # Need build output.
          common --config=ghcr
          build --define "image_tag=$IMAGE_TAG"
          build --define "google_cloud_project=$GCLOUD_PROJECT"
          build --define "kingdom_public_api_target=$KINGDOM_PUBLIC_API_TARGET"
          build --define "mc_name=$MC_NAME"
          build --define "mc_api_key=$MC_API_KEY"
          build --define "edp1_name=$EDP1_NAME"
          build --define "edp2_name=$EDP2_NAME"
          EOF

      - name: Export BAZEL_BIN
        run: echo "BAZEL_BIN=$(bazelisk info bazel-bin)" >> $GITHUB_ENV

      - name: Get GKE cluster credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: kingdom
          location: ${{ vars.GCLOUD_ZONE }}

      - name: Generate archives
        run: >
          bazelisk build 
          //src/main/k8s/dev:measurement_system_prober.tar
          //src/main/k8s/testing/secretfiles:archive.tar

      - name: Make Kustomization dir
        run: mkdir -p "$KUSTOMIZATION_PATH"
      - name: Extract Kustomization archive
        run: >
          tar -xf "$BAZEL_BIN/src/main/k8s/dev/measurement_system_prober.tar"
          -C "$KUSTOMIZATION_PATH"

      - name: Extract secret files archive
        run: >
          tar -xf "$BAZEL_BIN/src/main/k8s/testing/secretfiles/archive.tar"
          -C "$KUSTOMIZATION_PATH/src/main/k8s/dev/measurement_system_prober_secret"

      - name: Export KUSTOMIZE_PATH
        run: echo "KUSTOMIZE_PATH=$KUSTOMIZATION_PATH/src/main/k8s/dev/measurement_system_prober" >> $GITHUB_ENV

      # Run kubectl diff, treating the command as succeeded even if the exit
      # code is 1 as kubectl uses this code to indicate there's a diff.
      - name: kubectl diff
        id: kubectl-diff
        run: kubectl diff -k "$KUSTOMIZE_PATH" || (( $? == 1 ))

      - name: kubectl apply
        if: ${{ inputs.apply }}
        run: kubectl apply -k "$KUSTOMIZE_PATH"

      - name: Wait for rollout
        if: ${{ inputs.apply }}
        run: |
          for deployment in $(kubectl get deployments -o name); do
            kubectl rollout status "$deployment" --timeout=5m
          done