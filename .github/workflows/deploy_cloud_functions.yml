# Copyright 2025 The Cross-Media Measurement Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "Build and Deploy cloud functions"

on:
  push:
    branches:
      - marcopremier/add_requisition_fetcher_deployment2
  workflow_dispatch:
    inputs:
      environment:
        description: "GitHub environment"
        type: string
        required: true
        default: dev

jobs:

  export-vars:
    runs-on: ubuntu-latest
    environment: "dev"
    env:
      DATA_WATCHER_TRIGGER_BUCKET: ${{ vars.DATA_WATCHER_TRIGGER_BUCKET }}
      DATA_WATCHER_SERVICE_ACCOUNT: ${{ vars.DATA_WATCHER_SERVICE_ACCOUNT }}
      DATA_WATCHER_TRIGGER_SERVICE_ACCOUNT: ${{ vars.DATA_WATCHER_TRIGGER_SERVICE_ACCOUNT }}
      SECURE_COMPUTATION_PUBLIC_API_TARGET: ${{ vars.SECURE_COMPUTATION_PUBLIC_API_TARGET }}
    outputs:
      data_watcher_trigger_bucket: ${{ steps.load.outputs.data_watcher_trigger_bucket }}
      data_watcher_service_account: ${{ steps.load.outputs.data_watcher_service_account }}
      data_watcher_trigger_sa: ${{ steps.load.outputs.data_watcher_trigger_sa }}
      public_api_target: ${{ steps.load.outputs.public_api_target }}
    steps:
      - id: load
        # NO step-level env: here, so the runner’s DATA_WATCHER_* vars come through
        run: |
          echo "data_watcher_trigger_bucket=$DATA_WATCHER_TRIGGER_BUCKET"   >> $GITHUB_OUTPUT
          echo "data_watcher_service_account=$DATA_WATCHER_SERVICE_ACCOUNT" >> $GITHUB_OUTPUT
          echo "data_watcher_trigger_sa=$DATA_WATCHER_TRIGGER_SERVICE_ACCOUNT" >> $GITHUB_OUTPUT
          echo "public_api_target=$SECURE_COMPUTATION_PUBLIC_API_TARGET"     >> $GITHUB_OUTPUT
      - name: Debug export-vars
        run: |
          # raw env (what the runner actually saw)
          echo "RAW DATA_WATCHER_TRIGGER_BUCKET   = '$DATA_WATCHER_TRIGGER_BUCKET'"
          # the step output you’ve just created
          echo "STEP OUTPUT data_watcher_trigger_bucket = '${{ steps.load.outputs.data_watcher_trigger_bucket }}'"
          # do the same for the other three if you like
#    steps:
#      - id: load
#        env:
#          # pull from repo-level vars or environment inputs
#          DATA_WATCHER_TRIGGER_BUCKET: ${{ vars.DATA_WATCHER_TRIGGER_BUCKET }}
#          DATA_WATCHER_SERVICE_ACCOUNT: ${{ vars.DATA_WATCHER_SERVICE_ACCOUNT }}
#          DATA_WATCHER_TRIGGER_SERVICE_ACCOUNT: ${{ vars.DATA_WATCHER_TRIGGER_SERVICE_ACCOUNT }}
#          SECURE_COMPUTATION_PUBLIC_API_TARGET: ${{ vars.SECURE_COMPUTATION_PUBLIC_API_TARGET }}
#        run: |
#          echo "data_watcher_trigger_bucket=$DATA_WATCHER_TRIGGER_BUCKET"           >> $GITHUB_OUTPUT
#          echo "data_watcher_service_account=$DATA_WATCHER_SERVICE_ACCOUNT"         >> $GITHUB_OUTPUT
#          echo "data_watcher_trigger_sa=$DATA_WATCHER_TRIGGER_SERVICE_ACCOUNT"      >> $GITHUB_OUTPUT
#          echo "public_api_target=$SECURE_COMPUTATION_PUBLIC_API_TARGET"

#  deploy-data-watcher:
#    needs: export-vars
#    uses: ./.github/workflows/build_and_push_cloud_function.yml
#    with:
##      environment:                ${{ inputs.environment }}
#      environment:                "dev"
#      function_name:              data-watcher
#      entry_point:                org.wfanet.measurement.securecomputation.deploy.gcloud.datawatcher.DataWatcherFunction
#      source_path:                //src/main/kotlin/org/wfanet/measurement/securecomputation/deploy/gcloud/datawatcher:DataWatcherFunction_deploy.jar
#      uber_jar_path:              bazel-bin/src/main/kotlin/org/wfanet/measurement/securecomputation/deploy/gcloud/datawatcher/DataWatcherFunction_deploy.jar
#      trigger_type:               storage
#      trigger_bucket:             ${{ needs.export-vars.outputs.data_watcher_trigger_bucket }}
#      run_service_account:        ${{ needs.export-vars.outputs.data_watcher_service_account }}
#      trigger_service_account:    ${{ needs.export-vars.outputs.data_watcher_trigger_sa }}
#      public_api_target:          ${{ needs.export-vars.outputs.public_api_target }}
#
#      #      trigger_bucket:             ${{ vars.DATA_WATCHER_TRIGGER_BUCKET }}
##      run_service_account:        ${{ vars.DATA_WATCHER_SERVICE_ACCOUNT }}
##      trigger_service_account:    ${{ vars.DATA_WATCHER_TRIGGER_SERVICE_ACCOUNT }}
##      public_api_target:          ${{ vars.SECURE_COMPUTATION_PUBLIC_API_TARGET }}
#      extra_env_vars: |
#        CERT_JAR_RESOURCE_PATH=src/main/k8s/testing/secretfiles/data_watcher_tls.pem,
#        PRIVATE_KEY_JAR_RESOURCE_PATH=src/main/k8s/testing/secretfiles/data_watcher_tls.key,
#        CONTROL_PLANE_CERT_HOST=data-watcher.secure-computation.${{ inputs.environment }}.halo-cmm.org
#
#  deploy-requisition-fetcher:
#    uses: ./.github/workflows/build_and_push_cloud_function.yml
#    with:
#      #      environment: ${{ inputs.environment }}
#      environment:                "dev"
#      function_name:              requisition-fetcher
#      entry_point:                org.wfanet.measurement.edpaggregator.deploy.gcloud.requisitionfetcher.RequisitionFetcherFunction
#      source_path:                //src/main/kotlin/org/wfanet/measurement/edpaggregator/deploy/gcloud/requisitionfetcher:RequisitionFetcherFunction_deploy.jar
#      uber_jar_path:              bazel-bin/src/main/kotlin/org/wfanet/measurement/edpaggregator/deploy/gcloud/requisitionfetcher/RequisitionFetcherFunction_deploy.jar
#      trigger_type:               http
#      run_service_account:        ${{ vars.REQUISITION_FETCHER_SERVICE_ACCOUNT }}
#      public_api_target:          ${{ vars.KINGDOM_PUBLIC_API_TARGET }}
