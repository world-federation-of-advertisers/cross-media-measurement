# Copyright 2025 The Cross-Media Measurement Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "Build and Deploy cloud functions"

on:
  push:
    branches:
      - marcopremier/add_requisition_fetcher_deployment2
  workflow_dispatch:
    inputs:
      environment:
        description: "GitHub environment"
        type: string
        required: true
        default: dev

jobs:
  deploy-data-watcher:
    uses: ./.github/workflows/deploy-function.yml
    with:
      environment:                ${{ inputs.environment }}
      function_name:              data-watcher
      entry_point:                org.wfanet.measurement.securecomputation.deploy.gcloud.datawatcher.DataWatcherFunction
      source_path:                src/main/kotlin/.../DataWatcherFunction_deploy.jar
      trigger_type:               storage
      trigger_bucket:             ${{ vars.DATA_WATCHER_TRIGGER_BUCKET }}
      run_service_account:        ${{ vars.DATA_WATCHER_SERVICE_ACCOUNT }}
      trigger_service_account:    ${{ vars.DATA_WATCHER_TRIGGER_SERVICE_ACCOUNT }}
      public_api_target:          ${{ vars.SECURE_COMPUTATION_PUBLIC_API_TARGET }}
      extra_env_vars: |
        CERT_JAR_RESOURCE_PATH=src/main/k8s/testing/secretfiles/data_watcher_tls.pem,
        PRIVATE_KEY_JAR_RESOURCE_PATH=src/main/k8s/testing/secretfiles/data_watcher_tls.key,
        CONTROL_PLANE_CERT_HOST=data-watcher.secure-computation.${{ inputs.environment }}.halo-cmm.org

  deploy-event-group-sync:
    uses: ./.github/workflows/deploy-function.yml
    with:
      environment:                ${{ inputs.environment }}
      function_name:              event-group-sync
      entry_point:                org.wfanet.measurement.edpaggregator.deploy.gcloud.eventgroups.EventGroupSyncFunction
      source_path:                src/main/kotlin/.../EventGroupSyncFunction_deploy.jar
      trigger_type:               http
      run_service_account:        ${{ vars.EVENT_GROUP_SYNC_SERVICE_ACCOUNT }}
      public_api_target:          ${{ vars.KINGDOM_PUBLIC_API_TARGET }}