# Copyright 2025 The Cross-Media Measurement Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "Configure Control Plane for Secure Computation"

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      image-tag:
        description: "Tag of container images"
        type: string
        required: true
      apply:
        description: "Apply the new configuration"
        type: boolean
        required: true
  workflow_dispatch:
    inputs:
      environment:
        description: "GitHub-managed environment"
        required: true
        type: choice
        options:
        - dev
        - qa
        - head
      image-tag:
        description: "Tag of container images"
        type: string
        required: true
      apply:
        description: "Apply the new configuration"
        type: boolean
        default: false

permissions:
  id-token: write

env:
  KUSTOMIZATION_PATH: "k8s/secure_computation"

jobs:
  update-secure-computation-control-plane:
    runs-on: ubuntu-22.04
    environment: ${{ inputs.environment }}
    steps:
    - uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ vars.GKE_CONFIG_SERVICE_ACCOUNT }}

    - name: Write auth.bazelrc
      env:
        BUILDBUDDY_API_KEY: ${{ secrets.BUILDBUDDY_API_KEY }}
      run: |
        cat << EOF > auth.bazelrc
        build --remote_header=x-buildbuddy-api-key=$BUILDBUDDY_API_KEY
        EOF

    - name: Write ~/.bazelrc
      env:
        IMAGE_TAG: ${{ inputs.image-tag }}
        SPANNER_INSTANCE: ${{ vars.SPANNER_INSTANCE }}
        GCLOUD_REGION: ${{ vars.GCLOUD_REGION }}
      run: |
        cat << EOF > ~/.bazelrc
        common --config=ci
        build --remote_download_outputs=toplevel
        common --config=ghcr
        build --define "image_tag=$IMAGE_TAG"
        build --define "google_cloud_project=$GCLOUD_PROJECT"
        build --define "spanner_instance=$SPANNER_INSTANCE"
        EOF

    - name: Export BAZEL_BIN
      run: echo "BAZEL_BIN=$(bazelisk info bazel-bin)" >> $GITHUB_ENV

    - name: Get GKE cluster credentials
      uses: google-github-actions/get-gke-credentials@v2
      with:
        cluster_name: kingdom
        location: ${{ vars.GCLOUD_ZONE }}

    - name: Generate archives
      run: >
        bazelisk build
        //src/main/k8s/dev:secure_computation.tar
        //src/main/k8s/testing/secretfiles:archive

    - name: Make Kustomization dir
      run: mkdir -p "$KUSTOMIZATION_PATH"

    - name: Extract Kustomization archive
      run: >
        tar -xf "$BAZEL_BIN/src/main/k8s/dev/secure_computation.tar"
        -C "$KUSTOMIZATION_PATH"

    - name: Extract secret files archive
      run: >
        tar -xf "$BAZEL_BIN/src/main/k8s/testing/secretfiles/archive.tar"
        -C "$KUSTOMIZATION_PATH/src/main/k8s/dev/secure_computation_secrets"

    - name: Copy secret generator
      run: >
        cp src/main/k8s/testing/secretfiles/secure_computation_secrets_kustomization.yaml
        "$KUSTOMIZATION_PATH/src/main/k8s/dev/secure_computation_secrets/kustomization.yaml"

    - name: Export KUSTOMIZE_PATH
      run: echo "KUSTOMIZE_PATH=$KUSTOMIZATION_PATH/src/main/k8s/dev/secure_computation" >> $GITHUB_ENV

    - name: kubectl diff
      id: kubectl-diff
      run: kubectl diff -k "$KUSTOMIZE_PATH" || (( $? == 1 ))

    - name: kubectl apply
      if: ${{ inputs.apply }}
      run: kubectl apply -k "$KUSTOMIZE_PATH"

    - name: Wait for rollout
      if: ${{ inputs.apply }}
      run: |
        for deployment in $(kubectl get deployments -o name); do
          kubectl rollout status "$deployment" --timeout=5m
        done
