# Copyright 2025 The Cross-Media Measurement Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "Deploy Cloud Functions"

on:
  push:
    branches:
      - marcopremier/add_requisition_fetcher_deployment2
  workflow_dispatch:
    inputs:
      environment:
        description: "GitHub environment"
        type: string
        required: true
        default: dev

jobs:
  deploy:
    runs-on: ubuntu-22.04
#    environment: ${{ github.event.inputs.environment }}
    environment: "dev"
    env:
      WIP: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
      GCLOUD_PROJECT:                       ${{ vars.GCLOUD_PROJECT }}
      GCLOUD_REGION:                        ${{ vars.GCLOUD_REGION }}
      DATA_WATCHER_TRIGGER_BUCKET:          ${{ vars.DATA_WATCHER_TRIGGER_BUCKET }}
      DATA_WATCHER_SERVICE_ACCOUNT:         ${{ vars.DATA_WATCHER_SERVICE_ACCOUNT }}
      DATA_WATCHER_TRIGGER_SERVICE_ACCOUNT: ${{ vars.DATA_WATCHER_TRIGGER_SERVICE_ACCOUNT }}
      SECURE_COMPUTATION_PUBLIC_API_TARGET: ${{ vars.SECURE_COMPUTATION_PUBLIC_API_TARGET }}
      REQUISITION_FETCHER_SERVICE_ACCOUNT:  ${{ vars.REQUISITION_FETCHER_SERVICE_ACCOUNT }}
      KINGDOM_PUBLIC_API_TARGET:            ${{ vars.KINGDOM_PUBLIC_API_TARGET }}

    steps:

      - uses: actions/checkout@v4

      - name: Dump inputs
        run: |
          echo "provider1 = ${{ env.WORKLOAD_IDENTITY_PROVIDER }}"
          echo "service1  = ${{ vars.TF_SERVICE_ACCOUNT }}"
        shell: bash

      - name: Deploy Data Watcher
        uses: ./.github/actions/build-and-deploy-cloud-function
        with:
#          environment:   ${{ inputs.environment }}
          environment: "dev"
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ vars.TF_SERVICE_ACCOUNT }}
          function_name: data-watcher
          entry_point:   org.wfanet.measurement.securecomputation.deploy.gcloud.datawatcher.DataWatcherFunction
          source_path:   //src/main/kotlin/org/wfanet/measurement/securecomputation/deploy/gcloud/datawatcher:DataWatcherFunction_deploy.jar
          uber_jar_path: bazel-bin/src/main/kotlin/org/wfanet/measurement/securecomputation/deploy/gcloud/datawatcher/DataWatcherFunction_deploy.jar
          trigger_type:  storage
          trigger_bucket: ${{ env.DATA_WATCHER_TRIGGER_BUCKET }}
          run_service_account: ${{ env.DATA_WATCHER_SERVICE_ACCOUNT }}
          trigger_service_account: ${{ env.DATA_WATCHER_TRIGGER_SERVICE_ACCOUNT }}
          extra_env_vars: |
            CERT_JAR_RESOURCE_PATH=src/main/k8s/testing/secretfiles/data_watcher_tls.pem,
            PRIVATE_KEY_JAR_RESOURCE_PATH=src/main/k8s/testing/secretfiles/data_watcher_tls.key,
            CONTROL_PLANE_TARGET=${{ env.SECURE_COMPUTATION_PUBLIC_API_TARGET }},
            CONTROL_PLANE_CERT_HOST=data-watcher.secure-computation.${{ github.event.inputs.environment }}.halo-cmm.org

      - name: Deploy Requisition Fetcher
        uses: ./.github/actions/build-and-deploy-cloud-function
        with:
#          environment:             ${{ inputs.environment }}
          environment: "dev"
          workload_identity_provider: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
          service_account:            ${{ vars.TF_SERVICE_ACCOUNT }}
          function_name:           requisition-fetcher
          entry_point:             org.wfanet.measurement.edpaggregator.deploy.gcloud.requisitionfetcher.RequisitionFetcherFunction
          source_path:             //src/main/kotlin/org/wfanet/measurement/edpaggregator/deploy/gcloud/requisitionfetcher:RequisitionFetcherFunction_deploy.jar
          uber_jar_path:           bazel-bin/src/main/kotlin/org/wfanet/measurement/edpaggregator/deploy/gcloud/requisitionfetcher/RequisitionFetcherFunction_deploy.jar
          trigger_type:            http
          run_service_account:     ${{ env.REQUISITION_FETCHER_SERVICE_ACCOUNT }}
          extra_env_vars: |
            KINGDOM_TARGET=${{ env.KINGDOM_PUBLIC_API_TARGET }}