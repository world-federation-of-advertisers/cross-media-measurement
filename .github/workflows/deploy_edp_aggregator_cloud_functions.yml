# Copyright 2025 The Cross-Media Measurement Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "Build and Deploy cloud functions"

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "GitHub environment"
        type: string
        required: true
        default: dev

jobs:

  export-vars:
    runs-on:      ubuntu-latest
    environment:  ${{ inputs.environment }}
    env:
      DATA_WATCHER_TRIGGER_BUCKET:          ${{ vars.DATA_WATCHER_TRIGGER_BUCKET }}
      DATA_WATCHER_SERVICE_ACCOUNT:         ${{ vars.DATA_WATCHER_SERVICE_ACCOUNT }}
      DATA_WATCHER_TRIGGER_SERVICE_ACCOUNT: ${{ vars.DATA_WATCHER_TRIGGER_SERVICE_ACCOUNT }}
      SECURE_COMPUTATION_PUBLIC_API_TARGET: ${{ vars.SECURE_COMPUTATION_PUBLIC_API_TARGET }}
      REQUISITION_FETCHER_SERVICE_ACCOUNT:  ${{ vars.REQUISITION_FETCHER_SERVICE_ACCOUNT }}
      KINGDOM_PUBLIC_API_TARGET:            ${{ vars.KINGDOM_PUBLIC_API_TARGET }}
    outputs:
      data_watcher_trigger_bucket:      ${{ steps.load.outputs.data_watcher_trigger_bucket }}
      data_watcher_sa:                  ${{ steps.load.outputs.data_watcher_sa }}
      data_watcher_trigger_sa:          ${{ steps.load.outputs.data_watcher_trigger_sa }}
      control_plane_public_api_target:  ${{ steps.load.outputs.control_plane_public_api_target }}
      requisition_fetcher_sa:           ${{ steps.load.outputs.requisition_fetcher_sa }}
      kingdom_public_api_target:        ${{ steps.load.outputs.kingdom_public_api_target }}
    steps:
      - id: load
        run: |
          echo "data_watcher_trigger_bucket=$DATA_WATCHER_TRIGGER_BUCKET"               >> $GITHUB_OUTPUT
          echo "data_watcher_sa=$DATA_WATCHER_SERVICE_ACCOUNT"                          >> $GITHUB_OUTPUT
          echo "data_watcher_trigger_sa=$DATA_WATCHER_TRIGGER_SERVICE_ACCOUNT"          >> $GITHUB_OUTPUT
          echo "control_plane_public_api_target=$SECURE_COMPUTATION_PUBLIC_API_TARGET"  >> $GITHUB_OUTPUT
          echo "requisition_fetcher_sa=$REQUISITION_FETCHER_SERVICE_ACCOUNT"            >> $GITHUB_OUTPUT
          echo "kingdom_public_api_target=$KINGDOM_PUBLIC_API_TARGET"                   >> $GITHUB_OUTPUT

  deploy-data-watcher:
    needs: export-vars
    uses: ./.github/workflows/build_and_deploy_cloud_function.yml
    with:
      environment:                ${{ inputs.environment }}
      function_name:              data-watcher
      entry_point:                org.wfanet.measurement.securecomputation.deploy.gcloud.datawatcher.DataWatcherFunction
      source_path:                //src/main/kotlin/org/wfanet/measurement/securecomputation/deploy/gcloud/datawatcher:DataWatcherFunction_deploy.jar
      uber_jar_path:              bazel-bin/src/main/kotlin/org/wfanet/measurement/securecomputation/deploy/gcloud/datawatcher/DataWatcherFunction_deploy.jar
      trigger_type:               storage
      trigger_bucket:             ${{ needs.export-vars.outputs.data_watcher_trigger_bucket }}
      run_service_account:        ${{ needs.export-vars.outputs.data_watcher_sa }}
      trigger_service_account:    ${{ needs.export-vars.outputs.data_watcher_trigger_sa }}
      extra_env_vars: |
        CERT_JAR_RESOURCE_PATH=src/main/k8s/testing/secretfiles/data_watcher_tls.pem,
        PRIVATE_KEY_JAR_RESOURCE_PATH=src/main/k8s/testing/secretfiles/data_watcher_tls.key,
        CONTROL_PLANE_TARGET=${{ needs.export-vars.outputs.control_plane_public_api_target }},
        CONTROL_PLANE_CERT_HOST=data-watcher.secure-computation.${{ inputs.environment }}.halo-cmm.org

  deploy-requisition-fetcher:
    needs: export-vars
    uses: ./.github/workflows/build_and_deploy_cloud_function.yml
    with:
      environment: ${{ inputs.environment }}
      function_name:              requisition-fetcher
      entry_point:                org.wfanet.measurement.edpaggregator.deploy.gcloud.requisitionfetcher.RequisitionFetcherFunction
      source_path:                //src/main/kotlin/org/wfanet/measurement/edpaggregator/deploy/gcloud/requisitionfetcher:RequisitionFetcherFunction_deploy.jar
      uber_jar_path:              bazel-bin/src/main/kotlin/org/wfanet/measurement/edpaggregator/deploy/gcloud/requisitionfetcher/RequisitionFetcherFunction_deploy.jar
      trigger_type:               http
      run_service_account:        ${{ needs.export-vars.outputs.requisition_fetcher_sa }}
      extra_env_vars: |
        KINGDOM_TARGET=${{ needs.export-vars.outputs.kingdom_public_api_target }}

