# Copyright 2023 The Cross-Media Measurement Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Create CMM infrastructure

on:
  workflow_call:
  workflow_dispatch:
    inputs:
      terraform_version:
        description: 'The Terraform version to use'
        required: false
        default: '1.3.6'
      environment:
        type: choice
        description: 'Environment to run the flow for.'
        default: qa
        options:
          - qa
          - nightly
      terraform_apply:
        required: false
        type: boolean

permissions:
  contents: read
  id-token: write

env:
  ROOT_PATH: '${{ github.workspace }}/src/main/terraform/gcloud'
  ENVIRONMENT: 'qa'
  PROJECT: "halo-cmm"

jobs:
  create-cmm-infra:
    name: CMM Infrastructure
    runs-on: ubuntu-22.04
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout Code
        uses: actions/checkout@v3

      # Install gcloud, `setup-gcloud` automatically picks up authentication from `auth`.
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      # Setup Gcloud identity federation
      - name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1"
        with:
          workload_identity_provider: ${{ secrets.WFI_PROVIDER }}
          service_account: ${{ secrets.WFI_SA }}
          token_format: 'access_token'

      # Install the latest version of Terraform CLI and configure the Terraform CLI
      # configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false

      # Initialize a new or existing Terraform working directory by creating initial files,
      # loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init -reconfigure
        working-directory: ${{env.ROOT_PATH}}

      # Generate a plan
      - name: Terraform Plan
        working-directory: ${{ env.ROOT_PATH }}
        run: | 
          terraform plan '-out=${{ inputs.environment }}_tfplan' \
            -var env=${{ inputs.environment }} \
            -var project=${{ inputs.project }}

      # Apply the plan Generated.
      - name: Terraform Apply
        if: inputs.terraform_apply == true
        working-directory: ${{ env.ROOT_PATH }}
        run: terraform apply ${{ inputs.environment }}_tfplan
