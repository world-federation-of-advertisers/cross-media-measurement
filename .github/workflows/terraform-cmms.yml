# Copyright 2023 The Cross-Media Measurement Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Terraform CMMS

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      apply:
        description: "Apply the new configuration"
        type: boolean
        required: true
      image-tag:
        description: Tag of container images
        type: string
        required: true
  workflow_dispatch:
    inputs:
      environment:
        description: "GitHub-managed environment"
        required: true
        type: choice
        options:
        - dev
        - qa
        - head
      apply:
        description: "Apply the new configuration"
        type: boolean
        default: false
      image-tag:
        description: Tag of container images
        type: string
        required: true

permissions:
  id-token: write

jobs:
  terraform:
    runs-on: ubuntu-22.04
    environment: ${{ inputs.environment }}
    env:
      GCLOUD_MODULE_PATH: src/main/terraform/gcloud/cmms
      GCLOUD_REGION: ${{ vars.GCLOUD_REGION }}
      GCLOUD_ZONE: ${{ vars.GCLOUD_ZONE }}
      DATA_WATCHER_CONFIG_CONTENT: ${{ vars.DATA_WATCHER_CONFIG_CONTENT }}
      REQUISITION_FETCHER_CONFIG_CONTENT: ${{ vars.REQUISITION_FETCHER_CONFIG_CONTENT }}

    steps:
    - uses: actions/checkout@v4

    # Authenticate to Google Cloud. This will export some environment
    # variables, including GCLOUD_PROJECT.
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ vars.TF_SERVICE_ACCOUNT }}

    - name: Set up Java & Maven
      uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: '17'

    - name: Write edpa cloud function configs to files
      env:
        CONFIG_DIR: ${{ runner.temp }}/configs
      run: |
        mkdir -p "$CONFIG_DIR"
        echo "$DATA_WATCHER_CONFIG_CONTENT" > "$CONFIG_DIR/data-watcher-config.textproto"
        echo "$REQUISITION_FETCHER_CONFIG_CONTENT" > "$CONFIG_DIR/requisition-fetcher-config.textproto"

    - name: Set up Maven GitHub Packages auth
      run: |
        mkdir -p ~/.m2
        cat > ~/.m2/settings.xml <<EOF
        <settings>
          <servers>
            <server>
              <id>github</id>
              <username>${{ github.actor }}</username>
              <password>${{ secrets.GITHUB_TOKEN }}</password>
            </server>
          </servers>
        </settings>
        EOF

    - id: get-artifact-version
      uses: ./.github/actions/get-maven-artifact-version
      with:
        package-version: ${{ inputs.image-tag }}

    - name: Download Uber JARs using Maven
      id: download-uber-jars
      env:
        ARTIFACT_VERSION: ${{ steps.get-artifact-version.outputs.artifact-version }}
      run: |
        set -euo pipefail
        TEMP_DIR="${RUNNER_TEMP}/uber-jars"
        mkdir -p "$TEMP_DIR"
        echo "Maven repo: $(mvn help:evaluate -Dexpression=settings.localRepository -q -DforceStdout)"

        declare -A coords
        coords[data-watcher]="org.wfanet.measurement.securecomputation.deploy.gcloud.datawatcher:data-watcher:$ARTIFACT_VERSION:jar"
        coords[requisition-fetcher]="org.wfanet.measurement.edpaggregator.deploy.gcloud.requisitionfetcher:requisition-fetcher:$ARTIFACT_VERSION:jar"
        coords[event-group-sync]="org.wfanet.measurement.edpaggregator.deploy.gcloud.eventgroups:event-group-sync:$ARTIFACT_VERSION:jar"
        
        LOCAL_REPO=$(mvn help:evaluate -Dexpression=settings.localRepository -q -DforceStdout)

        for key in "${!coords[@]}"; do
          dest_dir="$TEMP_DIR/$key"
          mkdir -p "$dest_dir"
          mvn -U dependency:get \
            -DremoteRepositories=github::default::https://maven.pkg.github.com/world-federation-of-advertisers/cross-media-measurement \
            -Dartifact="${coords[$key]}" 
        
          IFS=':' read -r groupId artifactId version type <<<"${coords[$key]}"
          jar_dir="$LOCAL_REPO/${groupId//./\/}/$artifactId/$version"
          jar_path=$(find "$jar_dir" -maxdepth 1 -type f -name "$artifactId-*.jar" ! -name "*sources*" | head -n1)
          filename="${version}-function.jar"
          cp "$jar_path" "$dest_dir/$filename"
          
          safe_key=${key//-/_}
          echo "${safe_key}_source_path=$dest_dir/$filename" >> "$GITHUB_OUTPUT"
        done

    - name: Build test event proto descriptors
      id: build-test-event-descriptors
      env:
        BAZEL_TARGET_LABEL: "//src/main/proto/wfa/measurement/api/v2alpha/event_templates/testing:edpa_event_template_metadata_type"
      run: |
        bazelisk build "$BAZEL_TARGET_LABEL"
        RELATIVE_PROTO_DESCRIPTORS_PATH=$(bazelisk cquery "$BAZEL_TARGET_LABEL" --output=files)
        ABSOLUTE_PROTO_DESCRIPTORS_PATH="$(realpath "$RELATIVE_PROTO_DESCRIPTORS_PATH")"
        echo "event_proto_descriptors_path=$ABSOLUTE_PROTO_DESCRIPTORS_PATH" >> "$GITHUB_OUTPUT"

    - name: terraform init
      env:
        TF_STORAGE_BUCKET: ${{ vars.TF_STORAGE_BUCKET }}
      working-directory: ${{ env.GCLOUD_MODULE_PATH }}
      run: >
        terraform init
        -input=false
        -lockfile=readonly
        -backend-config="bucket=$TF_STORAGE_BUCKET"

    - name: terraform plan
      env:
        KEY_RING: ${{ vars.KEY_RING }}
        SPANNER_INSTANCE: ${{ vars.SPANNER_INSTANCE }}
        SPANNER_PROCESSING_UNITS: ${{ vars.SPANNER_PROCESSING_UNITS }}
        STORAGE_BUCKET: ${{ vars.STORAGE_BUCKET }}
        SECURE_COMPUTATION_BUCKET: ${{ vars.SECURE_COMPUTATION_BUCKET }}
        EDPA_CONFIG_FILES_BUCKET: ${{ vars.EDPA_CONFIG_FILES_BUCKET }}
        TERRAFORM_SERVICE_ACCOUNT: ${{ vars.TF_SERVICE_ACCOUNT }}
        POSTGRES_INSTANCE: ${{ vars.POSTGRES_INSTANCE }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        CONFIG_DIR: ${{ runner.temp }}/configs
        KINGDOM_PUBLIC_API_TARGET: ${{ vars.KINGDOM_PUBLIC_API_TARGET }}
        SECURE_COMPUTATION_PUBLIC_API_TARGET: ${{ vars.SECURE_COMPUTATION_PUBLIC_API_TARGET }}
        IMAGE_TAG: ${{ inputs.image-tag }}
        DATA_WATCHER_FUNCTION_NAME: ${{ vars.DATA_WATCHER_FUNCTION_NAME }}
        REQUISITION_FETCHER_FUNCTION_NAME: ${{ vars.REQUISITION_FETCHER_FUNCTION_NAME }}
        EVENT_GROUP_FUNCTION_NAME: ${{ vars.EVENT_GROUP_FUNCTION_NAME }}
        DATA_WATCHER_ENV_VAR: ${{ vars.DATA_WATCHER_ENV_VAR }}
        DATA_WATCHER_SECRET_MAPPING: ${{ vars.DATA_WATCHER_SECRET_MAPPING }}
        REQUISITION_FETCHER_ENV_VAR: ${{ vars.REQUISITION_FETCHER_ENV_VAR }}
        REQUISITION_FETCHER_SECRET_MAPPING: ${{ vars.REQUISITION_FETCHER_SECRET_MAPPING }}
        EVENT_GROUP_ENV_VAR: ${{ vars.EVENT_GROUP_ENV_VAR }}
        EVENT_GROUP_SECRET_MAPPING: ${{ vars.EVENT_GROUP_SECRET_MAPPING }}
        RESULTS_FULFILLER_EVENT_DESCRIPTOR_BLOB_URI: ${{ vars.RESULTS_FULFILLER_EVENT_DESCRIPTOR_BLOB_URI }}
        EDPA_EDP_KMS_AUDIENCE: ${{ vars.EDPA_EDP_KMS_AUDIENCE }}
        EDPA_EDP_RESOURCE_NAME: ${{ vars.EDPA_EDP_RESOURCE_NAME }}
        EDPA_EDP_TARGET_SERVICE_ACCOUNT: ${{ vars.EDPA_EDP_TARGET_SERVICE_ACCOUNT }}
      working-directory: ${{ env.GCLOUD_MODULE_PATH }}
      run: >
        terraform plan
        -input=false
        -var="key_ring_name=$KEY_RING"
        -var="spanner_instance_name=$SPANNER_INSTANCE"
        -var="spanner_processing_units=$SPANNER_PROCESSING_UNITS"
        -var="storage_bucket_name=$STORAGE_BUCKET"
        -var="secure_computation_storage_bucket_name=$SECURE_COMPUTATION_BUCKET"
        -var="edpa_config_files_bucket_name=$EDPA_CONFIG_FILES_BUCKET"
        -var="terraform_service_account=$TERRAFORM_SERVICE_ACCOUNT"
        -var="postgres_instance_name=$POSTGRES_INSTANCE"
        -var="postgres_password=$POSTGRES_PASSWORD"
        -var="data_watcher_config_file_path=$CONFIG_DIR/data-watcher-config.textproto"
        -var="requisition_fetcher_config_file_path=$CONFIG_DIR/requisition-fetcher-config.textproto"
        -var="kingdom_public_api_target=$KINGDOM_PUBLIC_API_TARGET"
        -var="secure_computation_public_api_target=$SECURE_COMPUTATION_PUBLIC_API_TARGET"
        -var="data_watcher_function_name=$DATA_WATCHER_FUNCTION_NAME"
        -var="requisition_fetcher_function_name=$REQUISITION_FETCHER_FUNCTION_NAME"
        -var="event_group_sync_function_name=$EVENT_GROUP_FUNCTION_NAME"
        -var="data_watcher_env_var=$DATA_WATCHER_ENV_VAR"
        -var="data_watcher_secret_mapping=$DATA_WATCHER_SECRET_MAPPING"
        -var="requisition_fetcher_env_var=$REQUISITION_FETCHER_ENV_VAR"
        -var="requisition_fetcher_secret_mapping=$REQUISITION_FETCHER_SECRET_MAPPING"
        -var="event_group_env_var=$EVENT_GROUP_ENV_VAR"
        -var="event_group_secret_mapping=$EVENT_GROUP_SECRET_MAPPING"
        -var="data_watcher_uber_jar_path=${{ steps.download-uber-jars.outputs.data_watcher_source_path }}"
        -var="requisition_fetcher_uber_jar_path=${{ steps.download-uber-jars.outputs.requisition_fetcher_source_path }}"
        -var="event_group_uber_jar_path=${{ steps.download-uber-jars.outputs.event_group_sync_source_path }}"
        -var="image_tag=$IMAGE_TAG"
        -var="results_fulfiller_event_proto_descriptor_path=${{ steps.build-test-event-descriptors.outputs.event_proto_descriptors_path }}"
        -var="results_fulfiller_event_proto_descriptor_blob_uri=$RESULTS_FULFILLER_EVENT_DESCRIPTOR_BLOB_URI"
        -var="edpa_edp_kms_audience=$EDPA_EDP_KMS_AUDIENCE"
        -var="edpa_edp_service_account=$EDPA_EDP_SERVICE_ACCOUNT"
        -var="edpa_edp_resource_name=$EDPA_EDP_RESOURCE_NAME"
        -out=tfplan

    - name: terraform apply
      if: ${{ inputs.apply }}
      working-directory: ${{ env.GCLOUD_MODULE_PATH }}
      run: terraform apply -input=false tfplan
