# Copyright 2023 The Cross-Media Measurement Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Terraform CMMS

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      apply:
        description: "Apply the new configuration"
        type: boolean
        required: true
      image-tag:
        description: Tag of container images
        type: string
        required: true
  workflow_dispatch:
    inputs:
      environment:
        description: "GitHub-managed environment"
        required: true
        type: choice
        options:
        - dev
        - qa
        - head
      apply:
        description: "Apply the new configuration"
        type: boolean
        default: false
      image-tag:
        description: Tag of container images
        type: string
        required: true

permissions:
  id-token: write

jobs:
  terraform:
    runs-on: ubuntu-22.04
    environment: ${{ inputs.environment }}
    env:
      GCLOUD_MODULE_PATH: src/main/terraform/gcloud/cmms
      GCLOUD_REGION: ${{ vars.GCLOUD_REGION }}
      GCLOUD_ZONE: ${{ vars.GCLOUD_ZONE }}
      DATA_WATCHER_CONFIG_CONTENT: ${{ vars.DATA_WATCHER_CONFIG_CONTENT }}
      REQUISITION_FETCHER_CONFIG_CONTENT: ${{ vars.REQUISITION_FETCHER_CONFIG_CONTENT }}

    steps:
    - uses: actions/checkout@v4

    # Authenticate to Google Cloud. This will export some environment
    # variables, including GCLOUD_PROJECT.
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ vars.TF_SERVICE_ACCOUNT }}

    - name: Write data-watcher config to file
      env:
        CONFIG_DIR: ${{ runner.temp }}/configs
      run: |
        mkdir -p "$CONFIG_DIR"
        echo "$DATA_WATCHER_CONFIG_CONTENT" > "$CONFIG_DIR/data-watcher-config.textproto"
        echo "$REQUISITION_FETCHER_CONFIG_CONTENT" > "$CONFIG_DIR/requisition-fetcher-config.textproto"

    - name: terraform init
      env:
        TF_STORAGE_BUCKET: ${{ vars.TF_STORAGE_BUCKET }}
      working-directory: ${{ env.GCLOUD_MODULE_PATH }}
      run: >
        terraform init
        -input=false
        -lockfile=readonly
        -backend-config="bucket=$TF_STORAGE_BUCKET"

    - name: terraform plan
      env:
        KEY_RING: ${{ vars.KEY_RING }}
        SPANNER_INSTANCE: ${{ vars.SPANNER_INSTANCE }}
        SPANNER_PROCESSING_UNITS: ${{ vars.SPANNER_PROCESSING_UNITS }}
        STORAGE_BUCKET: ${{ vars.STORAGE_BUCKET }}
        SECURE_COMPUTATION_BUCKET: ${{ vars.SECURE_COMPUTATION_BUCKET }}
        EDPA_CONFIG_FILES_BUCKET: ${{ vars.EDPA_CONFIG_FILES_BUCKET }}
        TERRAFORM_SERVICE_ACCOUNT: ${{ vars.TF_SERVICE_ACCOUNT }}
        POSTGRES_INSTANCE: ${{ vars.POSTGRES_INSTANCE }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        CONFIG_DIR: ${{ runner.temp }}/configs
        KINGDOM_PUBLIC_API_TARGET: ${{ vars.KINGDOM_PUBLIC_API_TARGET }}
        SECURE_COMPUTATION_PUBLIC_API_TARGET: ${{ vars.SECURE_COMPUTATION_PUBLIC_API_TARGET }}
        IMAGE_TAG: ${{ inputs.image-tag }}
      working-directory: ${{ env.GCLOUD_MODULE_PATH }}
      run: >
        terraform plan
        -input=false
        -var="key_ring_name=$KEY_RING"
        -var="spanner_instance_name=$SPANNER_INSTANCE"
        -var="spanner_processing_units=$SPANNER_PROCESSING_UNITS"
        -var="storage_bucket_name=$STORAGE_BUCKET"
        -var="secure_computation_storage_bucket_name=$SECURE_COMPUTATION_BUCKET"
        -var="edpa_config_files_bucket_name=$EDPA_CONFIG_FILES_BUCKET"
        -var="terraform_service_account=$TERRAFORM_SERVICE_ACCOUNT"
        -var="postgres_instance_name=$POSTGRES_INSTANCE"
        -var="postgres_password=$POSTGRES_PASSWORD"
        -var="data_watcher_config_file_path=$CONFIG_DIR/data-watcher-config.textproto"
        -var="requisition_fetcher_config_file_path=$CONFIG_DIR/requisition-fetcher-config.textproto"
        -var="kingdom_public_api_target=$KINGDOM_PUBLIC_API_TARGET"
        -var="secure_computation_public_api_target=$SECURE_COMPUTATION_PUBLIC_API_TARGET"
        -var="image_tag=$IMAGE_TAG"
        -out=tfplan

    - name: terraform apply
      if: ${{ inputs.apply }}
      working-directory: ${{ env.GCLOUD_MODULE_PATH }}
      run: terraform apply -input=false tfplan