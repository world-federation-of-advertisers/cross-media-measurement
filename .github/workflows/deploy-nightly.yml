# Copyright 2024 The Cross-Media Measurement Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Deploy nightly build

on:
  schedule:
    - cron: '19 6 * * 1,2,3,4,5'  # Sun-Thu night in America/Los_Angeles.
  workflow_dispatch:

jobs:
  deploy-nightly:
    runs-on: ubuntu-22.04
    steps:
    - id: compute-next-nightly-tag
      # Computes a monotonically increasing "nightly/YYYYMMDD.N" tag based on existing tags in the repo.
      name: Compute next nightly tag
      shell: bash
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -euo pipefail
        date_string="$(TZ='America/Los_Angeles' date +'%Y%m%d')"
        tags=$(gh api "/repos/${GITHUB_REPOSITORY}/git/matching-refs/tags/nightly/${date_string}" --jq '.[].ref' | grep -E '^refs/tags/nightly/[0-9]{8}\.[0-9]+$' || true | sort -V)
        printf "Got tags:\n%s\n" "${tags}"
        last_tag=$(tail -n1 <<< "${tags}")
        declare next_tag
        if [ -z "${last_tag}" ]; then
          next_tag="nightly/${date_string}.1"
        else
          [[ $last_tag =~ refs/tags/(nightly/[0-9]{8})\.([0-9]+)$ ]]
          next_tag="${BASH_REMATCH[1]}.$(( BASH_REMATCH[2] + 1 ))"
        fi
        echo "Next computed tag is: ${next_tag}"
        echo "tag=${next_tag}" >> "$GITHUB_OUTPUT"
    - name: create-tag
      uses: actions/github-script@v7
      env:
        TAG: ${{ steps.compute-next-nightly-tag.outputs.tag }}
      with:
        script: |
          const tag = process.env['TAG'];
          github.rest.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: `refs/tags/${tag}`,
            sha: context.sha,
          });
    # Use workflow dispatch via API so that the workflow gets the right ref.
    - name: create-deploy-dispatch
      uses: actions/github-script@v7
      env:
        TAG: ${{ steps.compute-next-nightly-tag.outputs.tag }}
      with:
        script: |
          const tag = process.env['TAG'];
          github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'update-cmms.yml',
            ref: tag,
            inputs: {
              environment: 'head',
              apply: true,
            },
          });
