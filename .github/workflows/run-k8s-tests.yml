# Copyright 2023 The Cross-Media Measurement Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Run Kubernetes tests

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
  workflow_dispatch:
    inputs:
      environment:
        required: true
        type: choice
        options:
        - dev

permissions:
  id-token: write

jobs:
  run-tests:
    runs-on: ubuntu-20.04
    environment: ${{ inputs.environment }}
    steps:
    - uses: actions/checkout@v3

    # Authenticate to Google Cloud. This will export some environment
    # variables, including GCLOUD_PROJECT.
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ vars.SIMULATOR_SERVICE_ACCOUNT }}

    - name: Write ~/.bazelrc
      env:
        KINGDOM_PUBLIC_API_TARGET: ${{ vars.KINGDOM_PUBLIC_API_TARGET }}
        MC_NAME: ${{ vars.MC_NAME }}
        MC_API_KEY: ${{ secrets.MC_API_KEY }}
        BIGQUERY_DATASET: ${{ vars.BIGQUERY_DATASET }}
        BIGQUERY_TABLE: ${{ vars.BIGQUERY_TABLE }}
      run: |
        cat << EOF > ~/.bazelrc
        common --config=ci
        build --define kingdom_public_api_target=$KINGDOM_PUBLIC_API_TARGET
        build --define mc_name=$MC_NAME
        build --define mc_api_key=$MC_API_KEY
        build --define google_cloud_project=$GCLOUD_PROJECT
        build --define bigquery_dataset=$BIGQUERY_DATASET
        build --define bigquery_table=$BIGQUERY_TABLE
        build --test_env=GOOGLE_APPLICATION_CREDENTIALS
        EOF

    - name: Get Bazel cache params
      id: get-cache-params
      run: |
        repo_cache_path="$(bazelisk info repository_cache)"
        echo "repo-cache-path=${repo_cache_path}" >> $GITHUB_OUTPUT

    - name: Restore repository cache
      uses: actions/cache/restore@v4
      with:
        path: ${{ steps.get-cache-params.outputs.repo-cache-path }}
        key: ${{ vars.BAZEL_REPO_CACHE_KEY }}

    - name: Run tests
      id: run-tests
      run: >
        bazelisk test
        //src/test/kotlin/org/wfanet/measurement/integration/k8s:SyntheticGeneratorCorrectnessTest
        --test_output=streamed

    - name: Upload Bazel testlogs
      continue-on-error: true
      uses: world-federation-of-advertisers/actions/bazel-upload-testlogs@v2
      if: failure() && steps.run-tests.outcome == 'failure'
