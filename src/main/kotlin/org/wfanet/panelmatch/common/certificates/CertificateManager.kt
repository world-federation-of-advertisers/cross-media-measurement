// Copyright 2021 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package org.wfanet.panelmatch.common.certificates

import java.security.PrivateKey
import java.security.cert.X509Certificate
import org.wfanet.panelmatch.common.ExchangeDateKey

/** Manages X509 Certificates and private keys. */
interface CertificateManager {
  data class KeyPair(
    val x509Certificate: X509Certificate,
    val privateKey: PrivateKey,
    val certResourceName: String
  )

  /**
   * Retrieves the [X509Certificate] and resource name generated by a party in the exchange.
   *
   * @param exchange the Exchange that the certificate is scoped for
   * @param certResourceName the resource name for the certificate we want to retrieve
   * @throws [IllegalArgumentException] if not found
   */
  suspend fun getCertificate(
    exchange: ExchangeDateKey,
    certOwnerName: String,
    certResourceName: String
  ): X509Certificate

  /** Grabs the root [X509Certificate] for a party. */
  suspend fun getPartnerRootCertificate(partnerName: String): X509Certificate

  /** Gets the [PrivateKey] created for the current exchange */
  suspend fun getExchangePrivateKey(exchange: ExchangeDateKey): PrivateKey

  /** Gets the [X509Certificate] and [PrivateKey] created for the current exchange. */
  suspend fun getExchangeKeyPair(exchange: ExchangeDateKey): KeyPair

  /**
   * Creates an [X509Certificate] and a corresponding [PrivateKey] for [exchange].
   *
   * After this completes, the same Certificate and PrivateKey can be retrieved by using
   * [getCertificate] and [getExchangePrivateKey], respectively.
   *
   * @return certResourceName compatible with [getCertificate].
   */
  suspend fun createForExchange(exchange: ExchangeDateKey): String
}
