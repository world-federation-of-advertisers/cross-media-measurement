load("@rules_java//java:defs.bzl", "java_binary")
load("@wfa_rules_kotlin_jvm//kotlin:defs.bzl", "kt_jvm_library")
load("//src/main/docker:macros.bzl", "java_image")

package(
    default_visibility = [
        "//src/main/kotlin/org/wfanet/measurement/edpaggregator:__subpackages__",
        "//src/main/kotlin/org/wfanet/measurement/integration/common:__subpackages__",
        "//src/test/kotlin/org/wfanet/measurement/edpaggregator:__subpackages__",
    ],
)

kt_jvm_library(
    name = "results_fulfiller",
    srcs = ["ResultsFulfiller.kt"],
    deps = [
        ":continuous_gaussian_noiser_selector",
        ":event_reader",
        ":noiser_selector",
        ":requisition_specs",
        ":vid_filter",
        "//src/main/kotlin/org/wfanet/measurement/api/v2alpha:packed_messages",
        "//src/main/kotlin/org/wfanet/measurement/api/v2alpha:resource_key",
        "//src/main/kotlin/org/wfanet/measurement/dataprovider:measurement_results",
        "//src/main/kotlin/org/wfanet/measurement/dataprovider:requisition_refusal_exception",
        "//src/main/kotlin/org/wfanet/measurement/edpaggregator/resultsfulfiller/compute/protocols/direct:direct_measurement_result_factory",
        "//src/main/kotlin/org/wfanet/measurement/edpaggregator/resultsfulfiller/fulfillers:direct_measurement_fulfiller",
        "//src/main/kotlin/org/wfanet/measurement/eventdataprovider/noiser",
        "//src/main/proto/wfa/measurement/api/v2alpha:measurement_spec_kt_jvm_proto",
        "//src/main/proto/wfa/measurement/api/v2alpha:requisitions_service_kt_jvm_grpc_proto",
        "//src/main/proto/wfa/measurement/edpaggregator/v1alpha:grouped_requisitions_kt_jvm_proto",
        "//src/main/proto/wfa/measurement/edpaggregator/v1alpha:labeled_impression_kt_jvm_proto",
        "@wfa_consent_signaling_client//src/main/kotlin/org/wfanet/measurement/consent/client/dataprovider",
    ],
)

kt_jvm_library(
    name = "noiser_selector",
    srcs = ["NoiserSelector.kt"],
    deps = [
        "//src/main/kotlin/org/wfanet/measurement/eventdataprovider/noiser",
        "//src/main/proto/wfa/measurement/api/v2alpha:protocol_config_kt_jvm_proto",
    ],
)

kt_jvm_library(
    name = "continuous_gaussian_noiser_selector",
    srcs = ["ContinuousGaussianNoiseSelector.kt"],
    deps = [
        ":noiser_selector",
        "//src/main/kotlin/org/wfanet/measurement/dataprovider:requisition_refusal_exception",
        "//src/main/proto/wfa/measurement/api/v2alpha:requisitions_service_kt_jvm_grpc_proto",
    ],
)

kt_jvm_library(
    name = "no_noiser_selector",
    srcs = ["NoNoiserSelector.kt"],
    deps = [
        ":noiser_selector",
        "//src/main/kotlin/org/wfanet/measurement/dataprovider:requisition_refusal_exception",
        "//src/main/proto/wfa/measurement/api/v2alpha:requisitions_service_kt_jvm_grpc_proto",
    ],
)

kt_jvm_library(
    name = "impression_read_exception",
    srcs = ["ImpressionReadException.kt"],
    deps = [],
)

kt_jvm_library(
    name = "labeled_event",
    srcs = ["LabeledEvent.kt"],
    deps = [
        "@wfa_common_jvm//imports/java/com/google/protobuf",
    ],
)

kt_jvm_library(
    name = "event_batch",
    srcs = ["EventBatch.kt"],
    deps = [
        ":labeled_event",
        "@wfa_common_jvm//imports/java/com/google/protobuf",
    ],
)

kt_jvm_library(
    name = "event_source",
    srcs = ["EventSource.kt"],
    deps = [
        ":labeled_event",
        "@wfa_common_jvm//imports/java/com/google/protobuf",
        "@wfa_common_jvm//imports/kotlin/kotlinx/coroutines:core",
    ],
)

kt_jvm_library(
    name = "storage_event_source",
    srcs = ["StorageEventSource.kt"],
    deps = [
        ":event_reader",
        ":event_source",
        ":labeled_event",
        "//src/main/kotlin/org/wfanet/measurement/edpaggregator:storage_config",
        "@wfa_common_jvm//imports/java/com/google/protobuf",
        "@wfa_common_jvm//imports/kotlin/kotlinx/coroutines:core",
        "@wfa_common_jvm//src/main/kotlin/org/wfanet/measurement/common/crypto/tink",
        "@wfa_common_jvm//src/main/kotlin/org/wfanet/measurement/storage:selected_storage_client",
    ],
)

kt_jvm_library(
    name = "filter_processor",
    srcs = ["FilterProcessor.kt"],
    deps = [
        ":event_batch",
        ":labeled_event",
        "//src/main/kotlin/org/wfanet/measurement/eventdataprovider/eventfiltration:event_filters",
        "@wfa_common_jvm//imports/java/com/google/protobuf",
        "@wfa_common_jvm//imports/kotlin/kotlinx/coroutines:core",
    ],
)

kt_jvm_library(
    name = "filter_spec",
    srcs = ["FilterSpec.kt"],
    deps = [
        "@wfa_common_jvm//imports/java/com/google/protobuf",
        "//src/main/proto/wfa/measurement/api/v2alpha:requisition_spec_kt_jvm_proto",
    ],
)

kt_jvm_library(
    name = "vid_filter",
    srcs = ["VidFilter.kt"],
    deps = [
        "//src/main/kotlin/org/wfanet/measurement/eventdataprovider/eventfiltration:event_filters",
        "//src/main/proto/wfa/measurement/api/v2alpha:requisition_spec_kt_jvm_proto",
        "//src/main/proto/wfa/measurement/edpaggregator/v1alpha:labeled_impression_kt_jvm_proto",
        "@any_sketch_java//src/main/java/org/wfanet/sampling",
    ],
)

kt_jvm_library(
    name = "frequency_vector",
    srcs = [
        "FrequencyVector.kt",
        "StripedByteFrequencyVector.kt",
    ],
    deps = [],
)

kt_jvm_library(
    name = "filter_configuration",
    srcs = ["FilterConfiguration.kt"],
    deps = [
        ":filter_spec",
    ],
)


kt_jvm_library(
    name = "event_processing_pipeline",
    srcs = ["EventProcessingPipeline.kt"],
    deps = [
        ":event_source",
        ":filter_configuration",
        ":filter_spec",
        ":frequency_vector",
        ":labeled_event",
        "//src/main/kotlin/org/wfanet/measurement/eventdataprovider/shareshuffle/v2alpha:shareshuffle",
        "@wfa_common_jvm//imports/java/com/google/protobuf",
        "@wfa_common_jvm//imports/kotlin/kotlinx/coroutines:core",
    ],
)

kt_jvm_library(
    name = "parallel_batched_pipeline",
    srcs = ["ParallelBatchedPipeline.kt"],
    deps = [
        ":event_batch",
        ":event_processing_pipeline",
        ":filter_configuration",
        ":filter_processor",
        ":filter_spec",
        ":frequency_vector",
        ":frequency_vector_sink",
        ":labeled_event",
        "//src/main/kotlin/org/wfanet/measurement/eventdataprovider/shareshuffle/v2alpha:shareshuffle",
        "@wfa_common_jvm//imports/java/com/google/protobuf",
        "@wfa_common_jvm//imports/kotlin/kotlinx/coroutines:core",
    ],
)

kt_jvm_library(
    name = "event_reader",
    srcs = ["EventReader.kt"],
    deps = [
        ":impression_read_exception",
        ":labeled_event",
        "//src/main/kotlin/org/wfanet/measurement/edpaggregator:encrypted_storage",
        "//src/main/kotlin/org/wfanet/measurement/edpaggregator:storage_config",
        "//src/main/proto/wfa/measurement/edpaggregator/v1alpha:blob_details_kt_jvm_proto",
        "//src/main/proto/wfa/measurement/edpaggregator/v1alpha:labeled_impression_kt_jvm_proto",
        "@wfa_common_jvm//imports/java/com/google/crypto/tink",
        "@wfa_common_jvm//src/main/kotlin/org/wfanet/measurement/common/crypto/tink",
        "@wfa_common_jvm//src/main/kotlin/org/wfanet/measurement/storage:mesos_recordio_storage_client",
        "@wfa_common_jvm//src/main/kotlin/org/wfanet/measurement/storage:selected_storage_client",
    ],
)

kt_jvm_library(
    name = "results_fulfiller_app",
    srcs = ["ResultsFulfillerApp.kt"],
    deps = [
        ":continuous_gaussian_noiser_selector",
        ":no_noiser_selector",
        ":requisition_stub_factory",
        ":results_fulfiller",
        "//src/main/kotlin/org/wfanet/measurement/securecomputation/controlplane/v1alpha:work_item_attempts_service",
        "//src/main/kotlin/org/wfanet/measurement/securecomputation/controlplane/v1alpha:work_items_service",
        "//src/main/kotlin/org/wfanet/measurement/securecomputation/teesdk:base_tee_application",
        "//src/main/proto/wfa/measurement/edpaggregator/v1alpha:results_fulfiller_params_kt_jvm_proto",
        "//src/main/proto/wfa/measurement/securecomputation/controlplane/v1alpha:work_item_kt_jvm_proto",
        "@wfa_common_jvm//imports/java/com/google/protobuf",
        "@wfa_common_jvm//imports/kotlin/kotlinx/coroutines:core",
        "@wfa_common_jvm//src/main/kotlin/org/wfanet/measurement/queue:queue_subscriber",
    ],
)

kt_jvm_library(
    name = "requisition_stub_factory",
    srcs = ["RequisitionStubFactory.kt"],
    deps = [
        "//src/main/proto/wfa/measurement/api/v2alpha:requisitions_service_kt_jvm_grpc_proto",
        "//src/main/proto/wfa/measurement/edpaggregator/v1alpha:results_fulfiller_params_kt_jvm_proto",
        "@wfa_common_jvm//imports/java/com/google/protobuf",
        "@wfa_common_jvm//imports/kotlin/kotlinx/coroutines:core",
    ],
)

kt_jvm_library(
    name = "pipeline_configuration",
    testonly = True,
    srcs = ["PipelineConfiguration.kt"],
    deps = [
        ":event_reader",
        "//src/main/proto/wfa/measurement/api/v2alpha/event_group_metadata/testing:simulator_synthetic_data_spec_kt_jvm_proto",
    ],
)

kt_jvm_library(
    name = "event_processing_orchestrator",
    testonly = True,
    srcs = ["EventProcessingOrchestrator.kt"],
    deps = [
        ":event_reader",
        ":event_source",
        ":filter_configuration",
        ":filter_spec",
        ":frequency_vector",
        ":labeled_event",
        ":parallel_batched_pipeline",
        ":pipeline_configuration",
        ":storage_event_source",
        "//src/main/kotlin/org/wfanet/measurement/eventdataprovider/shareshuffle/v2alpha:shareshuffle",
        "//src/main/proto/wfa/measurement/api/v2alpha:measurement_spec_kt_jvm_proto",
        "//src/main/proto/wfa/measurement/api/v2alpha:requisition_kt_jvm_proto",
        "//src/main/proto/wfa/measurement/api/v2alpha/event_group_metadata/testing:simulator_synthetic_data_spec_kt_jvm_proto",
        "//src/main/proto/wfa/measurement/api/v2alpha/event_templates/testing:test_event_kt_jvm_proto",
        "//src/main/kotlin/org/wfanet/measurement/loadtest/dataprovider:population_spec_converter",
        "@wfa_common_jvm//imports/java/com/google/protobuf",
        "@wfa_common_jvm//imports/kotlin/kotlinx/coroutines:core",
        "@wfa_common_jvm//src/main/kotlin/org/wfanet/measurement/common",
    ],
)

kt_jvm_library(
    name = "requisition_stub_factory_impl",
    srcs = ["RequisitionStubFactoryImpl.kt"],
    deps = [
        ":requisition_stub_factory",
        "//src/main/proto/wfa/measurement/api/v2alpha:requisitions_service_kt_jvm_grpc_proto",
        "//src/main/proto/wfa/measurement/edpaggregator/v1alpha:results_fulfiller_params_kt_jvm_proto",
        "@wfa_common_jvm//imports/java/com/google/protobuf",
        "@wfa_common_jvm//imports/kotlin/kotlinx/coroutines:core",
        "@wfa_common_jvm//src/main/kotlin/org/wfanet/measurement/common/crypto:signing_certs",
        "@wfa_common_jvm//src/main/kotlin/org/wfanet/measurement/common/grpc",
    ],
)

kt_jvm_library(
    name = "requisition_specs",
    srcs = ["RequisitionSpecs.kt"],
    deps = [
        ":event_reader",
        ":vid_filter",
        "//src/main/kotlin/org/wfanet/measurement/eventdataprovider/eventfiltration:event_filters",
        "//src/main/proto/wfa/measurement/api/v2alpha:measurement_spec_kt_jvm_proto",
    ],
)

kt_jvm_library(
    name = "frequency_vector_sink",
    srcs = ["FrequencyVectorSink.kt"],
    deps = [
        ":filter_spec",
        ":frequency_vector",
        ":labeled_event",
        "//src/main/kotlin/org/wfanet/measurement/eventdataprovider/shareshuffle/v2alpha:shareshuffle",
        "@wfa_common_jvm//imports/java/com/google/protobuf",
    ],
)

kt_jvm_library(
    name = "results_fulfiller_app_runner",
    srcs = ["ResultsFulfillerAppRunner.kt"],
    deps = [
        ":requisition_stub_factory_impl",
        ":results_fulfiller_app",
        "//imports/java/com/google/crypto/tink/integration/gcpkms",
        "@wfa_common_jvm//src/main/kotlin/org/wfanet/measurement/gcloud/pubsub:google_pub_sub_client",
        "@wfa_common_jvm//src/main/kotlin/org/wfanet/measurement/gcloud/pubsub:publisher",
        "@wfa_common_jvm//src/main/kotlin/org/wfanet/measurement/gcloud/pubsub:subscriber",
    ],
)

java_binary(
    name = "ResultsFulfiller",
    main_class = "org.wfanet.measurement.edpaggregator.resultsfulfiller.ResultsFulfillerAppRunner",
    runtime_deps = [
        ":results_fulfiller_app_runner",
    ],
)

java_image(
    name = "results_fulfiller_image",
    binary = ":ResultsFulfiller",
    main_class = "org.wfanet.measurement.edpaggregator.resultsfulfiller.ResultsFulfillerAppRunner",
    visibility = ["//src:docker_image_deployment"],
)