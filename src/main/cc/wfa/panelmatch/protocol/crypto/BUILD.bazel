load("@rules_cc//cc:defs.bzl", "cc_library")

package(default_visibility = ["//visibility:public"])

_INCLUDE_PREFIX = "/src/main/cc"

cc_library(
    name = "deterministic_commutative_encryption_utility",
    srcs = ["deterministic_commutative_encryption_utility.cc"],
    hdrs = ["deterministic_commutative_encryption_utility.h"],
    strip_include_prefix = _INCLUDE_PREFIX,
    deps = [
        "//src/main/cc/wfa/panelmatch/common/crypto:deterministic_commutative_cipher",
        "//src/main/cc/wfa/panelmatch/common/crypto:ec_commutative_cipher_key_generator",
        "//src/main/cc/wfa/panelmatch/common/crypto:key_loader",
        "//src/main/proto/wfa/panelmatch/protocol/crypto:deterministic_commutative_cryptor_cc_proto",
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:span",
        "@tink_base//cc/util:secret_data",
        "@wfa_common_cpp//src/main/cc/common_cpp/macros",
        "@wfa_common_cpp//src/main/cc/common_cpp/time:started_thread_cpu_timer",
    ],
)

cc_library(
    name = "deterministic_commutative_encryption_utility_wrapper",
    srcs = ["deterministic_commutative_encryption_utility_wrapper.cc"],
    hdrs = ["deterministic_commutative_encryption_utility_wrapper.h"],
    strip_include_prefix = _INCLUDE_PREFIX,
    deps = [
        ":deterministic_commutative_encryption_utility",
        "@com_google_absl//absl/status:statusor",
        "@wfa_common_cpp//src/main/cc/common_cpp/jni:jni_wrap",
    ],
)

cc_library(
    name = "event_data_preprocessor",
    srcs = ["event_data_preprocessor.cc"],
    hdrs = ["event_data_preprocessor.h"],
    strip_include_prefix = _INCLUDE_PREFIX,
    deps = [
        "//src/main/cc/wfa/panelmatch/common/crypto:aes",
        "//src/main/cc/wfa/panelmatch/common/crypto:aes_with_hkdf",
        "//src/main/cc/wfa/panelmatch/common/crypto:deterministic_commutative_cipher",
        "//src/main/cc/wfa/panelmatch/common/crypto:hkdf",
        "//src/main/cc/wfa/panelmatch/common/crypto:peppered_fingerprinter",
        "@com_github_google_glog//:glog",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@tink_base//cc/util:secret_data",
        "@wfa_common_cpp//src/main/cc/common_cpp/fingerprinters",
        "@wfa_common_cpp//src/main/cc/common_cpp/macros",
    ],
)
