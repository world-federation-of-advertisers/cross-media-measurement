load("@rules_cc//cc:defs.bzl", "cc_library")
load("@wfa_common_jvm//build:defs.bzl", "test_target")

package(default_visibility = [
    ":__pkg__",
    test_target(":__pkg__"),
    "//src/main/cc/wfa/measurement:__subpackages__",
    "//src/main/swig/protocol:__subpackages__",
])

_INCLUDE_PREFIX = "/src/main/cc"

cc_library(
    name = "honest_majority_share_shuffle_utility_helper",
    srcs = [
        "honest_majority_share_shuffle_utility_helper.cc",
    ],
    hdrs = [
        "honest_majority_share_shuffle_utility_helper.h",
    ],
    strip_include_prefix = _INCLUDE_PREFIX,
    deps = [
        "//src/main/cc/wfa/measurement/internal/duchy/protocol/common:noise_parameters_computation",
        "//src/main/proto/wfa/measurement/internal/duchy/protocol:honest_majority_share_shuffle_methods_cc_proto",
        "@any_sketch//src/main/cc/any_sketch/crypto:shuffle",
        "@any_sketch//src/main/cc/math:distributed_discrete_gaussian_noiser",
        "@any_sketch//src/main/cc/math:distributed_geometric_noiser",
        "@any_sketch//src/main/cc/math:open_ssl_uniform_random_generator",
        "@any_sketch//src/main/cc/math:uniform_pseudorandom_generator",
        "@any_sketch//src/main/proto/wfa/any_sketch:secret_share_cc_proto",
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/status",
        "@wfa_common_cpp//src/main/cc/common_cpp/jni:jni_wrap",
        "@wfa_common_cpp//src/main/cc/common_cpp/macros",
        "@wfa_common_cpp//src/main/cc/common_cpp/time:started_thread_cpu_timer",
    ],
)

cc_library(
    name = "honest_majority_share_shuffle_utility",
    srcs = [
        "honest_majority_share_shuffle_utility.cc",
    ],
    hdrs = [
        "honest_majority_share_shuffle_utility.h",
    ],
    strip_include_prefix = _INCLUDE_PREFIX,
    deps = [
        ":honest_majority_share_shuffle_utility_helper",
        "//src/main/cc/wfa/measurement/internal/duchy/protocol/common:noise_parameters_computation",
        "//src/main/proto/wfa/measurement/internal/duchy/protocol:honest_majority_share_shuffle_methods_cc_proto",
        "@any_sketch//src/main/cc/any_sketch/crypto:shuffle",
        "@any_sketch//src/main/cc/math:distributed_discrete_gaussian_noiser",
        "@any_sketch//src/main/cc/math:distributed_geometric_noiser",
        "@any_sketch//src/main/cc/math:open_ssl_uniform_random_generator",
        "@any_sketch//src/main/cc/math:uniform_pseudorandom_generator",
        "@any_sketch//src/main/proto/wfa/any_sketch:secret_share_cc_proto",
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/status",
        "@com_google_protobuf//:protobuf",
        "@wfa_common_cpp//src/main/cc/common_cpp/jni:jni_wrap",
        "@wfa_common_cpp//src/main/cc/common_cpp/macros",
        "@wfa_common_cpp//src/main/cc/common_cpp/time:started_thread_cpu_timer",
    ],
)
