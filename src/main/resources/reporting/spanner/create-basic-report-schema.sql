-- liquibase formatted sql

-- Copyright 2025 The Cross-Media Measurement Authors
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- changeset tristanvuong2021:1 dbms:cloudspanner
-- comment: Create initial basic report tables

-- Set protobuf FileDescriptorSet as a base64 string. This gets applied to the next DDL batch.
SET PROTO_DESCRIPTORS = '';

START BATCH DDL;

-- Create the initial proto bundle with all types defined in the FileDescriptorSet.
CREATE PROTO BUNDLE (
  `wfa.measurement.internal.reporting.v2.EventTemplateField`,
  `wfa.measurement.internal.reporting.v2.EventTemplateField.FieldValue`,
  `wfa.measurement.internal.reporting.v2.EventFilter`,
  `wfa.measurement.internal.reporting.v2.ImpressionQualificationFilterSpec`,
  `wfa.measurement.internal.reporting.v2.ImpressionQualificationFilterSpec.MediaType`,
  `wfa.measurement.internal.reporting.v2.ReportingImpressionQualificationFilter`,
  `google.type.Date`,
  `google.protobuf.Duration`,
  `google.type.DateTime`,
  `google.type.TimeZone`,
  `wfa.measurement.internal.reporting.v2.ReportingInterval`,
  `wfa.measurement.internal.reporting.v2.BasicReportDetails`,
  `google.type.DayOfWeek`,
  `wfa.measurement.internal.reporting.v2.MetricFrequencySpec`,
  `google.protobuf.Timestamp`,
  `wfa.measurement.internal.reporting.v2.ResultGroup`,
  `wfa.measurement.internal.reporting.v2.ResultGroup.MetricMetadata`,
  `wfa.measurement.internal.reporting.v2.ResultGroup.MetricMetadata.ReportingUnitComponentSummary`,
  `wfa.measurement.internal.reporting.v2.ResultGroup.MetricMetadata.ReportingUnitComponentSummary.EventGroupSummary`,
  `wfa.measurement.internal.reporting.v2.ResultGroup.MetricMetadata.ReportingUnitSummary`,
  `wfa.measurement.internal.reporting.v2.ResultGroup.MetricMetadata.DimensionSpecSummary`,
  `wfa.measurement.internal.reporting.v2.ResultGroup.MetricSet`,
  `wfa.measurement.internal.reporting.v2.ResultGroup.MetricSet.BasicMetricSet`,
  `wfa.measurement.internal.reporting.v2.ResultGroup.MetricSet.ReportingUnitMetricSet`,
  `wfa.measurement.internal.reporting.v2.ResultGroup.MetricSet.ComponentMetricSet`,
  `wfa.measurement.internal.reporting.v2.ResultGroup.MetricSet.DataProviderComponentMetricSetMapEntry`,
  `wfa.measurement.internal.reporting.v2.ResultGroup.MetricSet.DataProviderComponentIntersectionMetricSet`,
  `wfa.measurement.internal.reporting.v2.ResultGroup.Result`,
  `wfa.measurement.internal.reporting.v2.BasicReportResultDetails`,
);

CREATE TABLE MeasurementConsumers (
  MeasurementConsumerId INT64 NOT NULL,
  CmmsMeasurementConsumerId STRING(MAX) NOT NULL
) PRIMARY KEY (MeasurementConsumerId);

CREATE UNIQUE INDEX MeasurementConsumersByCmmsMeasurementConsumerId
  ON MeasurementConsumers(CmmsMeasurementConsumerId);

CREATE TABLE BasicReports (
  MeasurementConsumerId INT64 NOT NULL,
  BasicReportId INT64 NOT NULL,
  ExternalBasicReportId STRING(MAX) NOT NULL,
  -- Is represented by an ExternalReportingSetId in the Postgres database.
  ExternalCampaignGroupId STRING(MAX) NOT NULL,
  CreateTime TIMESTAMP NOT NULL OPTIONS (allow_commit_timestamp = true),
  BasicReportDetails `wfa.measurement.internal.reporting.v2.BasicReportDetails`
    NOT NULL,
  BasicReportResultDetails `wfa.measurement.internal.reporting.v2.BasicReportResultDetails`
    NOT NULL,
  BasicReportsIndexShardId INT64 NOT NULL AS (
    ABS(MOD(FARM_FINGERPRINT(CAST(BasicReportId AS STRING)), 64))
  ) STORED,

  FOREIGN KEY (MeasurementConsumerId) REFERENCES MeasurementConsumers (MeasurementConsumerId)
) PRIMARY KEY (MeasurementConsumerId, BasicReportId),
INTERLEAVE IN PARENT MeasurementConsumers ON DELETE CASCADE;

CREATE UNIQUE INDEX BasicReportsByExternalBasicReportId
  ON BasicReports(MeasurementConsumerId, ExternalBasicReportId);

CREATE INDEX BasicReportsByCreateTime
  ON BasicReports(BasicReportsIndexShardId, MeasurementConsumerId, CreateTime);

RUN BATCH;
