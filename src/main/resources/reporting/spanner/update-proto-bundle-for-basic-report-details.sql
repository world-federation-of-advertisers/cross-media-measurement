-- liquibase formatted sql

-- Copyright 2025 The Cross-Media Measurement Authors
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- changeset tristanvuong2021:4 dbms:cloudspanner
-- comment: Alter proto bundle for BasicReportDetails change

-- Set protobuf FileDescriptorSet as a base64 string. This gets applied to the next DDL batch.
SET PROTO_DESCRIPTORS = '';

START BATCH DDL;

ALTER PROTO BUNDLE INSERT (
  `wfa.measurement.internal.reporting.v2.DimensionSpec`,
  `wfa.measurement.internal.reporting.v2.DimensionSpec.Grouping`,
  `wfa.measurement.internal.reporting.v2.ResultGroupMetricSpec`,
  `wfa.measurement.internal.reporting.v2.ResultGroupMetricSpec.BasicMetricSetSpec`,
  `wfa.measurement.internal.reporting.v2.ResultGroupMetricSpec.ReportingUnitMetricSetSpec`,
  `wfa.measurement.internal.reporting.v2.ResultGroupMetricSpec.UniqueMetricSetSpec`,
  `wfa.measurement.internal.reporting.v2.ResultGroupMetricSpec.ComponentMetricSetSpec`,
  `wfa.measurement.internal.reporting.v2.ResultGroupMetricSpec.ComponentIntersectionMetricSetSpec`,
  `wfa.measurement.internal.reporting.v2.ResultGroupSpec`,
  `wfa.measurement.internal.reporting.v2.ReportingUnit`,
  `wfa.measurement.internal.reporting.v2.ReportingUnit.DataProviderKeys`,
  `wfa.measurement.internal.reporting.v2.ReportingUnit.DataProviderKey`,
  `wfa.measurement.internal.reporting.v2.ReportingUnit.ReportingSetKeys`,
  `wfa.measurement.internal.reporting.v2.ReportingUnit.ReportingSetKey`,
  `wfa.measurement.internal.reporting.v2.ResultGroup.MetricSet.UniqueMetricSet`,
);

ALTER PROTO BUNDLE UPDATE (
  `wfa.measurement.internal.reporting.v2.BasicReportDetails`,
  `wfa.measurement.internal.reporting.v2.BasicReportResultDetails`,
);

RUN BATCH;
