-- liquibase formatted sql

-- Copyright 2025 The Cross-Media Measurement Authors
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- changeset sanjayvas:26 dbms:cloudspanner
-- comment: Add plaintext metadata to EventGroups.

-- Set protobuf FileDescriptorSet as a base64 string. This gets applied to the next DDL batch.
SET PROTO_DESCRIPTORS = 'CsQBCjp3ZmEvbWVhc3VyZW1lbnQvaW50ZXJuYWwva2luZ2RvbS9jZXJ0aWZpY2F0ZV9kZXRhaWxzLnByb3RvEiB3ZmEubWVhc3VyZW1lbnQuaW50ZXJuYWwua2luZ2RvbSIvChJDZXJ0aWZpY2F0ZURldGFpbHMSGQoIeDUwOV9kZXIYASABKAxSB3g1MDlEZXJCKwonb3JnLndmYW5ldC5tZWFzdXJlbWVudC5pbnRlcm5hbC5raW5nZG9tUAFiBnByb3RvMwriBApFd2ZhL21lYXN1cmVtZW50L2ludGVybmFsL2tpbmdkb20vcGFydGljaXBhbnRfcmVxdWlzaXRpb25fcGFyYW1zLnByb3RvEiB3ZmEubWVhc3VyZW1lbnQuaW50ZXJuYWwua2luZ2RvbSLkAQoVTGlxdWlkTGVnaW9uc1YyUGFyYW1zEi0KE2VsX2dhbWFsX3B1YmxpY19rZXkYASABKAxSEGVsR2FtYWxQdWJsaWNLZXkSQAodZWxfZ2FtYWxfcHVibGljX2tleV9zaWduYXR1cmUYAiABKAxSGWVsR2FtYWxQdWJsaWNLZXlTaWduYXR1cmUSWgorZWxfZ2FtYWxfcHVibGljX2tleV9zaWduYXR1cmVfYWxnb3JpdGhtX29pZBgDIAEoCVIlZWxHYW1hbFB1YmxpY0tleVNpZ25hdHVyZUFsZ29yaXRobU9pZCLaAQogSG9uZXN0TWFqb3JpdHlTaGFyZVNodWZmbGVQYXJhbXMSJgoPdGlua19wdWJsaWNfa2V5GAEgASgMUg10aW5rUHVibGljS2V5EjkKGXRpbmtfcHVibGljX2tleV9zaWduYXR1cmUYAiABKAxSFnRpbmtQdWJsaWNLZXlTaWduYXR1cmUSUwondGlua19wdWJsaWNfa2V5X3NpZ25hdHVyZV9hbGdvcml0aG1fb2lkGAMgASgJUiJ0aW5rUHVibGljS2V5U2lnbmF0dXJlQWxnb3JpdGhtT2lkQisKJ29yZy53ZmFuZXQubWVhc3VyZW1lbnQuaW50ZXJuYWwua2luZ2RvbVABYgZwcm90bzMKgAUKRndmYS9tZWFzdXJlbWVudC9pbnRlcm5hbC9raW5nZG9tL2NvbXB1dGF0aW9uX3BhcnRpY2lwYW50X2RldGFpbHMucHJvdG8SIHdmYS5tZWFzdXJlbWVudC5pbnRlcm5hbC5raW5nZG9tGkV3ZmEvbWVhc3VyZW1lbnQvaW50ZXJuYWwva2luZ2RvbS9wYXJ0aWNpcGFudF9yZXF1aXNpdGlvbl9wYXJhbXMucHJvdG8ilwMKHUNvbXB1dGF0aW9uUGFydGljaXBhbnREZXRhaWxzEmUKEWxpcXVpZF9sZWdpb25zX3YyGAEgASgLMjcud2ZhLm1lYXN1cmVtZW50LmludGVybmFsLmtpbmdkb20uTGlxdWlkTGVnaW9uc1YyUGFyYW1zSABSD2xpcXVpZExlZ2lvbnNWMhJ5ChxyZWFjaF9vbmx5X2xpcXVpZF9sZWdpb25zX3YyGAIgASgLMjcud2ZhLm1lYXN1cmVtZW50LmludGVybmFsLmtpbmdkb20uTGlxdWlkTGVnaW9uc1YyUGFyYW1zSABSGHJlYWNoT25seUxpcXVpZExlZ2lvbnNWMhKHAQodaG9uZXN0X21ham9yaXR5X3NoYXJlX3NodWZmbGUYAyABKAsyQi53ZmEubWVhc3VyZW1lbnQuaW50ZXJuYWwua2luZ2RvbS5Ib25lc3RNYWpvcml0eVNoYXJlU2h1ZmZsZVBhcmFtc0gAUhpob25lc3RNYWpvcml0eVNoYXJlU2h1ZmZsZUIKCghwcm90b2NvbEIrCidvcmcud2ZhbmV0Lm1lYXN1cmVtZW50LmludGVybmFsLmtpbmdkb21QAWIGcHJvdG8zCowCCkF3ZmEvbWVhc3VyZW1lbnQvaW50ZXJuYWwva2luZ2RvbS9kYXRhX3Byb3ZpZGVyX2NhcGFiaWxpdGllcy5wcm90bxIgd2ZhLm1lYXN1cmVtZW50LmludGVybmFsLmtpbmdkb20icAoYRGF0YVByb3ZpZGVyQ2FwYWJpbGl0aWVzElQKJ2hvbmVzdF9tYWpvcml0eV9zaGFyZV9zaHVmZmxlX3N1cHBvcnRlZBgBIAEoCFIjaG9uZXN0TWFqb3JpdHlTaGFyZVNodWZmbGVTdXBwb3J0ZWRCKwonb3JnLndmYW5ldC5tZWFzdXJlbWVudC5pbnRlcm5hbC5raW5nZG9tUAFiBnByb3RvMwr/AQofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90bxIPZ29vZ2xlLnByb3RvYnVmIjsKCVRpbWVzdGFtcBIYCgdzZWNvbmRzGAEgASgDUgdzZWNvbmRzEhQKBW5hbm9zGAIgASgFUgVuYW5vc0KFAQoTY29tLmdvb2dsZS5wcm90b2J1ZkIOVGltZXN0YW1wUHJvdG9QAVoyZ29vZ2xlLmdvbGFuZy5vcmcvcHJvdG9idWYvdHlwZXMva25vd24vdGltZXN0YW1wcGL4AQGiAgNHUEKqAh5Hb29nbGUuUHJvdG9idWYuV2VsbEtub3duVHlwZXNiBnByb3RvMwq7AgoaZ29vZ2xlL3R5cGUvaW50ZXJ2YWwucHJvdG8SC2dvb2dsZS50eXBlGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvInwKCEludGVydmFsEjkKCnN0YXJ0X3RpbWUYASABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wUglzdGFydFRpbWUSNQoIZW5kX3RpbWUYAiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wUgdlbmRUaW1lQmkKD2NvbS5nb29nbGUudHlwZUINSW50ZXJ2YWxQcm90b1ABWjxnb29nbGUuZ29sYW5nLm9yZy9nZW5wcm90by9nb29nbGVhcGlzL3R5cGUvaW50ZXJ2YWw7aW50ZXJ2YWz4AQGiAgNHVFBiBnByb3RvMwr/BAo8d2ZhL21lYXN1cmVtZW50L2ludGVybmFsL2tpbmdkb20vZGF0YV9wcm92aWRlcl9kZXRhaWxzLnByb3RvEiB3ZmEubWVhc3VyZW1lbnQuaW50ZXJuYWwua2luZ2RvbRoaZ29vZ2xlL3R5cGUvaW50ZXJ2YWwucHJvdG8aQXdmYS9tZWFzdXJlbWVudC9pbnRlcm5hbC9raW5nZG9tL2RhdGFfcHJvdmlkZXJfY2FwYWJpbGl0aWVzLnByb3RvIogDChNEYXRhUHJvdmlkZXJEZXRhaWxzEh8KC2FwaV92ZXJzaW9uGAEgASgJUgphcGlWZXJzaW9uEh0KCnB1YmxpY19rZXkYAiABKAxSCXB1YmxpY0tleRIwChRwdWJsaWNfa2V5X3NpZ25hdHVyZRgDIAEoDFIScHVibGljS2V5U2lnbmF0dXJlEkoKInB1YmxpY19rZXlfc2lnbmF0dXJlX2FsZ29yaXRobV9vaWQYBCABKAlSHnB1YmxpY0tleVNpZ25hdHVyZUFsZ29yaXRobU9pZBJTChpkYXRhX2F2YWlsYWJpbGl0eV9pbnRlcnZhbBgFIAEoCzIVLmdvb2dsZS50eXBlLkludGVydmFsUhhkYXRhQXZhaWxhYmlsaXR5SW50ZXJ2YWwSXgoMY2FwYWJpbGl0aWVzGAYgASgLMjoud2ZhLm1lYXN1cmVtZW50LmludGVybmFsLmtpbmdkb20uRGF0YVByb3ZpZGVyQ2FwYWJpbGl0aWVzUgxjYXBhYmlsaXRpZXNCKwonb3JnLndmYW5ldC5tZWFzdXJlbWVudC5pbnRlcm5hbC5raW5nZG9tUAFiBnByb3RvMwqVAwpQd2ZhL21lYXN1cmVtZW50L2ludGVybmFsL2tpbmdkb20vZHVjaHlfbWVhc3VyZW1lbnRfbG9nX2VudHJ5X3N0YWdlX2F0dGVtcHQucHJvdG8SIHdmYS5tZWFzdXJlbWVudC5pbnRlcm5hbC5raW5nZG9tGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvIsgBCiREdWNoeU1lYXN1cmVtZW50TG9nRW50cnlTdGFnZUF0dGVtcHQSFAoFc3RhZ2UYASABKAVSBXN0YWdlEh0KCnN0YWdlX25hbWUYAiABKAlSCXN0YWdlTmFtZRJEChBzdGFnZV9zdGFydF90aW1lGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcFIOc3RhZ2VTdGFydFRpbWUSJQoOYXR0ZW1wdF9udW1iZXIYBCABKANSDWF0dGVtcHROdW1iZXJCKwonb3JnLndmYW5ldC5tZWFzdXJlbWVudC5pbnRlcm5hbC5raW5nZG9tUAFiBnByb3RvMwq/AwpKd2ZhL21lYXN1cmVtZW50L2ludGVybmFsL2tpbmdkb20vZHVjaHlfbWVhc3VyZW1lbnRfbG9nX2VudHJ5X2RldGFpbHMucHJvdG8SIHdmYS5tZWFzdXJlbWVudC5pbnRlcm5hbC5raW5nZG9tGlB3ZmEvbWVhc3VyZW1lbnQvaW50ZXJuYWwva2luZ2RvbS9kdWNoeV9tZWFzdXJlbWVudF9sb2dfZW50cnlfc3RhZ2VfYXR0ZW1wdC5wcm90byLHAQofRHVjaHlNZWFzdXJlbWVudExvZ0VudHJ5RGV0YWlscxI3ChhkdWNoeV9jaGlsZF9yZWZlcmVuY2VfaWQYASABKAlSFWR1Y2h5Q2hpbGRSZWZlcmVuY2VJZBJrCg1zdGFnZV9hdHRlbXB0GAIgASgLMkYud2ZhLm1lYXN1cmVtZW50LmludGVybmFsLmtpbmdkb20uRHVjaHlNZWFzdXJlbWVudExvZ0VudHJ5U3RhZ2VBdHRlbXB0UgxzdGFnZUF0dGVtcHRCKwonb3JnLndmYW5ldC5tZWFzdXJlbWVudC5pbnRlcm5hbC5raW5nZG9tUAFiBnByb3RvMwrNAQo3d2ZhL21lYXN1cmVtZW50L2ludGVybmFsL2tpbmdkb20vZXhjaGFuZ2VfZGV0YWlscy5wcm90bxIgd2ZhLm1lYXN1cmVtZW50LmludGVybmFsLmtpbmdkb20iOwoPRXhjaGFuZ2VEZXRhaWxzEigKEGF1ZGl0X3RyYWlsX2hhc2gYASABKAxSDmF1ZGl0VHJhaWxIYXNoQisKJ29yZy53ZmFuZXQubWVhc3VyZW1lbnQuaW50ZXJuYWwua2luZ2RvbVABYgZwcm90bzMK52IKIGdvb2dsZS9wcm90b2J1Zi9kZXNjcmlwdG9yLnByb3RvEg9nb29nbGUucHJvdG9idWYiygEKEUZpbGVEZXNjcmlwdG9yU2V0EjgKBGZpbGUYASADKAsyJC5nb29nbGUucHJvdG9idWYuRmlsZURlc2NyaXB0b3JQcm90b1IEZmlsZSp7CIDsyv8BEIHsyv8BGm0SawiA7Mr/ARI0LmJ1Zi5kZXNjcmlwdG9yLnYxLmJ1Zl9maWxlX2Rlc2NyaXB0b3Jfc2V0X2V4dGVuc2lvbhotLmJ1Zi5kZXNjcmlwdG9yLnYxLkZpbGVEZXNjcmlwdG9yU2V0RXh0ZW5zaW9uIpgFChNGaWxlRGVzY3JpcHRvclByb3RvEhIKBG5hbWUYASABKAlSBG5hbWUSGAoHcGFja2FnZRgCIAEoCVIHcGFja2FnZRIeCgpkZXBlbmRlbmN5GAMgAygJUgpkZXBlbmRlbmN5EisKEXB1YmxpY19kZXBlbmRlbmN5GAogAygFUhBwdWJsaWNEZXBlbmRlbmN5EicKD3dlYWtfZGVwZW5kZW5jeRgLIAMoBVIOd2Vha0RlcGVuZGVuY3kSQwoMbWVzc2FnZV90eXBlGAQgAygLMiAuZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90b1ILbWVzc2FnZVR5cGUSQQoJZW51bV90eXBlGAUgAygLMiQuZ29vZ2xlLnByb3RvYnVmLkVudW1EZXNjcmlwdG9yUHJvdG9SCGVudW1UeXBlEkEKB3NlcnZpY2UYBiADKAsyJy5nb29nbGUucHJvdG9idWYuU2VydmljZURlc2NyaXB0b3JQcm90b1IHc2VydmljZRJDCglleHRlbnNpb24YByADKAsyJS5nb29nbGUucHJvdG9idWYuRmllbGREZXNjcmlwdG9yUHJvdG9SCWV4dGVuc2lvbhI2CgdvcHRpb25zGAggASgLMhwuZ29vZ2xlLnByb3RvYnVmLkZpbGVPcHRpb25zUgdvcHRpb25zEkkKEHNvdXJjZV9jb2RlX2luZm8YCSABKAsyHy5nb29nbGUucHJvdG9idWYuU291cmNlQ29kZUluZm9SDnNvdXJjZUNvZGVJbmZvEhYKBnN5bnRheBgMIAEoCVIGc3ludGF4EjIKB2VkaXRpb24YDiABKA4yGC5nb29nbGUucHJvdG9idWYuRWRpdGlvblIHZWRpdGlvbiK5BgoPRGVzY3JpcHRvclByb3RvEhIKBG5hbWUYASABKAlSBG5hbWUSOwoFZmllbGQYAiADKAsyJS5nb29nbGUucHJvdG9idWYuRmllbGREZXNjcmlwdG9yUHJvdG9SBWZpZWxkEkMKCWV4dGVuc2lvbhgGIAMoCzIlLmdvb2dsZS5wcm90b2J1Zi5GaWVsZERlc2NyaXB0b3JQcm90b1IJZXh0ZW5zaW9uEkEKC25lc3RlZF90eXBlGAMgAygLMiAuZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90b1IKbmVzdGVkVHlwZRJBCgllbnVtX3R5cGUYBCADKAsyJC5nb29nbGUucHJvdG9idWYuRW51bURlc2NyaXB0b3JQcm90b1IIZW51bVR5cGUSWAoPZXh0ZW5zaW9uX3JhbmdlGAUgAygLMi8uZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90by5FeHRlbnNpb25SYW5nZVIOZXh0ZW5zaW9uUmFuZ2USRAoKb25lb2ZfZGVjbBgIIAMoCzIlLmdvb2dsZS5wcm90b2J1Zi5PbmVvZkRlc2NyaXB0b3JQcm90b1IJb25lb2ZEZWNsEjkKB29wdGlvbnMYByABKAsyHy5nb29nbGUucHJvdG9idWYuTWVzc2FnZU9wdGlvbnNSB29wdGlvbnMSVQoOcmVzZXJ2ZWRfcmFuZ2UYCSADKAsyLi5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLlJlc2VydmVkUmFuZ2VSDXJlc2VydmVkUmFuZ2USIwoNcmVzZXJ2ZWRfbmFtZRgKIAMoCVIMcmVzZXJ2ZWROYW1lGnoKDkV4dGVuc2lvblJhbmdlEhQKBXN0YXJ0GAEgASgFUgVzdGFydBIQCgNlbmQYAiABKAVSA2VuZBJACgdvcHRpb25zGAMgASgLMiYuZ29vZ2xlLnByb3RvYnVmLkV4dGVuc2lvblJhbmdlT3B0aW9uc1IHb3B0aW9ucxo3Cg1SZXNlcnZlZFJhbmdlEhQKBXN0YXJ0GAEgASgFUgVzdGFydBIQCgNlbmQYAiABKAVSA2VuZCLMBAoVRXh0ZW5zaW9uUmFuZ2VPcHRpb25zElgKFHVuaW50ZXJwcmV0ZWRfb3B0aW9uGOcHIAMoCzIkLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uUhN1bmludGVycHJldGVkT3B0aW9uElkKC2RlY2xhcmF0aW9uGAIgAygLMjIuZ29vZ2xlLnByb3RvYnVmLkV4dGVuc2lvblJhbmdlT3B0aW9ucy5EZWNsYXJhdGlvbkIDiAECUgtkZWNsYXJhdGlvbhI3CghmZWF0dXJlcxgyIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0UghmZWF0dXJlcxJtCgx2ZXJpZmljYXRpb24YAyABKA4yOC5nb29nbGUucHJvdG9idWYuRXh0ZW5zaW9uUmFuZ2VPcHRpb25zLlZlcmlmaWNhdGlvblN0YXRlOgpVTlZFUklGSUVEQgOIAQJSDHZlcmlmaWNhdGlvbhqUAQoLRGVjbGFyYXRpb24SFgoGbnVtYmVyGAEgASgFUgZudW1iZXISGwoJZnVsbF9uYW1lGAIgASgJUghmdWxsTmFtZRISCgR0eXBlGAMgASgJUgR0eXBlEhoKCHJlc2VydmVkGAUgASgIUghyZXNlcnZlZBIaCghyZXBlYXRlZBgGIAEoCFIIcmVwZWF0ZWRKBAgEEAUiNAoRVmVyaWZpY2F0aW9uU3RhdGUSDwoLREVDTEFSQVRJT04QABIOCgpVTlZFUklGSUVEEAEqCQjoBxCAgICAAiLBBgoURmllbGREZXNjcmlwdG9yUHJvdG8SEgoEbmFtZRgBIAEoCVIEbmFtZRIWCgZudW1iZXIYAyABKAVSBm51bWJlchJBCgVsYWJlbBgEIAEoDjIrLmdvb2dsZS5wcm90b2J1Zi5GaWVsZERlc2NyaXB0b3JQcm90by5MYWJlbFIFbGFiZWwSPgoEdHlwZRgFIAEoDjIqLmdvb2dsZS5wcm90b2J1Zi5GaWVsZERlc2NyaXB0b3JQcm90by5UeXBlUgR0eXBlEhsKCXR5cGVfbmFtZRgGIAEoCVIIdHlwZU5hbWUSGgoIZXh0ZW5kZWUYAiABKAlSCGV4dGVuZGVlEiMKDWRlZmF1bHRfdmFsdWUYByABKAlSDGRlZmF1bHRWYWx1ZRIfCgtvbmVvZl9pbmRleBgJIAEoBVIKb25lb2ZJbmRleBIbCglqc29uX25hbWUYCiABKAlSCGpzb25OYW1lEjcKB29wdGlvbnMYCCABKAsyHS5nb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zUgdvcHRpb25zEicKD3Byb3RvM19vcHRpb25hbBgRIAEoCFIOcHJvdG8zT3B0aW9uYWwitgIKBFR5cGUSDwoLVFlQRV9ET1VCTEUQARIOCgpUWVBFX0ZMT0FUEAISDgoKVFlQRV9JTlQ2NBADEg8KC1RZUEVfVUlOVDY0EAQSDgoKVFlQRV9JTlQzMhAFEhAKDFRZUEVfRklYRUQ2NBAGEhAKDFRZUEVfRklYRUQzMhAHEg0KCVRZUEVfQk9PTBAIEg8KC1RZUEVfU1RSSU5HEAkSDgoKVFlQRV9HUk9VUBAKEhAKDFRZUEVfTUVTU0FHRRALEg4KClRZUEVfQllURVMQDBIPCgtUWVBFX1VJTlQzMhANEg0KCVRZUEVfRU5VTRAOEhEKDVRZUEVfU0ZJWEVEMzIQDxIRCg1UWVBFX1NGSVhFRDY0EBASDwoLVFlQRV9TSU5UMzIQERIPCgtUWVBFX1NJTlQ2NBASIkMKBUxhYmVsEhIKDkxBQkVMX09QVElPTkFMEAESEgoOTEFCRUxfUkVQRUFURUQQAxISCg5MQUJFTF9SRVFVSVJFRBACImMKFE9uZW9mRGVzY3JpcHRvclByb3RvEhIKBG5hbWUYASABKAlSBG5hbWUSNwoHb3B0aW9ucxgCIAEoCzIdLmdvb2dsZS5wcm90b2J1Zi5PbmVvZk9wdGlvbnNSB29wdGlvbnMi4wIKE0VudW1EZXNjcmlwdG9yUHJvdG8SEgoEbmFtZRgBIAEoCVIEbmFtZRI/CgV2YWx1ZRgCIAMoCzIpLmdvb2dsZS5wcm90b2J1Zi5FbnVtVmFsdWVEZXNjcmlwdG9yUHJvdG9SBXZhbHVlEjYKB29wdGlvbnMYAyABKAsyHC5nb29nbGUucHJvdG9idWYuRW51bU9wdGlvbnNSB29wdGlvbnMSXQoOcmVzZXJ2ZWRfcmFuZ2UYBCADKAsyNi5nb29nbGUucHJvdG9idWYuRW51bURlc2NyaXB0b3JQcm90by5FbnVtUmVzZXJ2ZWRSYW5nZVINcmVzZXJ2ZWRSYW5nZRIjCg1yZXNlcnZlZF9uYW1lGAUgAygJUgxyZXNlcnZlZE5hbWUaOwoRRW51bVJlc2VydmVkUmFuZ2USFAoFc3RhcnQYASABKAVSBXN0YXJ0EhAKA2VuZBgCIAEoBVIDZW5kIoMBChhFbnVtVmFsdWVEZXNjcmlwdG9yUHJvdG8SEgoEbmFtZRgBIAEoCVIEbmFtZRIWCgZudW1iZXIYAiABKAVSBm51bWJlchI7CgdvcHRpb25zGAMgASgLMiEuZ29vZ2xlLnByb3RvYnVmLkVudW1WYWx1ZU9wdGlvbnNSB29wdGlvbnMipwEKFlNlcnZpY2VEZXNjcmlwdG9yUHJvdG8SEgoEbmFtZRgBIAEoCVIEbmFtZRI+CgZtZXRob2QYAiADKAsyJi5nb29nbGUucHJvdG9idWYuTWV0aG9kRGVzY3JpcHRvclByb3RvUgZtZXRob2QSOQoHb3B0aW9ucxgDIAEoCzIfLmdvb2dsZS5wcm90b2J1Zi5TZXJ2aWNlT3B0aW9uc1IHb3B0aW9ucyKJAgoVTWV0aG9kRGVzY3JpcHRvclByb3RvEhIKBG5hbWUYASABKAlSBG5hbWUSHQoKaW5wdXRfdHlwZRgCIAEoCVIJaW5wdXRUeXBlEh8KC291dHB1dF90eXBlGAMgASgJUgpvdXRwdXRUeXBlEjgKB29wdGlvbnMYBCABKAsyHi5nb29nbGUucHJvdG9idWYuTWV0aG9kT3B0aW9uc1IHb3B0aW9ucxIwChBjbGllbnRfc3RyZWFtaW5nGAUgASgIOgVmYWxzZVIPY2xpZW50U3RyZWFtaW5nEjAKEHNlcnZlcl9zdHJlYW1pbmcYBiABKAg6BWZhbHNlUg9zZXJ2ZXJTdHJlYW1pbmcirQkKC0ZpbGVPcHRpb25zEiEKDGphdmFfcGFja2FnZRgBIAEoCVILamF2YVBhY2thZ2USMAoUamF2YV9vdXRlcl9jbGFzc25hbWUYCCABKAlSEmphdmFPdXRlckNsYXNzbmFtZRI1ChNqYXZhX211bHRpcGxlX2ZpbGVzGAogASgIOgVmYWxzZVIRamF2YU11bHRpcGxlRmlsZXMSRAodamF2YV9nZW5lcmF0ZV9lcXVhbHNfYW5kX2hhc2gYFCABKAhCAhgBUhlqYXZhR2VuZXJhdGVFcXVhbHNBbmRIYXNoEjoKFmphdmFfc3RyaW5nX2NoZWNrX3V0ZjgYGyABKAg6BWZhbHNlUhNqYXZhU3RyaW5nQ2hlY2tVdGY4ElMKDG9wdGltaXplX2ZvchgJIAEoDjIpLmdvb2dsZS5wcm90b2J1Zi5GaWxlT3B0aW9ucy5PcHRpbWl6ZU1vZGU6BVNQRUVEUgtvcHRpbWl6ZUZvchIdCgpnb19wYWNrYWdlGAsgASgJUglnb1BhY2thZ2USNQoTY2NfZ2VuZXJpY19zZXJ2aWNlcxgQIAEoCDoFZmFsc2VSEWNjR2VuZXJpY1NlcnZpY2VzEjkKFWphdmFfZ2VuZXJpY19zZXJ2aWNlcxgRIAEoCDoFZmFsc2VSE2phdmFHZW5lcmljU2VydmljZXMSNQoTcHlfZ2VuZXJpY19zZXJ2aWNlcxgSIAEoCDoFZmFsc2VSEXB5R2VuZXJpY1NlcnZpY2VzEiUKCmRlcHJlY2F0ZWQYFyABKAg6BWZhbHNlUgpkZXByZWNhdGVkEi4KEGNjX2VuYWJsZV9hcmVuYXMYHyABKAg6BHRydWVSDmNjRW5hYmxlQXJlbmFzEioKEW9iamNfY2xhc3NfcHJlZml4GCQgASgJUg9vYmpjQ2xhc3NQcmVmaXgSKQoQY3NoYXJwX25hbWVzcGFjZRglIAEoCVIPY3NoYXJwTmFtZXNwYWNlEiEKDHN3aWZ0X3ByZWZpeBgnIAEoCVILc3dpZnRQcmVmaXgSKAoQcGhwX2NsYXNzX3ByZWZpeBgoIAEoCVIOcGhwQ2xhc3NQcmVmaXgSIwoNcGhwX25hbWVzcGFjZRgpIAEoCVIMcGhwTmFtZXNwYWNlEjQKFnBocF9tZXRhZGF0YV9uYW1lc3BhY2UYLCABKAlSFHBocE1ldGFkYXRhTmFtZXNwYWNlEiEKDHJ1YnlfcGFja2FnZRgtIAEoCVILcnVieVBhY2thZ2USNwoIZmVhdHVyZXMYMiABKAsyGy5nb29nbGUucHJvdG9idWYuRmVhdHVyZVNldFIIZmVhdHVyZXMSWAoUdW5pbnRlcnByZXRlZF9vcHRpb24Y5wcgAygLMiQuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb25SE3VuaW50ZXJwcmV0ZWRPcHRpb24iOgoMT3B0aW1pemVNb2RlEgkKBVNQRUVEEAESDQoJQ09ERV9TSVpFEAISEAoMTElURV9SVU5USU1FEAMqCQjoBxCAgICAAkoECCoQK0oECCYQJ1IUcGhwX2dlbmVyaWNfc2VydmljZXMi9AMKDk1lc3NhZ2VPcHRpb25zEjwKF21lc3NhZ2Vfc2V0X3dpcmVfZm9ybWF0GAEgASgIOgVmYWxzZVIUbWVzc2FnZVNldFdpcmVGb3JtYXQSTAofbm9fc3RhbmRhcmRfZGVzY3JpcHRvcl9hY2Nlc3NvchgCIAEoCDoFZmFsc2VSHG5vU3RhbmRhcmREZXNjcmlwdG9yQWNjZXNzb3ISJQoKZGVwcmVjYXRlZBgDIAEoCDoFZmFsc2VSCmRlcHJlY2F0ZWQSGwoJbWFwX2VudHJ5GAcgASgIUghtYXBFbnRyeRJWCiZkZXByZWNhdGVkX2xlZ2FjeV9qc29uX2ZpZWxkX2NvbmZsaWN0cxgLIAEoCEICGAFSImRlcHJlY2F0ZWRMZWdhY3lKc29uRmllbGRDb25mbGljdHMSNwoIZmVhdHVyZXMYDCABKAsyGy5nb29nbGUucHJvdG9idWYuRmVhdHVyZVNldFIIZmVhdHVyZXMSWAoUdW5pbnRlcnByZXRlZF9vcHRpb24Y5wcgAygLMiQuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb25SE3VuaW50ZXJwcmV0ZWRPcHRpb24qCQjoBxCAgICAAkoECAQQBUoECAUQBkoECAYQB0oECAgQCUoECAkQCiKdDQoMRmllbGRPcHRpb25zEkEKBWN0eXBlGAEgASgOMiMuZ29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0aW9ucy5DVHlwZToGU1RSSU5HUgVjdHlwZRIWCgZwYWNrZWQYAiABKAhSBnBhY2tlZBJHCgZqc3R5cGUYBiABKA4yJC5nb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zLkpTVHlwZToJSlNfTk9STUFMUgZqc3R5cGUSGQoEbGF6eRgFIAEoCDoFZmFsc2VSBGxhenkSLgoPdW52ZXJpZmllZF9sYXp5GA8gASgIOgVmYWxzZVIOdW52ZXJpZmllZExhenkSJQoKZGVwcmVjYXRlZBgDIAEoCDoFZmFsc2VSCmRlcHJlY2F0ZWQSGQoEd2VhaxgKIAEoCDoFZmFsc2VSBHdlYWsSKAoMZGVidWdfcmVkYWN0GBAgASgIOgVmYWxzZVILZGVidWdSZWRhY3QSSwoJcmV0ZW50aW9uGBEgASgOMi0uZ29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0aW9ucy5PcHRpb25SZXRlbnRpb25SCXJldGVudGlvbhJICgd0YXJnZXRzGBMgAygOMi4uZ29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0aW9ucy5PcHRpb25UYXJnZXRUeXBlUgd0YXJnZXRzElcKEGVkaXRpb25fZGVmYXVsdHMYFCADKAsyLC5nb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zLkVkaXRpb25EZWZhdWx0Ug9lZGl0aW9uRGVmYXVsdHMSNwoIZmVhdHVyZXMYFSABKAsyGy5nb29nbGUucHJvdG9idWYuRmVhdHVyZVNldFIIZmVhdHVyZXMSVQoPZmVhdHVyZV9zdXBwb3J0GBYgASgLMiwuZ29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0aW9ucy5GZWF0dXJlU3VwcG9ydFIOZmVhdHVyZVN1cHBvcnQSWAoUdW5pbnRlcnByZXRlZF9vcHRpb24Y5wcgAygLMiQuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb25SE3VuaW50ZXJwcmV0ZWRPcHRpb24aWgoORWRpdGlvbkRlZmF1bHQSMgoHZWRpdGlvbhgDIAEoDjIYLmdvb2dsZS5wcm90b2J1Zi5FZGl0aW9uUgdlZGl0aW9uEhQKBXZhbHVlGAIgASgJUgV2YWx1ZRqWAgoORmVhdHVyZVN1cHBvcnQSRwoSZWRpdGlvbl9pbnRyb2R1Y2VkGAEgASgOMhguZ29vZ2xlLnByb3RvYnVmLkVkaXRpb25SEWVkaXRpb25JbnRyb2R1Y2VkEkcKEmVkaXRpb25fZGVwcmVjYXRlZBgCIAEoDjIYLmdvb2dsZS5wcm90b2J1Zi5FZGl0aW9uUhFlZGl0aW9uRGVwcmVjYXRlZBIvChNkZXByZWNhdGlvbl93YXJuaW5nGAMgASgJUhJkZXByZWNhdGlvbldhcm5pbmcSQQoPZWRpdGlvbl9yZW1vdmVkGAQgASgOMhguZ29vZ2xlLnByb3RvYnVmLkVkaXRpb25SDmVkaXRpb25SZW1vdmVkIi8KBUNUeXBlEgoKBlNUUklORxAAEggKBENPUkQQARIQCgxTVFJJTkdfUElFQ0UQAiI1CgZKU1R5cGUSDQoJSlNfTk9STUFMEAASDQoJSlNfU1RSSU5HEAESDQoJSlNfTlVNQkVSEAIiVQoPT3B0aW9uUmV0ZW50aW9uEhUKEVJFVEVOVElPTl9VTktOT1dOEAASFQoRUkVURU5USU9OX1JVTlRJTUUQARIUChBSRVRFTlRJT05fU09VUkNFEAIijAIKEE9wdGlvblRhcmdldFR5cGUSFwoTVEFSR0VUX1RZUEVfVU5LTk9XThAAEhQKEFRBUkdFVF9UWVBFX0ZJTEUQARIfChtUQVJHRVRfVFlQRV9FWFRFTlNJT05fUkFOR0UQAhIXChNUQVJHRVRfVFlQRV9NRVNTQUdFEAMSFQoRVEFSR0VUX1RZUEVfRklFTEQQBBIVChFUQVJHRVRfVFlQRV9PTkVPRhAFEhQKEFRBUkdFVF9UWVBFX0VOVU0QBhIaChZUQVJHRVRfVFlQRV9FTlVNX0VOVFJZEAcSFwoTVEFSR0VUX1RZUEVfU0VSVklDRRAIEhYKElRBUkdFVF9UWVBFX01FVEhPRBAJKgkI6AcQgICAgAJKBAgEEAVKBAgSEBMirAEKDE9uZW9mT3B0aW9ucxI3CghmZWF0dXJlcxgBIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0UghmZWF0dXJlcxJYChR1bmludGVycHJldGVkX29wdGlvbhjnByADKAsyJC5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvblITdW5pbnRlcnByZXRlZE9wdGlvbioJCOgHEICAgIACItECCgtFbnVtT3B0aW9ucxIfCgthbGxvd19hbGlhcxgCIAEoCFIKYWxsb3dBbGlhcxIlCgpkZXByZWNhdGVkGAMgASgIOgVmYWxzZVIKZGVwcmVjYXRlZBJWCiZkZXByZWNhdGVkX2xlZ2FjeV9qc29uX2ZpZWxkX2NvbmZsaWN0cxgGIAEoCEICGAFSImRlcHJlY2F0ZWRMZWdhY3lKc29uRmllbGRDb25mbGljdHMSNwoIZmVhdHVyZXMYByABKAsyGy5nb29nbGUucHJvdG9idWYuRmVhdHVyZVNldFIIZmVhdHVyZXMSWAoUdW5pbnRlcnByZXRlZF9vcHRpb24Y5wcgAygLMiQuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb25SE3VuaW50ZXJwcmV0ZWRPcHRpb24qCQjoBxCAgICAAkoECAUQBiLYAgoQRW51bVZhbHVlT3B0aW9ucxIlCgpkZXByZWNhdGVkGAEgASgIOgVmYWxzZVIKZGVwcmVjYXRlZBI3CghmZWF0dXJlcxgCIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0UghmZWF0dXJlcxIoCgxkZWJ1Z19yZWRhY3QYAyABKAg6BWZhbHNlUgtkZWJ1Z1JlZGFjdBJVCg9mZWF0dXJlX3N1cHBvcnQYBCABKAsyLC5nb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zLkZlYXR1cmVTdXBwb3J0Ug5mZWF0dXJlU3VwcG9ydBJYChR1bmludGVycHJldGVkX29wdGlvbhjnByADKAsyJC5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvblITdW5pbnRlcnByZXRlZE9wdGlvbioJCOgHEICAgIACItUBCg5TZXJ2aWNlT3B0aW9ucxI3CghmZWF0dXJlcxgiIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0UghmZWF0dXJlcxIlCgpkZXByZWNhdGVkGCEgASgIOgVmYWxzZVIKZGVwcmVjYXRlZBJYChR1bmludGVycHJldGVkX29wdGlvbhjnByADKAsyJC5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvblITdW5pbnRlcnByZXRlZE9wdGlvbioJCOgHEICAgIACIpkDCg1NZXRob2RPcHRpb25zEiUKCmRlcHJlY2F0ZWQYISABKAg6BWZhbHNlUgpkZXByZWNhdGVkEnEKEWlkZW1wb3RlbmN5X2xldmVsGCIgASgOMi8uZ29vZ2xlLnByb3RvYnVmLk1ldGhvZE9wdGlvbnMuSWRlbXBvdGVuY3lMZXZlbDoTSURFTVBPVEVOQ1lfVU5LTk9XTlIQaWRlbXBvdGVuY3lMZXZlbBI3CghmZWF0dXJlcxgjIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0UghmZWF0dXJlcxJYChR1bmludGVycHJldGVkX29wdGlvbhjnByADKAsyJC5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvblITdW5pbnRlcnByZXRlZE9wdGlvbiJQChBJZGVtcG90ZW5jeUxldmVsEhcKE0lERU1QT1RFTkNZX1VOS05PV04QABITCg9OT19TSURFX0VGRkVDVFMQARIOCgpJREVNUE9URU5UEAIqCQjoBxCAgICAAiKaAwoTVW5pbnRlcnByZXRlZE9wdGlvbhJBCgRuYW1lGAIgAygLMi0uZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24uTmFtZVBhcnRSBG5hbWUSKQoQaWRlbnRpZmllcl92YWx1ZRgDIAEoCVIPaWRlbnRpZmllclZhbHVlEiwKEnBvc2l0aXZlX2ludF92YWx1ZRgEIAEoBFIQcG9zaXRpdmVJbnRWYWx1ZRIsChJuZWdhdGl2ZV9pbnRfdmFsdWUYBSABKANSEG5lZ2F0aXZlSW50VmFsdWUSIQoMZG91YmxlX3ZhbHVlGAYgASgBUgtkb3VibGVWYWx1ZRIhCgxzdHJpbmdfdmFsdWUYByABKAxSC3N0cmluZ1ZhbHVlEicKD2FnZ3JlZ2F0ZV92YWx1ZRgIIAEoCVIOYWdncmVnYXRlVmFsdWUaSgoITmFtZVBhcnQSGwoJbmFtZV9wYXJ0GAEgAigJUghuYW1lUGFydBIhCgxpc19leHRlbnNpb24YAiACKAhSC2lzRXh0ZW5zaW9uIq0LCgpGZWF0dXJlU2V0EpEBCg5maWVsZF9wcmVzZW5jZRgBIAEoDjIpLmdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0LkZpZWxkUHJlc2VuY2VCP4gBAZgBBJgBAaIBDRIIRVhQTElDSVQYhAeiAQ0SCElNUExJQ0lUGOcHogENEghFWFBMSUNJVBjoB7IBAwjoB1INZmllbGRQcmVzZW5jZRJsCgllbnVtX3R5cGUYAiABKA4yJC5nb29nbGUucHJvdG9idWYuRmVhdHVyZVNldC5FbnVtVHlwZUIpiAEBmAEGmAEBogELEgZDTE9TRUQYhAeiAQkSBE9QRU4Y5weyAQMI6AdSCGVudW1UeXBlEpgBChdyZXBlYXRlZF9maWVsZF9lbmNvZGluZxgDIAEoDjIxLmdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0LlJlcGVhdGVkRmllbGRFbmNvZGluZ0ItiAEBmAEEmAEBogENEghFWFBBTkRFRBiEB6IBCxIGUEFDS0VEGOcHsgEDCOgHUhVyZXBlYXRlZEZpZWxkRW5jb2RpbmcSfgoPdXRmOF92YWxpZGF0aW9uGAQgASgOMiouZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZXQuVXRmOFZhbGlkYXRpb25CKYgBAZgBBJgBAaIBCRIETk9ORRiEB6IBCxIGVkVSSUZZGOcHsgEDCOgHUg51dGY4VmFsaWRhdGlvbhJ+ChBtZXNzYWdlX2VuY29kaW5nGAUgASgOMisuZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZXQuTWVzc2FnZUVuY29kaW5nQiaIAQGYAQSYAQGiARQSD0xFTkdUSF9QUkVGSVhFRBiEB7IBAwjoB1IPbWVzc2FnZUVuY29kaW5nEoIBCgtqc29uX2Zvcm1hdBgGIAEoDjImLmdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0Lkpzb25Gb3JtYXRCOYgBAZgBA5gBBpgBAaIBFxISTEVHQUNZX0JFU1RfRUZGT1JUGIQHogEKEgVBTExPVxjnB7IBAwjoB1IKanNvbkZvcm1hdCJcCg1GaWVsZFByZXNlbmNlEhoKFkZJRUxEX1BSRVNFTkNFX1VOS05PV04QABIMCghFWFBMSUNJVBABEgwKCElNUExJQ0lUEAISEwoPTEVHQUNZX1JFUVVJUkVEEAMiNwoIRW51bVR5cGUSFQoRRU5VTV9UWVBFX1VOS05PV04QABIICgRPUEVOEAESCgoGQ0xPU0VEEAIiVgoVUmVwZWF0ZWRGaWVsZEVuY29kaW5nEiMKH1JFUEVBVEVEX0ZJRUxEX0VOQ09ESU5HX1VOS05PV04QABIKCgZQQUNLRUQQARIMCghFWFBBTkRFRBACIkkKDlV0ZjhWYWxpZGF0aW9uEhsKF1VURjhfVkFMSURBVElPTl9VTktOT1dOEAASCgoGVkVSSUZZEAISCAoETk9ORRADIgQIARABIlMKD01lc3NhZ2VFbmNvZGluZxIcChhNRVNTQUdFX0VOQ09ESU5HX1VOS05PV04QABITCg9MRU5HVEhfUFJFRklYRUQQARINCglERUxJTUlURUQQAiJICgpKc29uRm9ybWF0EhcKE0pTT05fRk9STUFUX1VOS05PV04QABIJCgVBTExPVxABEhYKEkxFR0FDWV9CRVNUX0VGRk9SVBACKosBCOgHEItOGoIBEh0I6AcSBy5wYi5jcHAaDy5wYi5DcHBGZWF0dXJlcxIfCOkHEggucGIuamF2YRoQLnBiLkphdmFGZWF0dXJlcxIbCOoHEgYucGIuZ28aDi5wYi5Hb0ZlYXR1cmVzEiMIhk4SCi5wYi5wcm90bzEaEi5wYi5Qcm90bzFGZWF0dXJlcyoGCItOEJBOKgYIkE4QkU5KBgjnBxDoByLvAwoSRmVhdHVyZVNldERlZmF1bHRzElgKCGRlZmF1bHRzGAEgAygLMjwuZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZXREZWZhdWx0cy5GZWF0dXJlU2V0RWRpdGlvbkRlZmF1bHRSCGRlZmF1bHRzEkEKD21pbmltdW1fZWRpdGlvbhgEIAEoDjIYLmdvb2dsZS5wcm90b2J1Zi5FZGl0aW9uUg5taW5pbXVtRWRpdGlvbhJBCg9tYXhpbXVtX2VkaXRpb24YBSABKA4yGC5nb29nbGUucHJvdG9idWYuRWRpdGlvblIObWF4aW11bUVkaXRpb24a+AEKGEZlYXR1cmVTZXRFZGl0aW9uRGVmYXVsdBIyCgdlZGl0aW9uGAMgASgOMhguZ29vZ2xlLnByb3RvYnVmLkVkaXRpb25SB2VkaXRpb24STgoUb3ZlcnJpZGFibGVfZmVhdHVyZXMYBCABKAsyGy5nb29nbGUucHJvdG9idWYuRmVhdHVyZVNldFITb3ZlcnJpZGFibGVGZWF0dXJlcxJCCg5maXhlZF9mZWF0dXJlcxgFIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0Ug1maXhlZEZlYXR1cmVzSgQIARACSgQIAhADUghmZWF0dXJlcyKeAwoOU291cmNlQ29kZUluZm8SRAoIbG9jYXRpb24YASADKAsyKC5nb29nbGUucHJvdG9idWYuU291cmNlQ29kZUluZm8uTG9jYXRpb25SCGxvY2F0aW9uGs4BCghMb2NhdGlvbhIWCgRwYXRoGAEgAygFQgIQAVIEcGF0aBIWCgRzcGFuGAIgAygFQgIQAVIEc3BhbhIpChBsZWFkaW5nX2NvbW1lbnRzGAMgASgJUg9sZWFkaW5nQ29tbWVudHMSKwoRdHJhaWxpbmdfY29tbWVudHMYBCABKAlSEHRyYWlsaW5nQ29tbWVudHMSOgoZbGVhZGluZ19kZXRhY2hlZF9jb21tZW50cxgGIAMoCVIXbGVhZGluZ0RldGFjaGVkQ29tbWVudHMqdQiA7Mr/ARCB7Mr/ARpnEmUIgOzK/wESMS5idWYuZGVzY3JpcHRvci52MS5idWZfc291cmNlX2NvZGVfaW5mb19leHRlbnNpb24aKi5idWYuZGVzY3JpcHRvci52MS5Tb3VyY2VDb2RlSW5mb0V4dGVuc2lvbiLQAgoRR2VuZXJhdGVkQ29kZUluZm8STQoKYW5ub3RhdGlvbhgBIAMoCzItLmdvb2dsZS5wcm90b2J1Zi5HZW5lcmF0ZWRDb2RlSW5mby5Bbm5vdGF0aW9uUgphbm5vdGF0aW9uGusBCgpBbm5vdGF0aW9uEhYKBHBhdGgYASADKAVCAhABUgRwYXRoEh8KC3NvdXJjZV9maWxlGAIgASgJUgpzb3VyY2VGaWxlEhQKBWJlZ2luGAMgASgFUgViZWdpbhIQCgNlbmQYBCABKAVSA2VuZBJSCghzZW1hbnRpYxgFIAEoDjI2Lmdvb2dsZS5wcm90b2J1Zi5HZW5lcmF0ZWRDb2RlSW5mby5Bbm5vdGF0aW9uLlNlbWFudGljUghzZW1hbnRpYyIoCghTZW1hbnRpYxIICgROT05FEAASBwoDU0VUEAESCQoFQUxJQVMQAiqnAgoHRWRpdGlvbhITCg9FRElUSU9OX1VOS05PV04QABITCg5FRElUSU9OX0xFR0FDWRCEBxITCg5FRElUSU9OX1BST1RPMhDmBxITCg5FRElUSU9OX1BST1RPMxDnBxIRCgxFRElUSU9OXzIwMjMQ6AcSEQoMRURJVElPTl8yMDI0EOkHEhcKE0VESVRJT05fMV9URVNUX09OTFkQARIXChNFRElUSU9OXzJfVEVTVF9PTkxZEAISHQoXRURJVElPTl85OTk5N19URVNUX09OTFkQnY0GEh0KF0VESVRJT05fOTk5OThfVEVTVF9PTkxZEJ6NBhIdChdFRElUSU9OXzk5OTk5X1RFU1RfT05MWRCfjQYSEwoLRURJVElPTl9NQVgQ/////wdCfgoTY29tLmdvb2dsZS5wcm90b2J1ZkIQRGVzY3JpcHRvclByb3Rvc0gBWi1nb29nbGUuZ29sYW5nLm9yZy9wcm90b2J1Zi90eXBlcy9kZXNjcmlwdG9ycGL4AQGiAgNHUEKqAhpHb29nbGUuUHJvdG9idWYuUmVmbGVjdGlvbgrdAgpOd2ZhL21lYXN1cmVtZW50L2ludGVybmFsL2tpbmdkb20vZXZlbnRfZ3JvdXBfbWV0YWRhdGFfZGVzY3JpcHRvcl9kZXRhaWxzLnByb3RvEiB3ZmEubWVhc3VyZW1lbnQuaW50ZXJuYWwua2luZ2RvbRogZ29vZ2xlL3Byb3RvYnVmL2Rlc2NyaXB0b3IucHJvdG8ikQEKI0V2ZW50R3JvdXBNZXRhZGF0YURlc2NyaXB0b3JEZXRhaWxzEh8KC2FwaV92ZXJzaW9uGAEgASgJUgphcGlWZXJzaW9uEkkKDmRlc2NyaXB0b3Jfc2V0GAIgASgLMiIuZ29vZ2xlLnByb3RvYnVmLkZpbGVEZXNjcmlwdG9yU2V0Ug1kZXNjcmlwdG9yU2V0QisKJ29yZy53ZmFuZXQubWVhc3VyZW1lbnQuaW50ZXJuYWwua2luZ2RvbVABYgZwcm90bzMK0QEKNXdmYS9tZWFzdXJlbWVudC9pbnRlcm5hbC9raW5nZG9tL2V2ZW50X3RlbXBsYXRlLnByb3RvEiB3ZmEubWVhc3VyZW1lbnQuaW50ZXJuYWwua2luZ2RvbSJBCg1FdmVudFRlbXBsYXRlEjAKFGZ1bGx5X3F1YWxpZmllZF90eXBlGAEgASgJUhJmdWxseVF1YWxpZmllZFR5cGVCKwonb3JnLndmYW5ldC5tZWFzdXJlbWVudC5pbnRlcm5hbC5raW5nZG9tUAFiBnByb3RvMwrLCQo6d2ZhL21lYXN1cmVtZW50L2ludGVybmFsL2tpbmdkb20vZXZlbnRfZ3JvdXBfZGV0YWlscy5wcm90bxIgd2ZhLm1lYXN1cmVtZW50LmludGVybmFsLmtpbmdkb20aNXdmYS9tZWFzdXJlbWVudC9pbnRlcm5hbC9raW5nZG9tL2V2ZW50X3RlbXBsYXRlLnByb3RvIv4HChFFdmVudEdyb3VwRGV0YWlscxIfCgthcGlfdmVyc2lvbhgBIAEoCVIKYXBpVmVyc2lvbhJFCh9tZWFzdXJlbWVudF9jb25zdW1lcl9wdWJsaWNfa2V5GAIgASgMUhxtZWFzdXJlbWVudENvbnN1bWVyUHVibGljS2V5ElwKKW1lYXN1cmVtZW50X2NvbnN1bWVyX3B1YmxpY19rZXlfc2lnbmF0dXJlGAMgASgMQgIYAVIlbWVhc3VyZW1lbnRDb25zdW1lclB1YmxpY0tleVNpZ25hdHVyZRJ2CjdtZWFzdXJlbWVudF9jb25zdW1lcl9wdWJsaWNfa2V5X3NpZ25hdHVyZV9hbGdvcml0aG1fb2lkGAcgASgJQgIYAVIxbWVhc3VyZW1lbnRDb25zdW1lclB1YmxpY0tleVNpZ25hdHVyZUFsZ29yaXRobU9pZBImCg92aWRfbW9kZWxfbGluZXMYBCADKAlSDXZpZE1vZGVsTGluZXMSWAoPZXZlbnRfdGVtcGxhdGVzGAUgAygLMi8ud2ZhLm1lYXN1cmVtZW50LmludGVybmFsLmtpbmdkb20uRXZlbnRUZW1wbGF0ZVIOZXZlbnRUZW1wbGF0ZXMSYgoIbWV0YWRhdGEYCSABKAsyRi53ZmEubWVhc3VyZW1lbnQuaW50ZXJuYWwua2luZ2RvbS5FdmVudEdyb3VwRGV0YWlscy5FdmVudEdyb3VwTWV0YWRhdGFSCG1ldGFkYXRhEi0KEmVuY3J5cHRlZF9tZXRhZGF0YRgGIAEoDFIRZW5jcnlwdGVkTWV0YWRhdGEajwMKEkV2ZW50R3JvdXBNZXRhZGF0YRJ0CgthZF9tZXRhZGF0YRgCIAEoCzJRLndmYS5tZWFzdXJlbWVudC5pbnRlcm5hbC5raW5nZG9tLkV2ZW50R3JvdXBEZXRhaWxzLkV2ZW50R3JvdXBNZXRhZGF0YS5BZE1ldGFkYXRhSABSCmFkTWV0YWRhdGEa9gEKCkFkTWV0YWRhdGESjwEKEWNhbXBhaWduX21ldGFkYXRhGAEgASgLMmIud2ZhLm1lYXN1cmVtZW50LmludGVybmFsLmtpbmdkb20uRXZlbnRHcm91cERldGFpbHMuRXZlbnRHcm91cE1ldGFkYXRhLkFkTWV0YWRhdGEuQ2FtcGFpZ25NZXRhZGF0YVIQY2FtcGFpZ25NZXRhZGF0YRpWChBDYW1wYWlnbk1ldGFkYXRhEh0KCmJyYW5kX25hbWUYASABKAlSCWJyYW5kTmFtZRIjCg1jYW1wYWlnbl9uYW1lGAIgASgJUgxjYW1wYWlnbk5hbWVCCgoIbWV0YWRhdGFKBAgIEAlCKwonb3JnLndmYW5ldC5tZWFzdXJlbWVudC5pbnRlcm5hbC5raW5nZG9tUAFiBnByb3RvMwrFBApEd2ZhL21lYXN1cmVtZW50L2ludGVybmFsL2tpbmdkb20vZXhjaGFuZ2Vfc3RlcF9hdHRlbXB0X2RldGFpbHMucHJvdG8SIHdmYS5tZWFzdXJlbWVudC5pbnRlcm5hbC5raW5nZG9tGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvIoQDChpFeGNoYW5nZVN0ZXBBdHRlbXB0RGV0YWlscxJxChFkZWJ1Z19sb2dfZW50cmllcxgEIAMoCzJFLndmYS5tZWFzdXJlbWVudC5pbnRlcm5hbC5raW5nZG9tLkV4Y2hhbmdlU3RlcEF0dGVtcHREZXRhaWxzLkRlYnVnTG9nUg9kZWJ1Z0xvZ0VudHJpZXMSJQoOc2hhcmVkX291dHB1dHMYBSADKAxSDXNoYXJlZE91dHB1dHMSOQoKc3RhcnRfdGltZRgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBSCXN0YXJ0VGltZRI7Cgt1cGRhdGVfdGltZRgHIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBSCnVwZGF0ZVRpbWUaVAoIRGVidWdMb2cSLgoEdGltZRgBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBSBHRpbWUSGAoHbWVzc2FnZRgCIAEoCVIHbWVzc2FnZUIrCidvcmcud2ZhbmV0Lm1lYXN1cmVtZW50LmludGVybmFsLmtpbmdkb21QAWIGcHJvdG8zCvADCjh3ZmEvbWVhc3VyZW1lbnQvaW50ZXJuYWwva2luZ2RvbS9leGNoYW5nZV93b3JrZmxvdy5wcm90bxIgd2ZhLm1lYXN1cmVtZW50LmludGVybmFsLmtpbmdkb20i3AIKEEV4Y2hhbmdlV29ya2Zsb3cSTQoFc3RlcHMYASADKAsyNy53ZmEubWVhc3VyZW1lbnQuaW50ZXJuYWwua2luZ2RvbS5FeGNoYW5nZVdvcmtmbG93LlN0ZXBSBXN0ZXBzGrEBCgRTdGVwEh0KCnN0ZXBfaW5kZXgYASABKAVSCXN0ZXBJbmRleBI6ChlwcmVyZXF1aXNpdGVfc3RlcF9pbmRpY2VzGAMgAygFUhdwcmVyZXF1aXNpdGVTdGVwSW5kaWNlcxJOCgVwYXJ0eRgCIAEoDjI4LndmYS5tZWFzdXJlbWVudC5pbnRlcm5hbC5raW5nZG9tLkV4Y2hhbmdlV29ya2Zsb3cuUGFydHlSBXBhcnR5IkUKBVBhcnR5EhUKEVBBUlRZX1VOU1BFQ0lGSUVEEAASEgoOTU9ERUxfUFJPVklERVIQARIRCg1EQVRBX1BST1ZJREVSEAJCKwonb3JnLndmYW5ldC5tZWFzdXJlbWVudC5pbnRlcm5hbC5raW5nZG9tUAFiBnByb3RvMwrWAwpBd2ZhL21lYXN1cmVtZW50L2ludGVybmFsL2tpbmdkb20vcmVjdXJyaW5nX2V4Y2hhbmdlX2RldGFpbHMucHJvdG8SIHdmYS5tZWFzdXJlbWVudC5pbnRlcm5hbC5raW5nZG9tGjh3ZmEvbWVhc3VyZW1lbnQvaW50ZXJuYWwva2luZ2RvbS9leGNoYW5nZV93b3JrZmxvdy5wcm90byL/AQoYUmVjdXJyaW5nRXhjaGFuZ2VEZXRhaWxzEiMKDWNyb25fc2NoZWR1bGUYASABKAlSDGNyb25TY2hlZHVsZRJfChFleGNoYW5nZV93b3JrZmxvdxgCIAEoCzIyLndmYS5tZWFzdXJlbWVudC5pbnRlcm5hbC5raW5nZG9tLkV4Y2hhbmdlV29ya2Zsb3dSEGV4Y2hhbmdlV29ya2Zsb3cSPAoaZXh0ZXJuYWxfZXhjaGFuZ2Vfd29ya2Zsb3cYAyABKAxSGGV4dGVybmFsRXhjaGFuZ2VXb3JrZmxvdxIfCgthcGlfdmVyc2lvbhgEIAEoCVIKYXBpVmVyc2lvbkIrCidvcmcud2ZhbmV0Lm1lYXN1cmVtZW50LmludGVybmFsLmtpbmdkb21QAWIGcHJvdG8zCtgDCjp3ZmEvbWVhc3VyZW1lbnQvaW50ZXJuYWwva2luZ2RvbS9yZXF1aXNpdGlvbl9yZWZ1c2FsLnByb3RvEiB3ZmEubWVhc3VyZW1lbnQuaW50ZXJuYWwua2luZ2RvbSLCAgoSUmVxdWlzaXRpb25SZWZ1c2FsEmgKDWp1c3RpZmljYXRpb24YASABKA4yQi53ZmEubWVhc3VyZW1lbnQuaW50ZXJuYWwua2luZ2RvbS5SZXF1aXNpdGlvblJlZnVzYWwuSnVzdGlmaWNhdGlvblINanVzdGlmaWNhdGlvbhIYCgdtZXNzYWdlGAIgASgJUgdtZXNzYWdlIqcBCg1KdXN0aWZpY2F0aW9uEh0KGUpVU1RJRklDQVRJT05fVU5TUEVDSUZJRUQQABIaChZDT05TRU5UX1NJR05BTF9JTlZBTElEEAESGQoVU1BFQ0lGSUNBVElPTl9JTlZBTElEEAISHwobSU5TVUZGSUNJRU5UX1BSSVZBQ1lfQlVER0VUEAMSEQoNVU5GVUxGSUxMQUJMRRAEEgwKCERFQ0xJTkVEEAVCKwonb3JnLndmYW5ldC5tZWFzdXJlbWVudC5pbnRlcm5hbC5raW5nZG9tUAFiBnByb3RvMwqFCAo6d2ZhL21lYXN1cmVtZW50L2ludGVybmFsL2tpbmdkb20vcmVxdWlzaXRpb25fZGV0YWlscy5wcm90bxIgd2ZhLm1lYXN1cmVtZW50LmludGVybmFsLmtpbmdkb20aOndmYS9tZWFzdXJlbWVudC9pbnRlcm5hbC9raW5nZG9tL3JlcXVpc2l0aW9uX3JlZnVzYWwucHJvdG8iswYKElJlcXVpc2l0aW9uRGV0YWlscxI3ChhkYXRhX3Byb3ZpZGVyX3B1YmxpY19rZXkYASABKAxSFWRhdGFQcm92aWRlclB1YmxpY0tleRJOCiJkYXRhX3Byb3ZpZGVyX3B1YmxpY19rZXlfc2lnbmF0dXJlGAIgASgMQgIYAVIeZGF0YVByb3ZpZGVyUHVibGljS2V5U2lnbmF0dXJlEmgKMGRhdGFfcHJvdmlkZXJfcHVibGljX2tleV9zaWduYXR1cmVfYWxnb3JpdGhtX29pZBgIIAEoCUICGAFSKmRhdGFQcm92aWRlclB1YmxpY0tleVNpZ25hdHVyZUFsZ29yaXRobU9pZBI8ChplbmNyeXB0ZWRfcmVxdWlzaXRpb25fc3BlYxgDIAEoDFIYZW5jcnlwdGVkUmVxdWlzaXRpb25TcGVjEh0KCm5vbmNlX2hhc2gYBCABKAxSCW5vbmNlSGFzaBIUCgVub25jZRgFIAEoBlIFbm9uY2USTgoHcmVmdXNhbBgGIAEoCzI0LndmYS5tZWFzdXJlbWVudC5pbnRlcm5hbC5raW5nZG9tLlJlcXVpc2l0aW9uUmVmdXNhbFIHcmVmdXNhbBIlCg5lbmNyeXB0ZWRfZGF0YRgHIAEoDFINZW5jcnlwdGVkRGF0YRI7ChplbmNyeXB0ZWRfZGF0YV9hcGlfdmVyc2lvbhgJIAEoCVIXZW5jcnlwdGVkRGF0YUFwaVZlcnNpb24SNgoXZXh0ZXJuYWxfY2VydGlmaWNhdGVfaWQYCiABKAZSFWV4dGVybmFsQ2VydGlmaWNhdGVJZBJ4ChNmdWxmaWxsbWVudF9jb250ZXh0GAsgASgLMkcud2ZhLm1lYXN1cmVtZW50LmludGVybmFsLmtpbmdkb20uUmVxdWlzaXRpb25EZXRhaWxzLkZ1bGZpbGxtZW50Q29udGV4dFISZnVsZmlsbG1lbnRDb250ZXh0GlEKEkZ1bGZpbGxtZW50Q29udGV4dBIfCgtidWlsZF9sYWJlbBgBIAEoCVIKYnVpbGRMYWJlbBIaCgh3YXJuaW5ncxgCIAMoCVIId2FybmluZ3NCKwonb3JnLndmYW5ldC5tZWFzdXJlbWVudC5pbnRlcm5hbC5raW5nZG9tUAFiBnByb3RvMwr5AgpDd2ZhL21lYXN1cmVtZW50L2ludGVybmFsL2tpbmdkb20vbWVhc3VyZW1lbnRfY29uc3VtZXJfZGV0YWlscy5wcm90bxIgd2ZhLm1lYXN1cmVtZW50LmludGVybmFsLmtpbmdkb20i2gEKGk1lYXN1cmVtZW50Q29uc3VtZXJEZXRhaWxzEh8KC2FwaV92ZXJzaW9uGAEgASgJUgphcGlWZXJzaW9uEh0KCnB1YmxpY19rZXkYAiABKAxSCXB1YmxpY0tleRIwChRwdWJsaWNfa2V5X3NpZ25hdHVyZRgDIAEoDFIScHVibGljS2V5U2lnbmF0dXJlEkoKInB1YmxpY19rZXlfc2lnbmF0dXJlX2FsZ29yaXRobV9vaWQYBCABKAlSHnB1YmxpY0tleVNpZ25hdHVyZUFsZ29yaXRobU9pZEIrCidvcmcud2ZhbmV0Lm1lYXN1cmVtZW50LmludGVybmFsLmtpbmdkb21QAWIGcHJvdG8zCqUDCkJ3ZmEvbWVhc3VyZW1lbnQvaW50ZXJuYWwva2luZ2RvbS9tZWFzdXJlbWVudF9sb2dfZW50cnlfZXJyb3IucHJvdG8SIHdmYS5tZWFzdXJlbWVudC5pbnRlcm5hbC5raW5nZG9tGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvIuYBChhNZWFzdXJlbWVudExvZ0VudHJ5RXJyb3ISUwoEdHlwZRgBIAEoDjI/LndmYS5tZWFzdXJlbWVudC5pbnRlcm5hbC5raW5nZG9tLk1lYXN1cmVtZW50TG9nRW50cnlFcnJvci5UeXBlUgR0eXBlEjkKCmVycm9yX3RpbWUYAiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wUgllcnJvclRpbWUiOgoEVHlwZRIUChBUWVBFX1VOU1BFQ0lGSUVEEAASDQoJVFJBTlNJRU5UEAESDQoJUEVSTUFORU5UEAJCKwonb3JnLndmYW5ldC5tZWFzdXJlbWVudC5pbnRlcm5hbC5raW5nZG9tUAFiBnByb3RvMwrzAgpEd2ZhL21lYXN1cmVtZW50L2ludGVybmFsL2tpbmdkb20vbWVhc3VyZW1lbnRfbG9nX2VudHJ5X2RldGFpbHMucHJvdG8SIHdmYS5tZWFzdXJlbWVudC5pbnRlcm5hbC5raW5nZG9tGkJ3ZmEvbWVhc3VyZW1lbnQvaW50ZXJuYWwva2luZ2RvbS9tZWFzdXJlbWVudF9sb2dfZW50cnlfZXJyb3IucHJvdG8ijwEKGk1lYXN1cmVtZW50TG9nRW50cnlEZXRhaWxzEh8KC2xvZ19tZXNzYWdlGAEgASgJUgpsb2dNZXNzYWdlElAKBWVycm9yGAIgASgLMjoud2ZhLm1lYXN1cmVtZW50LmludGVybmFsLmtpbmdkb20uTWVhc3VyZW1lbnRMb2dFbnRyeUVycm9yUgVlcnJvckIrCidvcmcud2ZhbmV0Lm1lYXN1cmVtZW50LmludGVybmFsLmtpbmdkb21QAWIGcHJvdG8zCuEBCjt3ZmEvbWVhc3VyZW1lbnQvaW50ZXJuYWwva2luZ2RvbS9kaWZmZXJlbnRpYWxfcHJpdmFjeS5wcm90bxIgd2ZhLm1lYXN1cmVtZW50LmludGVybmFsLmtpbmdkb20iSwoZRGlmZmVyZW50aWFsUHJpdmFjeVBhcmFtcxIYCgdlcHNpbG9uGAEgASgBUgdlcHNpbG9uEhQKBWRlbHRhGAIgASgBUgVkZWx0YUIrCidvcmcud2ZhbmV0Lm1lYXN1cmVtZW50LmludGVybmFsLmtpbmdkb21QAWIGcHJvdG8zCvAGCjx3ZmEvbWVhc3VyZW1lbnQvaW50ZXJuYWwva2luZ2RvbS9kdWNoeV9wcm90b2NvbF9jb25maWcucHJvdG8SIHdmYS5tZWFzdXJlbWVudC5pbnRlcm5hbC5raW5nZG9tGjt3ZmEvbWVhc3VyZW1lbnQvaW50ZXJuYWwva2luZ2RvbS9kaWZmZXJlbnRpYWxfcHJpdmFjeS5wcm90byKbBQoTRHVjaHlQcm90b2NvbENvbmZpZxJzChFsaXF1aWRfbGVnaW9uc192MhgBIAEoCzJFLndmYS5tZWFzdXJlbWVudC5pbnRlcm5hbC5raW5nZG9tLkR1Y2h5UHJvdG9jb2xDb25maWcuTGlxdWlkTGVnaW9uc1YySABSD2xpcXVpZExlZ2lvbnNWMhKHAQoccmVhY2hfb25seV9saXF1aWRfbGVnaW9uc192MhgCIAEoCzJFLndmYS5tZWFzdXJlbWVudC5pbnRlcm5hbC5raW5nZG9tLkR1Y2h5UHJvdG9jb2xDb25maWcuTGlxdWlkTGVnaW9uc1YySABSGHJlYWNoT25seUxpcXVpZExlZ2lvbnNWMhr4AgoPTGlxdWlkTGVnaW9uc1YyEmsKCW1wY19ub2lzZRgBIAEoCzJOLndmYS5tZWFzdXJlbWVudC5pbnRlcm5hbC5raW5nZG9tLkR1Y2h5UHJvdG9jb2xDb25maWcuTGlxdWlkTGVnaW9uc1YyLk1wY05vaXNlUghtcGNOb2lzZRr3AQoITXBjTm9pc2UScwoXYmxpbmRlZF9oaXN0b2dyYW1fbm9pc2UYASABKAsyOy53ZmEubWVhc3VyZW1lbnQuaW50ZXJuYWwua2luZ2RvbS5EaWZmZXJlbnRpYWxQcml2YWN5UGFyYW1zUhVibGluZGVkSGlzdG9ncmFtTm9pc2USdgoZbm9pc2VfZm9yX3B1Ymxpc2hlcl9ub2lzZRgCIAEoCzI7LndmYS5tZWFzdXJlbWVudC5pbnRlcm5hbC5raW5nZG9tLkRpZmZlcmVudGlhbFByaXZhY3lQYXJhbXNSFm5vaXNlRm9yUHVibGlzaGVyTm9pc2VCCgoIcHJvdG9jb2xCKwonb3JnLndmYW5ldC5tZWFzdXJlbWVudC5pbnRlcm5hbC5raW5nZG9tUAFiBnByb3RvMwqRAwo6d2ZhL21lYXN1cmVtZW50L2ludGVybmFsL2tpbmdkb20vbWVhc3VyZW1lbnRfZmFpbHVyZS5wcm90bxIgd2ZhLm1lYXN1cmVtZW50LmludGVybmFsLmtpbmdkb20i+wEKEk1lYXN1cmVtZW50RmFpbHVyZRJTCgZyZWFzb24YASABKA4yOy53ZmEubWVhc3VyZW1lbnQuaW50ZXJuYWwua2luZ2RvbS5NZWFzdXJlbWVudEZhaWx1cmUuUmVhc29uUgZyZWFzb24SGAoHbWVzc2FnZRgCIAEoCVIHbWVzc2FnZSJ2CgZSZWFzb24SFgoSUkVBU09OX1VOU1BFQ0lGSUVEEAASFwoTQ0VSVElGSUNBVEVfUkVWT0tFRBABEhcKE1JFUVVJU0lUSU9OX1JFRlVTRUQQAhIiCh5DT01QVVRBVElPTl9QQVJUSUNJUEFOVF9GQUlMRUQQA0IrCidvcmcud2ZhbmV0Lm1lYXN1cmVtZW50LmludGVybmFsLmtpbmdkb21QAWIGcHJvdG8zCukXCjZ3ZmEvbWVhc3VyZW1lbnQvaW50ZXJuYWwva2luZ2RvbS9wcm90b2NvbF9jb25maWcucHJvdG8SIHdmYS5tZWFzdXJlbWVudC5pbnRlcm5hbC5raW5nZG9tGjt3ZmEvbWVhc3VyZW1lbnQvaW50ZXJuYWwva2luZ2RvbS9kaWZmZXJlbnRpYWxfcHJpdmFjeS5wcm90byKKFQoOUHJvdG9jb2xDb25maWcSPQobZXh0ZXJuYWxfcHJvdG9jb2xfY29uZmlnX2lkGAEgASgJUhhleHRlcm5hbFByb3RvY29sQ29uZmlnSWQSbgoRbGlxdWlkX2xlZ2lvbnNfdjIYAyABKAsyQC53ZmEubWVhc3VyZW1lbnQuaW50ZXJuYWwua2luZ2RvbS5Qcm90b2NvbENvbmZpZy5MaXF1aWRMZWdpb25zVjJIAFIPbGlxdWlkTGVnaW9uc1YyEoIBChxyZWFjaF9vbmx5X2xpcXVpZF9sZWdpb25zX3YyGAQgASgLMkAud2ZhLm1lYXN1cmVtZW50LmludGVybmFsLmtpbmdkb20uUHJvdG9jb2xDb25maWcuTGlxdWlkTGVnaW9uc1YySABSGHJlYWNoT25seUxpcXVpZExlZ2lvbnNWMhJRCgZkaXJlY3QYBSABKAsyNy53ZmEubWVhc3VyZW1lbnQuaW50ZXJuYWwua2luZ2RvbS5Qcm90b2NvbENvbmZpZy5EaXJlY3RIAFIGZGlyZWN0EpABCh1ob25lc3RfbWFqb3JpdHlfc2hhcmVfc2h1ZmZsZRgGIAEoCzJLLndmYS5tZWFzdXJlbWVudC5pbnRlcm5hbC5raW5nZG9tLlByb3RvY29sQ29uZmlnLkhvbmVzdE1ham9yaXR5U2hhcmVTaHVmZmxlSABSGmhvbmVzdE1ham9yaXR5U2hhcmVTaHVmZmxlGocKCgZEaXJlY3QSagoQbm9pc2VfbWVjaGFuaXNtcxgBIAMoDjI/LndmYS5tZWFzdXJlbWVudC5pbnRlcm5hbC5raW5nZG9tLlByb3RvY29sQ29uZmlnLk5vaXNlTWVjaGFuaXNtUg9ub2lzZU1lY2hhbmlzbXMSiwEKGWN1c3RvbV9kaXJlY3RfbWV0aG9kb2xvZ3kYAiABKAsyTy53ZmEubWVhc3VyZW1lbnQuaW50ZXJuYWwua2luZ2RvbS5Qcm90b2NvbENvbmZpZy5EaXJlY3QuQ3VzdG9tRGlyZWN0TWV0aG9kb2xvZ3lSF2N1c3RvbURpcmVjdE1ldGhvZG9sb2d5EpQBChxkZXRlcm1pbmlzdGljX2NvdW50X2Rpc3RpbmN0GAMgASgLMlIud2ZhLm1lYXN1cmVtZW50LmludGVybmFsLmtpbmdkb20uUHJvdG9jb2xDb25maWcuRGlyZWN0LkRldGVybWluaXN0aWNDb3VudERpc3RpbmN0UhpkZXRlcm1pbmlzdGljQ291bnREaXN0aW5jdBKQAQoaZGV0ZXJtaW5pc3RpY19kaXN0cmlidXRpb24YBCABKAsyUS53ZmEubWVhc3VyZW1lbnQuaW50ZXJuYWwua2luZ2RvbS5Qcm90b2NvbENvbmZpZy5EaXJlY3QuRGV0ZXJtaW5pc3RpY0Rpc3RyaWJ1dGlvblIZZGV0ZXJtaW5pc3RpY0Rpc3RyaWJ1dGlvbhJ7ChNkZXRlcm1pbmlzdGljX2NvdW50GAUgASgLMkoud2ZhLm1lYXN1cmVtZW50LmludGVybmFsLmtpbmdkb20uUHJvdG9jb2xDb25maWcuRGlyZWN0LkRldGVybWluaXN0aWNDb3VudFISZGV0ZXJtaW5pc3RpY0NvdW50EnUKEWRldGVybWluaXN0aWNfc3VtGAYgASgLMkgud2ZhLm1lYXN1cmVtZW50LmludGVybmFsLmtpbmdkb20uUHJvdG9jb2xDb25maWcuRGlyZWN0LkRldGVybWluaXN0aWNTdW1SEGRldGVybWluaXN0aWNTdW0SlQEKHWxpcXVpZF9sZWdpb25zX2NvdW50X2Rpc3RpbmN0GAcgASgLMlIud2ZhLm1lYXN1cmVtZW50LmludGVybmFsLmtpbmdkb20uUHJvdG9jb2xDb25maWcuRGlyZWN0LkxpcXVpZExlZ2lvbnNDb3VudERpc3RpbmN0UhpsaXF1aWRMZWdpb25zQ291bnREaXN0aW5jdBKRAQobbGlxdWlkX2xlZ2lvbnNfZGlzdHJpYnV0aW9uGAggASgLMlEud2ZhLm1lYXN1cmVtZW50LmludGVybmFsLmtpbmdkb20uUHJvdG9jb2xDb25maWcuRGlyZWN0LkxpcXVpZExlZ2lvbnNEaXN0cmlidXRpb25SGWxpcXVpZExlZ2lvbnNEaXN0cmlidXRpb24aGQoXQ3VzdG9tRGlyZWN0TWV0aG9kb2xvZ3kaHAoaRGV0ZXJtaW5pc3RpY0NvdW50RGlzdGluY3QaGwoZRGV0ZXJtaW5pc3RpY0Rpc3RyaWJ1dGlvbhoUChJEZXRlcm1pbmlzdGljQ291bnQaEgoQRGV0ZXJtaW5pc3RpY1N1bRobChlMaXF1aWRMZWdpb25zRGlzdHJpYnV0aW9uGhwKGkxpcXVpZExlZ2lvbnNDb3VudERpc3RpbmN0GqcDCg9MaXF1aWRMZWdpb25zVjISYAoNc2tldGNoX3BhcmFtcxgBIAEoCzI7LndmYS5tZWFzdXJlbWVudC5pbnRlcm5hbC5raW5nZG9tLkxpcXVpZExlZ2lvbnNTa2V0Y2hQYXJhbXNSDHNrZXRjaFBhcmFtcxJrChNkYXRhX3Byb3ZpZGVyX25vaXNlGAIgASgLMjsud2ZhLm1lYXN1cmVtZW50LmludGVybmFsLmtpbmdkb20uRGlmZmVyZW50aWFsUHJpdmFjeVBhcmFtc1IRZGF0YVByb3ZpZGVyTm9pc2USKgoRZWxsaXB0aWNfY3VydmVfaWQYAyABKAVSD2VsbGlwdGljQ3VydmVJZBIvChFtYXhpbXVtX2ZyZXF1ZW5jeRgEIAEoBUICGAFSEG1heGltdW1GcmVxdWVuY3kSaAoPbm9pc2VfbWVjaGFuaXNtGAUgASgOMj8ud2ZhLm1lYXN1cmVtZW50LmludGVybmFsLmtpbmdkb20uUHJvdG9jb2xDb25maWcuTm9pc2VNZWNoYW5pc21SDm5vaXNlTWVjaGFuaXNtGoICChpIb25lc3RNYWpvcml0eVNoYXJlU2h1ZmZsZRJoCg9ub2lzZV9tZWNoYW5pc20YAiABKA4yPy53ZmEubWVhc3VyZW1lbnQuaW50ZXJuYWwua2luZ2RvbS5Qcm90b2NvbENvbmZpZy5Ob2lzZU1lY2hhbmlzbVIObm9pc2VNZWNoYW5pc20SRgogcmVhY2hfYW5kX2ZyZXF1ZW5jeV9yaW5nX21vZHVsdXMYAyABKAVSHHJlYWNoQW5kRnJlcXVlbmN5UmluZ01vZHVsdXMSLAoScmVhY2hfcmluZ19tb2R1bHVzGAQgASgFUhByZWFjaFJpbmdNb2R1bHVzSgQIARACIpIBCg5Ob2lzZU1lY2hhbmlzbRIfChtOT0lTRV9NRUNIQU5JU01fVU5TUEVDSUZJRUQQABIICgROT05FEAMSDQoJR0VPTUVUUklDEAESFQoRRElTQ1JFVEVfR0FVU1NJQU4QAhIWChJDT05USU5VT1VTX0xBUExBQ0UQBBIXChNDT05USU5VT1VTX0dBVVNTSUFOEAVCCgoIcHJvdG9jb2xKBAgCEAMijQEKGUxpcXVpZExlZ2lvbnNTa2V0Y2hQYXJhbXMSHQoKZGVjYXlfcmF0ZRgBIAEoAVIJZGVjYXlSYXRlEhkKCG1heF9zaXplGAIgASgDUgdtYXhTaXplEjYKF3NhbXBsaW5nX2luZGljYXRvcl9zaXplGAMgASgDUhVzYW1wbGluZ0luZGljYXRvclNpemVCKwonb3JnLndmYW5ldC5tZWFzdXJlbWVudC5pbnRlcm5hbC5raW5nZG9tUAFiBnByb3RvMwrUBgo6d2ZhL21lYXN1cmVtZW50L2ludGVybmFsL2tpbmdkb20vbWVhc3VyZW1lbnRfZGV0YWlscy5wcm90bxIgd2ZhLm1lYXN1cmVtZW50LmludGVybmFsLmtpbmdkb20aPHdmYS9tZWFzdXJlbWVudC9pbnRlcm5hbC9raW5nZG9tL2R1Y2h5X3Byb3RvY29sX2NvbmZpZy5wcm90bxo6d2ZhL21lYXN1cmVtZW50L2ludGVybmFsL2tpbmdkb20vbWVhc3VyZW1lbnRfZmFpbHVyZS5wcm90bxo2d2ZhL21lYXN1cmVtZW50L2ludGVybmFsL2tpbmdkb20vcHJvdG9jb2xfY29uZmlnLnByb3RvIowEChJNZWFzdXJlbWVudERldGFpbHMSHwoLYXBpX3ZlcnNpb24YASABKAlSCmFwaVZlcnNpb24SKQoQbWVhc3VyZW1lbnRfc3BlYxgCIAEoDFIPbWVhc3VyZW1lbnRTcGVjEjwKGm1lYXN1cmVtZW50X3NwZWNfc2lnbmF0dXJlGAMgASgMUhhtZWFzdXJlbWVudFNwZWNTaWduYXR1cmUSVgoobWVhc3VyZW1lbnRfc3BlY19zaWduYXR1cmVfYWxnb3JpdGhtX29pZBgJIAEoCVIkbWVhc3VyZW1lbnRTcGVjU2lnbmF0dXJlQWxnb3JpdGhtT2lkElkKD3Byb3RvY29sX2NvbmZpZxgGIAEoCzIwLndmYS5tZWFzdXJlbWVudC5pbnRlcm5hbC5raW5nZG9tLlByb3RvY29sQ29uZmlnUg5wcm90b2NvbENvbmZpZxJpChVkdWNoeV9wcm90b2NvbF9jb25maWcYByABKAsyNS53ZmEubWVhc3VyZW1lbnQuaW50ZXJuYWwua2luZ2RvbS5EdWNoeVByb3RvY29sQ29uZmlnUhNkdWNoeVByb3RvY29sQ29uZmlnEk4KB2ZhaWx1cmUYCCABKAsyNC53ZmEubWVhc3VyZW1lbnQuaW50ZXJuYWwua2luZ2RvbS5NZWFzdXJlbWVudEZhaWx1cmVSB2ZhaWx1cmVCKwonb3JnLndmYW5ldC5tZWFzdXJlbWVudC5pbnRlcm5hbC5raW5nZG9tUAFiBnByb3RvMw==';

START BATCH DDL;

ALTER PROTO BUNDLE INSERT (
  `wfa.measurement.internal.kingdom.EventGroupDetails.EventGroupMetadata`,
  `wfa.measurement.internal.kingdom.EventGroupDetails.EventGroupMetadata.AdMetadata`,
  `wfa.measurement.internal.kingdom.EventGroupDetails.EventGroupMetadata.AdMetadata.CampaignMetadata`,
  `wfa.measurement.internal.kingdom.RequisitionDetails.FulfillmentContext`,
);

ALTER PROTO BUNDLE UPDATE (
  `wfa.measurement.internal.kingdom.EventGroupDetails`,
  `wfa.measurement.internal.kingdom.RequisitionDetails`,
);

ALTER TABLE EventGroups
ADD COLUMN BrandName_Tokens TOKENLIST AS (
  TOKENIZE_FULLTEXT(EventGroupDetails.metadata.ad_metadata.campaign_metadata.brand_name)
) HIDDEN;

ALTER TABLE EventGroups
ADD COLUMN CampaignName_Tokens TOKENLIST AS (
  TOKENIZE_FULLTEXT(EventGroupDetails.metadata.ad_metadata.campaign_metadata.campaign_name)
) HIDDEN;

ALTER TABLE EventGroups
ADD COLUMN Metadata_Tokens TOKENLIST AS (
  TOKENLIST_CONCAT([BrandName_Tokens, CampaignName_Tokens])
) HIDDEN;

CREATE SEARCH INDEX EventGroupsByMetadata ON EventGroups(Metadata_Tokens);

RUN BATCH;