-- liquibase formatted sql

-- Copyright 2025 The Cross-Media Measurement Authors
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- changeset sanjayvas:31 dbms:cloudspanner
-- comment: Add PopulationDetails and CreateRequestId columns to Populations table.

-- Set protobuf FileDescriptorSet as a base64 string. This gets applied to the next DDL batch.
SET PROTO_DESCRIPTORS = '';

START BATCH DDL;

ALTER PROTO BUNDLE INSERT (
  `wfa.measurement.internal.kingdom.PopulationDetails`,
  `wfa.measurement.internal.kingdom.PopulationDetails.PopulationSpec`,
);

ALTER TABLE Populations
DROP COLUMN EventTemplateType;

ALTER TABLE Populations
ALTER COLUMN ModelBlobUri STRING(MAX);

ALTER TABLE Populations
ADD COLUMN CreateRequestId STRING(36);

ALTER TABLE Populations
ADD COLUMN PopulationDetails `wfa.measurement.internal.kingdom.PopulationDetails`;

CREATE UNIQUE NULL_FILTERED INDEX PopulationsByCreateRequestId
ON Populations(DataProviderId, CreateRequestId);

RUN BATCH;