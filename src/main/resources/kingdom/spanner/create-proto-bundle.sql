-- liquibase formatted sql

-- Copyright 2024 The Cross-Media Measurement Authors
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- changeset sanjayvas:19 dbms:cloudspanner
-- comment: Create the initial proto bundle.

-- Set protobuf FileDescriptorSet as a base64 string. This gets applied to the next DDL batch.
SET PROTO_DESCRIPTORS = '';

START BATCH DDL;

-- Create the initial proto bundle with all types defined in the FileDescriptorSet.
CREATE PROTO BUNDLE (
  `wfa.measurement.internal.kingdom.CertificateDetails`,
  `wfa.measurement.internal.kingdom.LiquidLegionsV2Params`,
  `wfa.measurement.internal.kingdom.HonestMajorityShareShuffleParams`,
  `wfa.measurement.internal.kingdom.ComputationParticipantDetails`,
  `wfa.measurement.internal.kingdom.DataProviderCapabilities`,
  `google.protobuf.Timestamp`,
  `google.type.Interval`,
  `wfa.measurement.internal.kingdom.DataProviderDetails`,
  `wfa.measurement.internal.kingdom.DuchyMeasurementLogEntryStageAttempt`,
  `wfa.measurement.internal.kingdom.DuchyMeasurementLogEntryDetails`,
  `wfa.measurement.internal.kingdom.ExchangeDetails`,
  `google.protobuf.Edition`,
  `google.protobuf.FileDescriptorSet`,
  `google.protobuf.FileDescriptorProto`,
  `google.protobuf.DescriptorProto`,
  `google.protobuf.ExtensionRangeOptions`,
  `google.protobuf.FieldDescriptorProto`,
  `google.protobuf.OneofDescriptorProto`,
  `google.protobuf.EnumDescriptorProto`,
  `google.protobuf.EnumValueDescriptorProto`,
  `google.protobuf.ServiceDescriptorProto`,
  `google.protobuf.MethodDescriptorProto`,
  `google.protobuf.FileOptions`,
  `google.protobuf.MessageOptions`,
  `google.protobuf.FieldOptions`,
  `google.protobuf.OneofOptions`,
  `google.protobuf.EnumOptions`,
  `google.protobuf.EnumValueOptions`,
  `google.protobuf.ServiceOptions`,
  `google.protobuf.MethodOptions`,
  `google.protobuf.UninterpretedOption`,
  `google.protobuf.FeatureSet`,
  `google.protobuf.FeatureSetDefaults`,
  `google.protobuf.SourceCodeInfo`,
  `google.protobuf.GeneratedCodeInfo`,
  `google.protobuf.DescriptorProto.ExtensionRange`,
  `google.protobuf.DescriptorProto.ReservedRange`,
  `google.protobuf.ExtensionRangeOptions.VerificationState`,
  `google.protobuf.ExtensionRangeOptions.Declaration`,
  `google.protobuf.FieldDescriptorProto.Type`,
  `google.protobuf.FieldDescriptorProto.Label`,
  `google.protobuf.EnumDescriptorProto.EnumReservedRange`,
  `google.protobuf.FileOptions.OptimizeMode`,
  `google.protobuf.FieldOptions.CType`,
  `google.protobuf.FieldOptions.JSType`,
  `google.protobuf.FieldOptions.OptionRetention`,
  `google.protobuf.FieldOptions.OptionTargetType`,
  `google.protobuf.FieldOptions.EditionDefault`,
  `google.protobuf.FieldOptions.FeatureSupport`,
  `google.protobuf.MethodOptions.IdempotencyLevel`,
  `google.protobuf.UninterpretedOption.NamePart`,
  `google.protobuf.FeatureSet.FieldPresence`,
  `google.protobuf.FeatureSet.EnumType`,
  `google.protobuf.FeatureSet.RepeatedFieldEncoding`,
  `google.protobuf.FeatureSet.Utf8Validation`,
  `google.protobuf.FeatureSet.MessageEncoding`,
  `google.protobuf.FeatureSet.JsonFormat`,
  `google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault`,
  `google.protobuf.SourceCodeInfo.Location`,
  `google.protobuf.GeneratedCodeInfo.Annotation`,
  `google.protobuf.GeneratedCodeInfo.Annotation.Semantic`,
  `wfa.measurement.internal.kingdom.EventGroupMetadataDescriptorDetails`,
  `wfa.measurement.internal.kingdom.EventTemplate`,
  `wfa.measurement.internal.kingdom.EventGroupDetails`,
  `wfa.measurement.internal.kingdom.ExchangeStepAttemptDetails`,
  `wfa.measurement.internal.kingdom.ExchangeStepAttemptDetails.DebugLog`,
  `wfa.measurement.internal.kingdom.ExchangeWorkflow`,
  `wfa.measurement.internal.kingdom.ExchangeWorkflow.Party`,
  `wfa.measurement.internal.kingdom.ExchangeWorkflow.Step`,
  `wfa.measurement.internal.kingdom.RecurringExchangeDetails`,
  `wfa.measurement.internal.kingdom.RequisitionRefusal`,
  `wfa.measurement.internal.kingdom.RequisitionRefusal.Justification`,
  `wfa.measurement.internal.kingdom.RequisitionDetails`,
  `wfa.measurement.internal.kingdom.MeasurementConsumerDetails`,
  `wfa.measurement.internal.kingdom.MeasurementLogEntryError`,
  `wfa.measurement.internal.kingdom.MeasurementLogEntryError.Type`,
  `wfa.measurement.internal.kingdom.MeasurementLogEntryDetails`,
  `wfa.measurement.internal.kingdom.DifferentialPrivacyParams`,
  `wfa.measurement.internal.kingdom.DuchyProtocolConfig`,
  `wfa.measurement.internal.kingdom.DuchyProtocolConfig.LiquidLegionsV2`,
  `wfa.measurement.internal.kingdom.DuchyProtocolConfig.LiquidLegionsV2.MpcNoise`,
  `wfa.measurement.internal.kingdom.MeasurementFailure`,
  `wfa.measurement.internal.kingdom.MeasurementFailure.Reason`,
  `wfa.measurement.internal.kingdom.ProtocolConfig`,
  `wfa.measurement.internal.kingdom.LiquidLegionsSketchParams`,
  `wfa.measurement.internal.kingdom.ProtocolConfig.NoiseMechanism`,
  `wfa.measurement.internal.kingdom.ProtocolConfig.Direct`,
  `wfa.measurement.internal.kingdom.ProtocolConfig.Direct.CustomDirectMethodology`,
  `wfa.measurement.internal.kingdom.ProtocolConfig.Direct.DeterministicCountDistinct`,
  `wfa.measurement.internal.kingdom.ProtocolConfig.Direct.DeterministicDistribution`,
  `wfa.measurement.internal.kingdom.ProtocolConfig.Direct.DeterministicCount`,
  `wfa.measurement.internal.kingdom.ProtocolConfig.Direct.DeterministicSum`,
  `wfa.measurement.internal.kingdom.ProtocolConfig.Direct.LiquidLegionsDistribution`,
  `wfa.measurement.internal.kingdom.ProtocolConfig.Direct.LiquidLegionsCountDistinct`,
  `wfa.measurement.internal.kingdom.ProtocolConfig.LiquidLegionsV2`,
  `wfa.measurement.internal.kingdom.ProtocolConfig.HonestMajorityShareShuffle`,
  `wfa.measurement.internal.kingdom.MeasurementDetails`,
);

ALTER TABLE Certificates
ALTER COLUMN CertificateDetails `wfa.measurement.internal.kingdom.CertificateDetails`;

ALTER TABLE ComputationParticipants
ALTER COLUMN ParticipantDetails `wfa.measurement.internal.kingdom.ComputationParticipantDetails` NOT NULL;

ALTER TABLE DataProviders
ALTER COLUMN DataProviderDetails `wfa.measurement.internal.kingdom.DataProviderDetails` NOT NULL;

ALTER TABLE DuchyMeasurementLogEntries
ALTER COLUMN DuchyMeasurementLogDetails `wfa.measurement.internal.kingdom.DuchyMeasurementLogEntryDetails` NOT NULL;

ALTER TABLE EventGroupMetadataDescriptors
ALTER COLUMN DescriptorDetails `wfa.measurement.internal.kingdom.EventGroupMetadataDescriptorDetails` NOT NULL;

ALTER TABLE EventGroups
ALTER COLUMN EventGroupDetails `wfa.measurement.internal.kingdom.EventGroupDetails`;

ALTER TABLE ExchangeStepAttempts
ALTER COLUMN ExchangeStepAttemptDetails `wfa.measurement.internal.kingdom.ExchangeStepAttemptDetails` NOT NULL;

ALTER TABLE Exchanges
ALTER COLUMN ExchangeDetails `wfa.measurement.internal.kingdom.ExchangeDetails` NOT NULL;

ALTER TABLE RecurringExchanges
ALTER COLUMN RecurringExchangeDetails `wfa.measurement.internal.kingdom.RecurringExchangeDetails` NOT NULL;

ALTER TABLE Requisitions
ALTER COLUMN RequisitionDetails `wfa.measurement.internal.kingdom.RequisitionDetails`;

ALTER TABLE MeasurementConsumers
ALTER COLUMN MeasurementConsumerDetails `wfa.measurement.internal.kingdom.MeasurementConsumerDetails` NOT NULL;

ALTER TABLE MeasurementLogEntries
ALTER COLUMN MeasurementLogDetails `wfa.measurement.internal.kingdom.MeasurementLogEntryDetails` NOT NULL;

ALTER TABLE Measurements
ALTER COLUMN MeasurementDetails `wfa.measurement.internal.kingdom.MeasurementDetails` NOT NULL;

RUN BATCH;