// Copyright 2025 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.panelmatch.client.authorizedview;

option java_package = "org.wfanet.panelmatch.client.authorizedview";
option java_multiple_files = true;
option java_outer_classname = "EncryptedEventProto";

// Messages for BigQuery authorized view workflow event processing

// Encrypted matched event from BigQuery authorized view JOIN operation.
// This is the result of joining EDP's encrypted events table with MP's
// encrypted join keys through an authorized view.
message EncryptedMatchedEvent {
  // EDP-encrypted join key that matched between EDP and MP tables (raw bytes).
  // This key was double-blinded during the commutative encryption protocol,
  // then MP removed their blinding to get this EDP-encrypted version.
  // Note: Stored as base64 string in BigQuery, converted to bytes at read time.
  bytes encrypted_join_key = 1;

  // AES-GCM encrypted event data in the format: IV (12 bytes) + ciphertext +
  // auth tag (16 bytes). The encryption key is derived as
  // SHA-256(encrypted_join_key).
  bytes encrypted_event_data = 2;
}

// Decrypted event after AES-GCM decryption.
// The encrypted_join_key is preserved for mapping back to plaintext join keys.
message DecryptedEvent {
  // Still EDP-encrypted join key (needed for ID mapping to plaintext)
  bytes encrypted_join_key = 1;

  // Decrypted DataProviderEvent proto bytes
  bytes decrypted_event_data = 2;
}

// Collection of decrypted events (used internally for batch processing).
// Output of the decryption step before final mapping to plaintext keys.
message DecryptedEventData {
  repeated DecryptedEvent decrypted_events = 1;
}
