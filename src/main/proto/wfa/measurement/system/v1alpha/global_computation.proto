// Copyright 2020 The Measurement Proto Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.system.v1alpha;

import "wfa/measurement/system/v1alpha/public_resource.proto";

option java_package = "org.wfanet.measurement.system.v1alpha";
option java_multiple_files = true;
option java_outer_classname = "GlobalComputationProto";

// TODO(world-federation-of-advertisers/cross-media-measurement#53): Delete once
// `Computation` resource is used instead.
message GlobalComputation {
  // Resource key message.
  message Key {
    string global_computation_id = 1;
  }
  // Resource key.
  Key key = 1;

  // State that the computation can be in.
  enum State {
    // Default value if state is omitted. Should never be us
    STATE_UNSPECIFIED = 0;

    // Computation has been created and is ready to start.
    CREATED = 1;

    // The computation is waiting for Duchies to confirm that they are ready to
    // start the MPC protocol.
    CONFIRMING = 2;

    // Computation is in progress.
    RUNNING = 3;

    // Computation was previously running but has been suspended.
    SUSPENDED = 4;

    // Computation completed successfully. Terminal state.
    SUCCEEDED = 5;

    // Computation was cancelled. Terminal state.
    CANCELLED = 6;

    // Computation completed unsuccessfully. Terminal state.
    FAILED = 7;
  }
  // Current state of the computation. Output only.
  State state = 2;

  // Which MetricRequisitions from this duchy are used in this computation.
  repeated MetricRequisitionKey metric_requisitions = 3;

  // Total number of MetricRequisitions across all duchies used in this
  // computation.
  int32 total_requisition_count = 4;

  // Set if and only if the `state` is `SUCCEEDED`.
  Result result = 5;

  // Individual result values are set only if they are required to be computed
  // by `metric_definition`.
  message Result {
    int64 reach = 1;

    // Histogram: maps frequencies to ratios. For example, a map entry
    // {key: 4 value: 0.2} means that 20% of all users were exposed 4 times.
    map<int64, double> frequency = 2;
  }
}
