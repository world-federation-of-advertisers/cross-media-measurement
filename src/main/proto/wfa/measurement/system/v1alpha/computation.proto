// Copyright 2021 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.system.v1alpha;

import "wfa/measurement/system/v1alpha/computation_participant.proto";
import "wfa/measurement/system/v1alpha/differential_privacy.proto";
import "wfa/measurement/system/v1alpha/requisition.proto";

option java_package = "org.wfanet.measurement.system.v1alpha";
option java_multiple_files = true;
option java_outer_classname = "ComputationProto";

message Computation {
  message Key {
    string computation_id = 1;
  }
  Key key = 1;

  // Public API version for serialized messages. Required. Immutable.
  string public_api_version = 2;

  // Serialized `MeasurementSpec` from public API. Required. Immutable.
  bytes measurement_spec = 3;

  // Serialized `DataProviderList` from public API. Required. Immutable.
  bytes data_provider_list = 4;

  // Salt for SHA256 hash of `data_provider_list`. Required. Immutable.
  bytes data_provider_list_salt = 5;

  // ID of `ProtocolConfig` resource from the public API.
  string protocol_config_id = 6;

  // State of a `Computation`.
  enum State {
    STATE_UNSPECIFIED = 0;

    // Awaiting the necessary parameters from computation participants (Duchies)
    // before Requisitions may be made available in the public API.
    PENDING_REQUISITION_PARAMS = 1;

    // Awaiting fulfillment of all Requisitions by Data Providers.
    //
    // Requisitions are available in the public API at this state.
    PENDING_REQUISITION_FULFILLMENT = 2;

    // Awaiting confirmation from computation participants (Duchies).
    //
    // Requisitions are all fulfilled at this state.
    PENDING_PARTICIPANT_CONFIRMATION = 3;

    // Awaiting completion of computation by participants (Duchies).
    //
    // Requisitions are all fulfilled at this state.
    PENDING_COMPUTATION = 4;

    // Completed successfully (has a result). Terminal state.
    SUCCEEDED = 5;

    // Completed unsuccessfully. Terminal state.
    FAILED = 6;

    // Cancelled by Measurement Consumer. Terminal state.
    CANCELLED = 7;
  }
  // State of this `Computation`. Output-only.
  State state = 7;

  // X.509 certificate in DER format which can be verified using the
  // Aggregator's root certificate. Must be set if `state` is `SUCCEEDED`.
  bytes aggregator_certificate = 8;

  // Serialized `EncryptionPublicKey` message from the public API. Must be set
  // if `state` is `SUCCEEDED`.
  bytes result_public_key = 9;

  // Encrypted `SignedData` message from the public API containing a serialized
  // `Result` message from the public API, which can be verified using
  // `aggregator_certificate`. Must be set if `state` is `SUCCEEDED`.
  bytes encrypted_result = 10;

  // Denormalized child `ComputationParticipant` resources. Output-only.
  repeated ComputationParticipant computation_participants = 11;

  // Denormalized child `Requisition` resources. Output-only.
  repeated Requisition requisitions = 12;

  // Protocol configuration that need only be known by Duchies.
  message DuchyProtocolConfig {
    message LiquidLegionsV2 {
      // The maximum frequency to reveal in the histogram.
      int32 maximum_frequency = 1;

      // Configuration for noises added by the MPC workers to protect
      // intermediate results. These noises don't affect the final output.
      message MpcNoise {
        // DP params for the blind histogram noise register.
        // Each of these registers contains a random register id, the same
        // constant key indicating that the register is destroyed, and an
        // arbitrary count value.
        DifferentialPrivacyParams blinded_histogram_noise = 1;
        // DP params for the noise for the publisher noise registers.
        // Each of these registers contains a well-known constant register id,
        // and arbitrary key and count values.
        DifferentialPrivacyParams noise_for_publisher_noise = 2;
      }
      MpcNoise mpc_noise = 2;
    }

    oneof protocol {
      LiquidLegionsV2 liquid_legions_v2 = 1;
    }
  }
  DuchyProtocolConfig duchy_protocol_config = 13;
}
