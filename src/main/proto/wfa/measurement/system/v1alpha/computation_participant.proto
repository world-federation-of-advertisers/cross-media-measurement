// Copyright 2021 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.system.v1alpha;

import "google/protobuf/timestamp.proto";

option java_package = "org.wfanet.measurement.system.v1alpha";
option java_multiple_files = true;
option java_outer_classname = "ComputationParticipantProto";

message ComputationParticipant {
  message Key {
    string computation_id = 1;
    // `Duchy` ID from public API.
    string duchy_id = 2;
  }
  Key key = 1;

  // State that a `ComputationParticipant` can be in.
  enum State {
    STATE_UNSPECIFIED = 0;

    // The `ComputationParticipant` has been created.
    CREATED = 1;

    // Requisition params have been set, but the `ComputationParticipant` is
    // not yet ready to participate.
    REQUISITION_PARAMS_SET = 2;

    // The `ComputationParticipant` is ready to participate. Terminal state.
    READY = 3;

    // The `ComputationParticipant` has refused to participate. Terminal state.
    //
    // The parent `Computation` will be in the `FAILED` state.
    REFUSED = 4;
  }
  // State of this `ComputationParticipant`. Output-only.
  State state = 2;

  // Time this resource was last updated. Output-only.
  google.protobuf.Timestamp update_time = 3;

  message RequisitionParams {
    // `DuchyCertificate` ID from public API.
    string duchy_certificate_id = 1;

    // X.509 certificate in DER format which can be verified using the
    // Duchy's root certificate. Output-only.
    bytes duchy_certificate = 2;

    message LiquidLegionsV2 {
      // Serialized `ElGamalPublicKey` message from public API.
      bytes el_gamal_public_key = 1;
      // Digital signature of `el_gamal_public_key` which can be verified using
      // `duchy_certificate`.
      bytes el_gamal_public_key_signature = 2;
    }

    oneof protocol {
      // Requisition parameters for the Liquid Legions v2 protocol.
      LiquidLegionsV2 liquid_legions_v2 = 3;
    }
  }
  // Parameters needed for `Requisition` to be made available in public API.
  RequisitionParams requisition_params = 4;
}
