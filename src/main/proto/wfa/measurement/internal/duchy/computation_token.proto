// Copyright 2020 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.internal.duchy;

import "wfa/measurement/internal/duchy/computation_blob_dependency.proto";
import "wfa/measurement/internal/duchy/computation_details.proto";
import "wfa/measurement/internal/duchy/computation_protocols.proto";
import "wfa/measurement/internal/duchy/requisition_details.proto";

option java_package = "org.wfanet.measurement.internal.duchy";
option java_multiple_files = true;

// A token that summarizes the most commonly used data in when executing
// a stage of a computation. Tokens are used as the primary data abstraction
// between a job working on a computation and the database backend.
message ComputationToken {
  // Identifier for the computation used locally.
  int64 local_computation_id = 1;

  // Identifier for the computation used globally i.e. across the kingdom
  // and all of the duchies.
  string global_computation_id = 2;

  // The stage of the computation.
  ComputationStage computation_stage = 3;

  // The number of the current attempt of the stage.
  int32 attempt = 4;

  // Metadata about blobs used in the current stage of the computation.
  repeated ComputationStageBlobMetadata blobs = 5;

  // Version of the last update to this computation. The version
  // is used to stop write contention from multiple processes.
  // This version is monotonically increasing and is checked against
  // the current value before any writes, and will change with every write.
  int64 version = 6;

  // Details pertinent to the computation as a whole, such as the configuration
  // of the duchy for this computation.
  ComputationDetails computation_details = 7;

  // Details pertinent to the specific stage of a computation. Not
  // all stages will have details.
  ComputationStageDetails stage_specific_details = 8;

  repeated RequisitionMetadata requisitions = 9;
}

// Metadata about a blob for a particular stage of the computation.
message ComputationStageBlobMetadata {
  // The way in which the stage depends upon the blob.
  ComputationBlobDependency dependency_type = 1;

  // The path to the blob if it exists. This is always set for an
  // input blob because all inputs must be written before a stage can begin,
  // but may not be set for an output blob.
  string path = 2;

  // The identifier of the blob.
  int64 blob_id = 3;
}

// Metadata about requisition used in this computation.
message RequisitionMetadata {
  // Lookup key using external IDs.
  ExternalRequisitionKey external_key = 1;
  // The path to the blob if fulfilled locally. Otherwise empty.
  string path = 2;
  // Detail of the requisition.
  RequisitionDetails details = 3;
}
