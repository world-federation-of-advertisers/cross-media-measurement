// Copyright 2020 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.internal.duchy;

import "wfa/measurement/internal/duchy/computation_protocols.proto";
import "wfa/measurement/internal/duchy/computation_token.proto";

option java_package = "org.wfanet.measurement.internal.duchy";
option java_multiple_files = true;

// Internal ComputationControlService for all async protocols.
service AsyncComputationControl {
  // Records information about an already written BLOb which is an output for
  // the current computation stage, and advances to a successor stage if the
  // recorded output is the last output for the current stage. Metadata for
  // the computation determines to which stage the computation is advance.
  rpc AdvanceComputation(AdvanceComputationRequest)
      returns (AdvanceComputationResponse) {}

  // Returns the output blob metadata for the current computation stage.
  rpc GetOutputBlobMetadata(GetOutputBlobMetadataRequest)
      returns (ComputationStageBlobMetadata) {}
}

// Request to record an expected output of the current computation stage and
// then advance the stage if it was the last output for the current stage.
message AdvanceComputationRequest {
  // The global identifier of the computation,
  string global_computation_id = 1;
  // The expected stage of this computation. The request may return an error or
  // succeed if the actual stage does not match, but there will not be any
  // changes to the data for the computation in the database.
  ComputationStage computation_stage = 2;
  // The ID of the output blob to record as written.
  int64 blob_id = 3;
  // The path of the blob newly added.
  string blob_path = 4;
}

message AdvanceComputationResponse {
  // Deliberately empty
}

message GetOutputBlobMetadataRequest {
  // Global identifier of the computation.
  string global_computation_id = 1;
  // The origin of the data, i.e., which duchy it comes from.
  string data_origin = 2;
}
