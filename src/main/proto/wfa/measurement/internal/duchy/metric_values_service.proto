// Copyright 2020 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.internal.duchy;

import "src/main/proto/wfa/measurement/internal/duchy/metric_value.proto";

option java_package = "org.wfanet.measurement.internal.duchy";
option java_multiple_files = true;

service MetricValues {
  // Retrieves the MetricValue having the specified key.
  rpc GetMetricValue(GetMetricValueRequest) returns (MetricValue) {}

  // Stores a MetricValue with its data via a stream.
  rpc StoreMetricValue(stream StoreMetricValueRequest) returns (MetricValue) {}

  // Streams the MetricValue having the specified key with its data.
  rpc StreamMetricValue(StreamMetricValueRequest)
      returns (stream StreamMetricValueResponse) {}
}

// Request message for GetMetricValue method.
message GetMetricValueRequest {
  oneof key {
    fixed64 external_id = 1;
    MetricValue.ResourceKey resource_key = 2;
  }
}

// Request message for StoreMetricValue method.
message StoreMetricValueRequest {
  // The header message for this streaming request.
  message Header {
    MetricValue.ResourceKey resource_key = 1;
  }

  // The chunk message for this streaming request.
  message Chunk {
    // The portion of the data for this Chunk. Required.
    bytes data = 1;
  }

  // Request message payload. Exactly one of these must be specified.
  oneof payload {
    // The header for this streaming request, specified as the payload for the
    // first request message.
    Header header = 1;

    // The chunk for this streaming request, specified on subsequent request
    // messages to the first one containing the header.
    Chunk chunk = 2;
  }
}

// Request message for StreamMetricValue method.
message StreamMetricValueRequest {
  oneof key {
    fixed64 external_id = 1;
    MetricValue.ResourceKey resource_key = 2;
  }
}

// Response message for StreamMetricValue method.
message StreamMetricValueResponse {
  // Header message for this streaming request.
  message Header {
    MetricValue metric_value = 1;

    // The total size of the metric value data in bytes.
    int64 data_size_bytes = 2;
  }

  // Body chunk message for this streaming request.
  message Chunk {
    bytes data = 1;
  }

  // Request message payload. Exactly one of these must be specified.
  oneof payload {
    // The header for this streaming request, specified as the payload for the
    // first request message.
    Header header = 1;

    // The chunk for this streaming request, specified on subsequent request
    // messages to the first one containing the header.
    Chunk chunk = 2;
  }
}
