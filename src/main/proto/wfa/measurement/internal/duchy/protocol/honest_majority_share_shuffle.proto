// Copyright 2023 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.internal.duchy.protocol;

import "wfa/measurement/internal/duchy/config/protocols_setup_config.proto";
import "wfa/measurement/internal/duchy/noise_mechanism.proto";
import "wfa/measurement/internal/duchy/protocol/share_shuffle_sketch_params.proto";

option java_package = "org.wfanet.measurement.internal.duchy.protocol";
option java_multiple_files = true;

message HonestMajorityShareShuffle {
  // Stages of the HonestMajorityShareShuffle computation.
  //
  // For non-aggregators, the normal stage transition is:
  // INITIALIZED -> SETUP_PHASE -> (WAIT_ON_SHUFFLE_INPUT) -> SHUFFLE_PHASE
  // -> COMPLETE
  // The WAIT_ON_INPUT stage will be skipped if all the input (requisition data
  // and peer worker input) has been received before the end of SETUP_PHASE.
  //
  // For the aggregator, the normal stage transition is:
  // WAIT_ON_AGGREGATION_INPUT -> AGGREGATION_PHASE -> COMPLETE
  enum Stage {
    // The computation stage is unknown. This is never set intentionally.
    STAGE_UNSPECIFIED = 0;

    // Computation is created by the non-aggregator.
    //
    // Non-aggregators are ready to accept requisition fulfillments. The
    // randomness seed is sampled and stored. Peer's random seed can be accepted
    // at this stage.
    INITIALIZED = 1;

    // Non-aggregator reads the randomness seed, then sends it to the peer.
    // Seeds are used for generating either noise or permutation. Peer's random
    // seed can be accepted at this stage.
    SETUP_PHASE = 2;

    // The non-aggregators only stage waiting for input of seeds from the peer
    // as well as requisition data from EDPs.
    WAIT_ON_SHUFFLE_INPUT = 3;

    // The aggregator only stage waiting for input of combined shares from
    // non-aggregators. It is the initial stage for the aggregator.
    WAIT_ON_AGGREGATION_INPUT = 4;

    // Non-aggregators execute following steps:
    //
    // 1. Combine sketch shares from EDPs: Expand all requisition seeds
    // into shares. Combine all requisition shares.
    //
    // 2. Add noise: Generate own noise share N_0 from common random seed.
    // Generate noise N and calculate N_1 = N - N_0. Expanding peer's common
    // random seed into noise share M_0. Append N_1 and M_0 into combined shares
    // from step 1.
    //
    // 3. Shuffle: Combine common random seeds from own and peer. Generate a
    // permutation based on the combined seed. Shuffle the shares.
    //
    // 4. Send the result of the share to the aggregator.
    SHUFFLE_PHASE = 5;

    // The aggregator adds up shares from non-aggregators, subtracts noise
    // offset, and calculates the reach and the frequency histogram, then
    // reports the encrypted result to the kingdom.
    AGGREGATION_PHASE = 6;

    // The computation is completed or failed. The worker can remove BLOBs that
    // are no longer needed.
    COMPLETE = 7;
  }

  message ComputationDetails {
    // The role of either aggregator or non-aggregator in Computations.
    wfa.measurement.internal.duchy.config.RoleInComputation role = 1;

    // Parameters used in this computation.
    message Parameters {
      // The maximum frequency to reveal in the histogram.
      int32 maximum_frequency = 1;
      // Parameters for secret sharing sketches.
      ShareShuffleSketchParams sketch_params = 2;
      // Noise mechanism used for generating noise.
      NoiseMechanism noise_mechanism = 3;
    }
    Parameters parameters = 2;

    // Seeds used by non-aggregators to generate noise and permutation.
    message RandomSeeds {
      // Seed to generates noise and permutation.
      bytes common_random_seed = 1;
      // Seed from the peer worker to generates noise and permutation.
      bytes common_random_seed_from_peer = 2;
    }
    RandomSeeds seeds = 3;

    // The list of ids of duchies participating in this computation.
    // The list is sorted by the duchy order by names, with the first element
    // being the first non-aggregator following by other non-aggregators,
    // and the last element being the aggregator.
    repeated string participants = 4;
  }

  // The input message containing the random seed from the peer worker.
  message ShufflePhaseInput {
    // Random seed in bytes.
    bytes peer_random_seed = 1;
  }

  // Details about a particular attempt of running a stage of the
  // HonestMajorityShareShuffle Protocol.
  message StageDetails {
    oneof detail {
      // Details specific to the WAIT_ON_AGGREGATION_INPUT stage.
      WaitOnAggregationInputDetails wait_on_aggregation_input_details = 1;
    }
  }

  // The stage WAIT_ON_AGGREGATION_INPUT of the aggregator duchy has a
  // bootstrapping step where it requires input from all other non-aggregators
  // before it can move forward. The bookkeeping of which duchy has provided is
  // stored in this message.
  message WaitOnAggregationInputDetails {
    // A mapping of the name of a duchy to the BlobId corresponding to the
    // ComputationBlobDependency.OUTPUT BLOB where it will be written.
    //
    // Upon receiving a sketch from a duchy the OUTPUT reference with the id
    // found in this map is updated with the local copy of the blob. When all
    // the output references have a path the worker can move onto the next
    // stage.
    map<string, int64> external_duchy_local_blob_id = 1;
  }
}
