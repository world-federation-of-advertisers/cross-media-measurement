// Copyright 2020 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.internal.duchy.protocol;

import "wfa/measurement/internal/duchy/crypto.proto";
import "wfa/measurement/internal/duchy/differential_privacy.proto";
import "wfa/measurement/internal/duchy/protocol/liquid_legions_sketch_parameter.proto";

option java_package = "org.wfanet.measurement.internal.duchy.protocol";
option java_multiple_files = true;

// Proto messages wrapping the input arguments or output results of the liquid
// legion v2 (three round) MPC protocol encryption methods, which are to be
// called via JNI in the Mill. Note that these protos contain sensitive data,
// e.g., private keys used in the ciphers. So they SHOULD NOT be written into
// any logs or leave the running process.

message ReachNoiseDifferentialPrivacyParams {
  // DP params for the blind histogram noise register.
  // Each of these registers contains a random register id, the same constant
  // key indicating that the register is destroyed, and an arbitrary count
  // value.
  DifferentialPrivacyParams blind_histogram = 1;
  // DP params for the noise for the publisher noise registers.
  // Each of these registers contains a well-known constant register id, and
  // arbitrary key and count values.
  DifferentialPrivacyParams noise_for_publisher_noise = 2;
  // DP params for the global reach DP noise registers.
  // Each of these registers contains a random register id which is out of
  // bounds of the normal id space, the same constant key indicating that the
  // register is destroyed, and an arbitrary count value.
  DifferentialPrivacyParams global_reach_dp_noise = 3;
}

message RegisterNoiseGenerationParameters {
  // Public keys of the composite ElGamal cipher. Used to encrypt the added
  // noise.
  ElGamalPublicKey composite_el_gamal_public_key = 1;
  // The elliptical curve to work on.
  int64 curve_id = 2;
  // The number of honest parties contributing their noise.
  int32 contributors_count = 3;
  // The total number of sketches across all workers for this computation.
  int32 total_sketches_count = 4;
  // Differential privacy parameters for all noise types.
  ReachNoiseDifferentialPrivacyParams dp_params = 5;
}

message FlagCountTupleNoiseGenerationParameters {
  // Maximum frequency to measure.
  int32 maximum_frequency = 1;
  // The number of honest parties contributing their noise.
  int32 contributors_count = 2;
  // Differential privacy parameters for noise tuples.
  // Same value is used for both (0, R, R) and (R, R, R) tuples.
  DifferentialPrivacyParams dp_params = 3;
}

message GlobalReachDpNoiseBaseline {
  // The number of honest parties contributing their noise.
  int32 contributors_count = 1;
  // DP parameters used when adding the global reach DP noise registers.
  DifferentialPrivacyParams global_reach_dp_noise = 2;
}

message PerBucketFrequencyDpNoiseBaseline {
  // The number of honest parties contributing their noise.
  int32 contributors_count = 1;
  // DP parameters used when adding noise.
  DifferentialPrivacyParams dp_params = 2;
}

// The request to complete work in the initialization phase.
message CompleteInitializationPhaseRequest {
  // The elliptical curve to work on.
  int64 curve_id = 1;
}

// Response of the CompleteInitializationPhase method.
message CompleteInitializationPhaseResponse {
  // A randomly created ElGamal Key pair.
  ElGamalKeyPair el_gamal_key_pair = 1;
  // The CPU time of processing the request.
  int64 elapsed_cpu_time_millis = 2;
}

// The request to complete work in the setup phase.
message CompleteSetupPhaseRequest {
  // The input combined register vector (CRV)
  // Each register contains a 3-tuple of (index, key, count), each of which is
  // a 66 bytes ElGamal ciphertext. In other words, the CRV size should be
  // divisible by 66*3.
  // The CRV is only needed so the noise can be interleaved and hidden in the
  // CRV. The registers in the CRV are unchanged, except for their orders.
  bytes combined_register_vector = 1;
  // The parameters required for generating noise registers.
  // if unset, the worker only shuffles the register without adding any noise.
  RegisterNoiseGenerationParameters noise_parameters = 2;
  // The maximum frequency that should be computed.
  // If set to 1, then no frequency histogram is returned.
  int32 maximum_frequency = 3;
}

// Response of the CompleteSetupPhase method.
message CompleteSetupPhaseResponse {
  // The output combined register vector (CRV), which contains shuffled input
  // and noise registers.
  bytes combined_register_vector = 1;
  // The CPU time of processing the request.
  int64 elapsed_cpu_time_millis = 2;
}

// The request to complete work in the execution phase one at a
// non-aggregator worker.
message CompleteExecutionPhaseOneRequest {
  // The input combined register vector (CRV).
  // Each register contains a 3-tuple of (index, key, count), each of which is
  // a 66 bytes ElGamal ciphertext. In other words, the sketch size should be
  // divisible by 66*3.
  bytes combined_register_vector = 1;
  // Key pair of the local ElGamal cipher. Required.
  ElGamalKeyPair local_el_gamal_key_pair = 2;
  // Public Key of the composite ElGamal cipher. Used to re-randomize the keys
  // and counts.
  ElGamalPublicKey composite_el_gamal_public_key = 3;
  // The elliptical curve to work on.
  int64 curve_id = 4;
}

// Response of the CompleteExecutionPhaseOne method.
message CompleteExecutionPhaseOneResponse {
  // The output combined register vector (CRV), whose register indexes are
  // partially decrypted. Each register contains a 3-tuple of (index, key,
  // count), each of which is a 66 bytes ElGamal ciphertext. In other words, the
  // CRV size should be divisible by 66*3.
  bytes combined_register_vector = 1;
  // The CPU time of processing the request.
  int64 elapsed_cpu_time_millis = 2;
}

// The request to complete work in the execution phase one at the aggregator
// worker.
message CompleteExecutionPhaseOneAtAggregatorRequest {
  // The input combined register vector (CRV).
  // Each register contains a 3-tuple of (index, key, count), each of which is
  // a 66 bytes ElGamal ciphertext. In other words, the sketch size should be
  // divisible by 66*3.
  // There should be only one layer of ElGamal encryption left
  // on the register indexes.
  bytes combined_register_vector = 1;
  // Key pair of the local ElGamal cipher. Required.
  ElGamalKeyPair local_el_gamal_key_pair = 2;
  // Public Key of the composite ElGamal cipher. Used to encrypt the random
  // numbers in SameKeyAggregation.
  ElGamalPublicKey composite_el_gamal_public_key = 3;
  // The elliptical curve to work on.
  int64 curve_id = 4;
  // The parameters required for generating noise flag count tuples.
  // if unset, no noise would be added.
  FlagCountTupleNoiseGenerationParameters noise_parameters = 5;
  // The total number of sketches across all workers for this computation.
  int32 total_sketches_count = 6;
}

// The response of the CompleteExecutionPhaseOneAtAggregator method.
message CompleteExecutionPhaseOneAtAggregatorResponse {
  // A concatenation of a list of (flag_1, flag_2, flag_3, count) tuples in
  // bytes. Each flag or count is a 66 bytes ElGamal ciphertext, and the size of
  // flag_count_tuples should be divisible by 264.
  bytes flag_count_tuples = 1;
  // The CPU time of processing the request.
  int64 elapsed_cpu_time_millis = 2;
}

// The request to complete work in the execution phase two at a non-aggregator
// worker.
message CompleteExecutionPhaseTwoRequest {
  // A concatenation of a list of (flag_1, flag_2, flag_3, count) tuples in
  // bytes. Each flag or count is a 66 bytes ElGamal ciphertext, and the size of
  // flag_count_tuples should be divisible by 264.
  bytes flag_count_tuples = 1;
  // Key pair of the local ElGamal cipher. Required.
  ElGamalKeyPair local_el_gamal_key_pair = 2;
  // The elliptical curve to work on.
  int64 curve_id = 3;
  // Public Key of the composite ElGamal cipher. Used to re-randomize the
  // counts.
  ElGamalPublicKey composite_el_gamal_public_key = 4;
  // Public key of the partial composite ElGamal cipher. Used to encrypt the
  // added noise flags.
  ElGamalPublicKey partial_composite_el_gamal_public_key = 5;
  // The parameters required for generating noise flag count tuples.
  // if unset, no noise would be added.
  FlagCountTupleNoiseGenerationParameters noise_parameters = 6;
}

// The response of the CompleteExecutionPhaseTwo method.
message CompleteExecutionPhaseTwoResponse {
  // A concatenation of a list of (flag_1, flag_2, flag_3, count) tuples in
  // bytes. Each flag or count is a 66 bytes ElGamal ciphertext, and the size of
  // flag_count_tuples should be divisible by 264.
  bytes flag_count_tuples = 1;
  // The CPU time of processing the request.
  int64 elapsed_cpu_time_millis = 2;
}

// The request to complete work in the execution phase two at the aggregator
// worker.
message CompleteExecutionPhaseTwoAtAggregatorRequest {
  // A concatenation of a list of (flag_1, flag_2, flag_3, count) tuples in
  // bytes. Each flag or count is a 66 bytes ElGamal ciphertext, and the size of
  // flag_count_tuples should be divisible by 264.
  bytes flag_count_tuples = 1;
  // Key pair of the local ElGamal cipher. Required.
  ElGamalKeyPair local_el_gamal_key_pair = 2;
  // Public key of the composite ElGamal cipher. Used to generate the 2-D same
  // key aggregator (SKA) matrix.
  ElGamalPublicKey composite_el_gamal_public_key = 3;
  // The elliptical curve to work on for SKA generation.
  int64 curve_id = 4;
  // Maximum frequency to measure. At least 2.
  // (maximum_frequency-1) will be the row dimension of the 2-D SKA matrix.
  int32 maximum_frequency = 5;
  // LiquidLegions parameters used for reach estimation.
  LiquidLegionsSketchParameters liquid_legions_parameters = 6;
  // Parameters for computing the noise baseline of the global reach DP noise
  // registers added in the setup phase.
  // The baseline is subtracted before reach is estimated.
  GlobalReachDpNoiseBaseline reach_dp_noise_baseline = 7;
  // Parameters used to generate frequency noise tuples.
  // The total number of frequency noise tuples should be subtracted from the
  // number of active registers before estimating reach.
  FlagCountTupleNoiseGenerationParameters frequency_noise_parameters = 8;
  // The sampling rate to be used by the LiquidLegionsV2 protocol.
  // This is taken from the VidSamplingInterval.width parameter in the
  // MeasurementSpec.
  float vid_sampling_interval_width = 9;
}

// The response of the CompleteExecutionPhaseTwoAtAggregator method.
message CompleteExecutionPhaseTwoAtAggregatorResponse {
  // The 2-D same key aggregator (SKA) matrix.
  // Each element is a 66 bytes ciphertext. The row size of the matrix is equal
  // to (maximum_frequency-1), and the column size of the matrix is equal to the
  // number of un-destroyed flags.
  bytes same_key_aggregator_matrix = 1;
  // The estimated reach.
  int64 reach = 2;
  // The CPU time of processing the request.
  int64 elapsed_cpu_time_millis = 3;
}

// The request to complete work in the execution phase three at a
// non-aggregator worker.
message CompleteExecutionPhaseThreeRequest {
  // The 2-D same key aggregator matrix.
  // Each element is a partially decrypted ciphertext (66 bytes). The row size
  // of the matrix is equal to (maximum_frequency-1), and the column size of the
  // matrix is equal to the number of un-destroyed flags.
  bytes same_key_aggregator_matrix = 1;
  // Key pair of the local ElGamal cipher. Required.
  ElGamalKeyPair local_el_gamal_key_pair = 2;
  // The elliptical curve to work on.
  int64 curve_id = 3;
}

// The response of the CompleteExecutionPhaseThree method.
message CompleteExecutionPhaseThreeResponse {
  // The 2-D same key aggregator (SKA) matrix.
  // Each element is a partially decrypted ciphertext (66 bytes). The row size
  // of the matrix is equal to (maximum_frequency-1), and the column size of the
  // matrix is equal to the number of un-destroyed flags.
  bytes same_key_aggregator_matrix = 1;
  // The CPU time of processing the request.
  int64 elapsed_cpu_time_millis = 2;
}

// The request to complete work in the execution phase three at the
// aggregator worker.
message CompleteExecutionPhaseThreeAtAggregatorRequest {
  // The 2-D same key aggregator matrix.
  // Each element is a decrypted (66 bytes). The row size of the matrix is equal
  // to (maximum_frequency-1), and the column size of the matrix is equal to
  // the number of un-destroyed flags.
  bytes same_key_aggregator_matrix = 1;
  // Key pair of the local ElGamal cipher. Required.
  ElGamalKeyPair local_el_gamal_key_pair = 2;
  // The elliptical curve to work on.
  int64 curve_id = 3;
  // Maximum frequency to output in the result. At least 2.
  int32 maximum_frequency = 4;
  // Parameters for computing the noise baseline of the frequency DP noise
  // added. The baseline is subtracted before frequency is estimated.
  PerBucketFrequencyDpNoiseBaseline global_frequency_dp_noise_per_bucket = 5;
}

// The response of the CompleteExecutionPhaseThreeAtAggregator method.
message CompleteExecutionPhaseThreeAtAggregatorResponse {
  // The relative frequency distribution.
  // The map contains the frequency distribution for [1, max_frequency-1] and
  // also includes max_frequency for the "max_frequency+" reach. In other words,
  // the map contains max_frequency entries.
  map<int64, double> frequency_distribution = 1;
  // The CPU time of processing the request.
  int64 elapsed_cpu_time_millis = 2;
}
