// Copyright 2022 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.internal.reporting;

import "wfa/measurement/internal/reporting/time_interval.proto";

option java_package = "org.wfanet.measurement.internal.reporting";
option java_multiple_files = true;

// Proto representation of the internal Metric entity type.
message Metric {
  message ReachParams {}
  message FrequencyHistogramParams {
    int32 maximum_frequency_per_user = 1;
  }
  message ImpressionCountParams {
    int32 maximum_frequency_per_user = 1;
  }
  message WatchDurationParams {
    int32 maximum_frequency_per_user = 1;
    // In seconds.
    int32 maximum_watch_duration_per_user = 2;
  }

  message Details {
    oneof metric_type {
      ReachParams reach = 1;
      FrequencyHistogramParams frequency_histogram = 2;
      ImpressionCountParams impression_count = 3;
      WatchDurationParams watch_duration = 4;
    }

    bool cumulative = 5;
  }
  Details details = 1;

  message SetOperation {
    enum Type {
      TYPE_UNSPECIFIED = 0;
      UNION = 1;
      DIFFERENCE = 2;
      INTERSECTION = 3;
    }
    Type type = 1;

    message ReportingSetKey {
      // `MeasurementConsumer` ID from the CMMS public API.
      string measurement_consumer_reference_id = 1;
      fixed64 external_reporting_set_id = 2;
    }

    message Operand {
      oneof operand {
        SetOperation operation = 1;
        ReportingSetKey reportingSetId = 2;
      }
    }

    Operand lhs = 2;
    Operand rhs = 3;
  }

  message MeasurementCalculation {
    TimeInterval time_interval = 1;

    message WeightedMeasurement {
      // `Measurement` ID from the CMMS public API.
      string measurement_reference_id = 1;
      int32 coefficient = 2;
    }
    repeated WeightedMeasurement weighted_measurements = 2;
  }

  message NamedSetOperation {
    string display_name = 1;
    SetOperation set_operation = 2;
    repeated MeasurementCalculation measurement_calculations = 3;
  }
  repeated NamedSetOperation named_set_operations = 2;
}
