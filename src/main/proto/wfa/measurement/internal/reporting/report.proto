// Copyright 2022 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.internal.reporting;

import "google/protobuf/timestamp.proto";
import "wfa/measurement/internal/reporting/measurement.proto";
import "wfa/measurement/internal/reporting/metric.proto";
import "wfa/measurement/internal/reporting/time_interval.proto";

option java_package = "org.wfanet.measurement.internal.reporting";
option java_multiple_files = true;

// Proto representation of the internal Report entity type.
message Report {
  // `MeasurementConsumer` ID from the CMMS public API.
  string measurement_consumer_reference_id = 1;
  fixed64 external_report_id = 2;

  oneof time {
    TimeIntervals time_intervals = 3;
    PeriodicTimeInterval periodic_time_interval = 4;
  }

  repeated Metric metrics = 5;

  enum State {
    // Default value. This value is unused.
    STATE_UNSPECIFIED = 0;
    // Computation is running.
    RUNNING = 1;
    // Completed successfully. Terminal state.
    SUCCEEDED = 2;
    // Completed with failure. Terminal state.
    FAILED = 3;
  }
  // Depends on `Measurement` states. Output-only.
  State state = 6;

  // Map of `Measurement` ID from the CMMS API to the `Measurement` for the
  // `Report`. Output-only.
  map<string, Measurement> measurements = 7;

  message Details {
    // Map of `EventGroup` resource name to filter predicate.
    map<string, string> event_group_filters = 1;

    // Set operation calculations are done for each set operation for a given
    // `Metric`, which is column by column. Having a list of columns here makes
    // it easier to store the results while doing the calculations. The csv
    // should still be generated row by row.
    message Result {
      message Column {
        string column_header = 1;
        // Required to be in the same order as `row_headers`.
        repeated double set_operations = 2;
      }

      message ScalarTable {
        repeated string row_headers = 1;
        repeated Column columns = 2;
      }
      ScalarTable scalar_table = 1;

      message HistogramTable {
        message Row {
          string row_header = 1;
          int32 frequency = 2;
        }
        repeated Row rows = 1;
        repeated Column columns = 2;
      }
      repeated HistogramTable histogram_tables = 2;
    }

    // Set only when `state` is `SUCCEEDED`. Output-only.
    Result result = 2;
  }
  Details details = 8;

  // When the report was created. Output-only.
  google.protobuf.Timestamp create_time = 9;

  string report_idempotency_key = 10;
}
