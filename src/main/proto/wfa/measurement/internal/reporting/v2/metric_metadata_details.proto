// Copyright 2025 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.internal.reporting.v2;

import "google/type/interval.proto";
import "wfa/measurement/internal/reporting/v2/event_filter.proto";
import "wfa/measurement/internal/reporting/v2/event_template_field.proto";
import "wfa/measurement/internal/reporting/v2/metric_frequency_spec.proto";

option java_package = "org.wfanet.measurement.internal.reporting.v2";
option java_multiple_files = true;

message MetricMetadataDetails {
  // The time interval over which the metrics were computed
  google.type.Interval time_interval = 1;

  // A summary of a component of the reporting_unit being reported on
  message ReportingUnitComponentSummary {
    // Ex: If a `DataProvider` has the name "dataproviders/abc", then the
    // ID is "abc".
    string cmms_data_provider_id = 1;

    // Display name of the `DataProvider`.
    string cmms_data_provider_display_name = 2;

    // Summary of an EventGroup entailed by the component
    //
    // Ex: If an `EventGroup` has the name
    // "measurementconsumers/abc/eventgroups/abcd", then the
    // `MeasurementConsumer` ID is "abc" and the `EventGroup` ID is "abcd".
    message EventGroupSummary {
      // `MeasurementConsumer` ID from the CMMS public API.
      string cmms_measurement_consumer_id = 1;
      // `EventGroup` ID from the CMMS public API.
      string cmms_event_group_id = 2;
    }
    // A summary of each EventGroup entailed by the component.
    repeated EventGroupSummary event_group_summaries = 3;
  }

  // A summary of each component of the reporting_unit reported on
  message ReportingUnitSummary {
    // Component summaries
    repeated ReportingUnitComponentSummary reporting_unit_component_summary =
        1;
  }
  // A summary of the ReportingUnit
  ReportingUnitSummary reporting_unit_summary = 2;

  // Defines the windowing criteria for a set of Metrics including the time
  // period over which they are computed and whether they are cumulative or
  // not.
  message WindowingSpec {
    // The reporting frequency for this page of results.
    MetricFrequencySpec metric_frequency = 1;

    // Options for specifying cumulative or non-cumulative metrics.
    enum AccumulationOptions {
      // Default value. Unused.
      ACCUMULATION_OPTIONS_UNSPECIFIED = 0;
      // Cumulative metrics
      CUMULATIVE = 1;
      // Non-cumulative metrics
      NON_CUMULATIVE = 2;
    }
    // How to accumulate results.
    AccumulationOptions accumulation_options = 2;
  }
  WindowingSpec windowing_spec = 3;

  // A summary of the aspects of the DimensionSpec that were applied
  message DimensionSpecSummary {
    // The grouping dimensions and values for the reported metrics
    EventTemplateField grouping = 1;
    // The filters applied to the reported metrics
    repeated EventFilter filters = 2;
  }
  DimensionSpecSummary dimension_spec_summary = 4;
}
