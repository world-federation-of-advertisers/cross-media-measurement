// Copyright 2023 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.internal.reporting.v2;

import "google/protobuf/timestamp.proto";
import "wfa/measurement/internal/reporting/v2/metric.proto";
import "wfa/measurement/internal/reporting/v2/time_interval.proto";

option java_package = "org.wfanet.measurement.internal.reporting.v2";
option java_multiple_files = true;

// Proto representation of the internal Report entity type.
message Report {
  // `MeasurementConsumer` ID from the CMMS public API.
  string cmms_measurement_consumer_id = 1;
  fixed64 external_report_id = 2;

  google.protobuf.Timestamp create_time = 3;

  message MetricCalculationSpec {
    // Represents all `Metric`s associated with this MetricCalculation.
    repeated fixed64 external_metric_ids = 1;

    message Grouping {
      repeated string predicates = 1;
    }

    message Details {
      string display_name = 1;
      repeated MetricSpec metric_specs = 2;
      repeated Grouping groupings = 3;
      bool cumulative = 4;
    }
    Details details = 2;
  }

  message ReportingMetricCalculationSpec {
    repeated MetricCalculationSpec metric_calculation_specs = 1;
  }

  // Map of `external_reporting_set_id` to `ReportingMetricCalculationSpec`.
  map<fixed64, ReportingMetricCalculationSpec> reporting_metric_entries = 4;

  enum State {
    // Default value. This value is unused.
    STATE_UNSPECIFIED = 0;
    // Computation is running.
    RUNNING = 1;
    // Completed successfully. Terminal state.
    SUCCEEDED = 2;
    // Completed with failure. Terminal state.
    FAILED = 3;
  }
  // Depends on `Metric` states. Output-only.
  State state = 5;

  oneof time {
    TimeIntervals time_intervals = 6;
    PeriodicTimeInterval periodic_time_interval = 7;
  }
}
