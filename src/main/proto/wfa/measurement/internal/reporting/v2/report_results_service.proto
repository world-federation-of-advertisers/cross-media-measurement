// Copyright 2025 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.internal.reporting.v2;

import "google/protobuf/empty.proto";
import "wfa/measurement/internal/reporting/v2/report_result.proto";

option java_package = "org.wfanet.measurement.internal.reporting.v2";
option java_multiple_files = true;

// Internal service for persistence of Metric entities.
service ReportResults {
  // Creates a `ReportResult`.
  rpc CreateReportResult(CreateReportResultRequest) returns (ReportResult);

  // Adds denoised result values to a `ReportResult`.
  rpc AddDenoisedResultValues(AddDenoisedResultValuesRequest)
      returns (google.protobuf.Empty);

  // Gets all of the noisy result values associated with a particular report
  // result.
  rpc GetNoisyResultValues(GetNoisyResultValuesRequest) returns (ReportResult);
}

// Request message for the `CreateReportResult` method.
message CreateReportResultRequest {
  // The `ReportResult` to create. The `external_report_result_id` will be
  // ignored and the system will assign a value.
  ReportResult report_result = 1;
}

// Request message for the `AddDenoisedResultValues` method.
message AddDenoisedResultValuesRequest {
  // The CMMS MeasurementConsumer ID. Required.
  string cmms_measurement_consumer_id = 1;

  // The external ID of the ReportResult. Required.
  fixed64 external_report_result_id = 2;

  message DenoisedReportingSetResult {
    message ReportingWindowEntry {
      ReportResult.ReportingSetResult.ReportingWindow key = 1;
      ReportResult.ReportingSetResult.ReportingWindowResult.ReportResultValues
          value = 2;
    }
    // Map of `ReportingWindow` to `ReportResultValues`.
    repeated ReportingWindowEntry reporting_window_results = 1;
  }

  // Map of external `ReportingSet` ID to `ReportingSetResult`.
  map<string, DenoisedReportingSetResult> reporting_set_results = 4;
}

message GetNoisyResultValuesRequest {
  // The CMMS MeasurementConsumer ID. Required.
  string cmms_measurement_consumer_id = 1;
  // The external ID of the ReportResult. Required.
  fixed64 external_report_result_id = 2;
}
