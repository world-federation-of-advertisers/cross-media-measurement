// Copyright 2023 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.internal.reporting.v2;

import "google/protobuf/duration.proto";
import "google/type/interval.proto";
import "wfa/measurement/internal/reporting/v2/reporting_set.proto";
import "wfa/measurement/internal/reporting/v2/mpc_protocol.proto";
import "wfa/measurement/internal/reporting/v2/direct_computation.proto";

option java_package = "org.wfanet.measurement.internal.reporting.v2";
option java_multiple_files = true;

// Proto representation of the internal Measurement entity type.
message Measurement {
  // `MeasurementConsumer` ID from the CMMS public API.
  string cmms_measurement_consumer_id = 1;
  // `Measurement` ID from the CMMS public API.
  string cmms_measurement_id = 2;

  // This is a UUID in string format. See https://www.ietf.org/rfc/rfc4122.txt.
  string cmms_create_measurement_request_id = 3;

  google.type.Interval time_interval = 4;

  repeated ReportingSet.PrimitiveReportingSetBasis
      primitive_reporting_set_bases = 5;

  enum State {
    STATE_UNSPECIFIED = 0;
    PENDING = 1;
    // Completed successfully. Terminal state.
    SUCCEEDED = 2;
    // Completed with failure. Terminal state.
    FAILED = 3;
  }
  // The state of the `Measurement` derived from the CMMS public API.
  State state = 6;

  message Failure {
    enum Reason {
      REASON_UNSPECIFIED = 0;
      // An associated certificate was revoked.
      CERTIFICATE_REVOKED = 1;
      // Requisition state was set to REFUSED.
      REQUISITION_REFUSED = 2;
      // ComputationParticipant state was set to FAILED.
      COMPUTATION_PARTICIPANT_FAILED = 3;
    }
    Reason reason = 1;
    // Human-readable message.
    string message = 2;
  }

  message Result {
    message Reach {
      int64 value = 1;
    }
    Reach reach = 1;

    message Frequency {
      map<int64, double> relative_frequency_distribution = 1;
    }
    Frequency frequency = 2;

    message Impression {
      int64 value = 1;
    }
    Impression impression = 3;

    message WatchDuration {
      google.protobuf.Duration value = 1;
    }
    WatchDuration watchDuration = 4;
  }

  message Details {
    // Failure reason of the `Measurement` derived from the CMMS public API.
    // Set when the state is set to FAILED.
    Failure failure = 1;
    // The result of the `Measurement` derived from the CMMS public API.
    Result result = 2;
    // Computation configs of the `Measurement` derived from the CMMS public
    // API.
    repeated ComputationConfig computation_configs = 3;
  }
  Details details = 7;
}

// The mechanism used to generate noise in computations.
enum NoiseMechanism {
  // Default value used if the mechanism is omitted.
  NOISE_MECHANISM_UNSPECIFIED = 0;
  // No noise is added.
  NONE = 1;
  // Geometric, i.e. discrete Laplace.
  GEOMETRIC = 2;
  // Discrete Gaussian.
  DISCRETE_GAUSSIAN = 3;
  // Continuous Laplace.
  CONTINUOUS_LAPLACE = 4;
  // Continuous Gaussian.
  CONTINUOUS_GAUSSIAN = 5;
}

// Used for measurement variance calculations and as a fingerprint to identify
// measurements.
message ComputationConfig {
  message Reach {
    // The mechanism used to generate noise during computation.
    NoiseMechanism noise_mechanism = 1;
    oneof methodology {
      DeterministicCountDistinct deterministic_count_distinct = 2;
      LiquidLegionsCountDistinct liquid_legions_count_distinct = 3;
      LiquidLegionsV2 liquid_legions_v2 = 4;
      ReachOnlyLiquidLegionsV2 reach_only_liquid_legions_v2 = 5;
    }
  }
  Reach reach = 1;

  message Frequency {
    // The mechanism used to generate noise during computation.
    NoiseMechanism noise_mechanism = 1;
    oneof methodology {
      DeterministicDistribution deterministic_distribution = 2;
      LiquidLegionsDistribution liquid_legions_distribution = 3;
      LiquidLegionsV2 liquid_legions_v2 = 4;
      ReachOnlyLiquidLegionsV2 reach_only_liquid_legions_v2 = 5;
    }
  }
  Frequency frequency = 2;

  message Impression {
    // The mechanism used to generate noise during computation.
    NoiseMechanism noise_mechanism = 1;
    oneof methodology {
      DeterministicCount deterministic_count = 2;
    }
  }
  Impression impression = 3;

  message WatchDuration {
    // The mechanism used to generate noise during computation.
    NoiseMechanism noise_mechanism = 1;
    oneof methodology {
      DeterministicSum deterministic_sum = 2;
    }
  }
  WatchDuration watchDuration = 4;
}
