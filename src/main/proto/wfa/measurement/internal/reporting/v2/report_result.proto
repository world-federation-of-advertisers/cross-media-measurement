// Copyright 2025 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.internal.reporting.v2;

import "google/type/date.proto";
import "google/type/datetime.proto";
import "wfa/measurement/internal/reporting/v2/event_filter.proto";
import "wfa/measurement/internal/reporting/v2/event_template_field.proto";
import "wfa/measurement/internal/reporting/v2/result_group.proto";

option java_package = "org.wfanet.measurement.internal.reporting.v2";
option java_multiple_files = true;

message ReportResult {
  enum MetricFrequencyType {
    METRIC_FREQUENCY_TYPE_UNSPECIFIED = 0;
    TOTAL = 1;
    WEEKLY = 2;
  }

  enum VennDiagramRegionType {
    VENN_DIAGRAM_REGION_TYPE_UNSPECIFIED = 0;
    // Indicates that the metrics for a ReportingSet are for the
    // union of the entailed ReportingSets
    UNION = 1;
    // Indicates that the metrics for a ReportingSet are for the
    // primitive Venn diagram region entailed by sub-ReportingSets
    PRIMITIVE = 2;
  }

  // The CMMS Measurement Consumer ID
  string cmms_measurement_consumer_id = 1;
  // The external ID of this result.
  fixed64 external_report_result_id = 2;
  // The report start time. The end dates below are aligned with the time
  // in this field.
  google.type.DateTime report_start = 3;

  message ReportingSetResult {
    string external_reporting_set_id = 1;
    VennDiagramRegionType venn_diagram_region_type = 2;
    // Selects how to specify the IQF.
    oneof impression_qualification_filter {
      // The external ID of the IQF
      string external_impression_qualification_filter_id = 3;
      // Set if the filter is custom.
      bool custom = 4;
    }
    MetricFrequencyType metric_frequency_type = 5;
    // The event template dimensions the result is grouped by
    // Each event template field path may exist at most once in this list.
    repeated EventTemplateField groupings = 6;
    // The filters, sans the IQF criteria, that were applied to these results.
    repeated EventFilter event_filters = 7;
    int32 population_size = 8;
    // Represents the results for a reporting window with respect to a
    // ReportingSetResult.
    message ReportingWindowResult {
      google.type.Date window_start_date = 1;
      google.type.Date window_end_date = 2;

      // Represents result values with respect to a ReportingWindowResult.
      //
      // The combination of (cmms_measurement_consumer_id,
      //                     external_report_result_id,
      //                     external_report_result_value_id)
      // is unique.
      message ReportResultValues {
        fixed64 external_report_result_value_id = 1;
        enum ResultType {
          RESULT_TYPE_UNSPECIFIED = 0;
          NOISY = 1;
          DENOISED = 2;
        }
        ResultType result_type = 2;

        message NoisyMetricSet {
          // Statistics of a scalar value
          message UnivariateStatistics {
            // The standard deviation of the associated scalar variable value.
            //
            // Can be used to find different confidence intervals.
            double standard_deviation = 1;
          }

          message ReachResult {
            int64 value = 1;
            UnivariateStatistics univariate_statistics = 2;
          }

          message HistogramResult {
            message BinResult {
              double value = 1;
            }
            message Bin {
              BinResult bin_result = 1;
              UnivariateStatistics result_univariate_statistics = 2;
              // Univariate statistics of the relative result at this bin.
              //
              // Relative result = (bin value) / (sum of all bin values)
              UnivariateStatistics relative_univariate_statistics = 3;
              // Univariate statistics of the k+ count from the current bin
              // (i.e. k-th bin, inclusive) to the last bin (inclusive).
              //
              // A K+ count is the sum of the values from the k-th bin to the
              // last bin.
              UnivariateStatistics k_plus_univariate_statistics = 4;
              // Univariate statistics of the relative k+ count from the current
              // bin (i.e. k-th bin, inclusive) to the last bin (inclusive).
              //
              // A relative K+ count = (K+ count) / (sum of all bin values)
              UnivariateStatistics relative_k_plus_univariate_statistics = 5;
            }
            repeated Bin bins = 1;
          }

          message ImpressionCountResult {
            int64 value = 1;
            UnivariateStatistics univariate_statistics = 2;
          }

          message PopulationCountResult {
            int64 value = 1;
          }

          ReachResult reach = 1;
          HistogramResult frequencyHistogram = 2;
          ImpressionCountResult impression_count = 3;
          PopulationCountResult population_count = 4;
        }

        NoisyMetricSet cumulative_results = 3;
        NoisyMetricSet non_cumulative_results = 4;
      }
      ReportResultValues report_result_values = 3;
    }
    repeated ReportingWindowResult reporting_window_results = 9;
  }
  repeated ReportingSetResult reporting_set_results = 4;
}
