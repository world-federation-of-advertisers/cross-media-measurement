// Copyright 2025 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.internal.reporting.v2;

import "google/type/date.proto";
import "google/type/datetime.proto";
import "wfa/measurement/internal/reporting/v2/event_filter.proto";
import "wfa/measurement/internal/reporting/v2/event_template_field.proto";
import "wfa/measurement/internal/reporting/v2/result_group.proto";

option java_package = "org.wfanet.measurement.internal.reporting.v2";
option java_multiple_files = true;

message ReportResult {
  // The CMMS Measurement Consumer ID. Required. Immutable.
  string cmms_measurement_consumer_id = 1;
  // The external ID of this result. Required. Immutable.
  fixed64 external_report_result_id = 2;
  // The report start time. The end dates below are aligned with the time
  // in this field. Required. Immutable.
  google.type.DateTime report_start = 3;

  enum MetricFrequencyType {
    METRIC_FREQUENCY_TYPE_UNSPECIFIED = 0;
    TOTAL = 1;
    WEEKLY = 2;
  }

  enum VennDiagramRegionType {
    VENN_DIAGRAM_REGION_TYPE_UNSPECIFIED = 0;
    // Indicates that the metrics for a ReportingSet are for the
    // union of the entailed ReportingSets
    UNION = 1;
    // Indicates that the metrics for a ReportingSet are for the
    // primitive Venn diagram region entailed by sub-ReportingSets
    PRIMITIVE = 2;
  }

  message ReportingSetResult {
    // Type of the Venn diagram region. Required. Immutable.
    VennDiagramRegionType venn_diagram_region_type = 1;
    // Impression qualification filter. Required. Immutable.
    oneof impression_qualification_filter {
      // The external ID of the IQF.
      string external_impression_qualification_filter_id = 2;
      // Whether the filter is custom.
      bool custom = 3;
    }
    // Type of frequency of metric. Required. Immutable.
    MetricFrequencyType metric_frequency_type = 4;
    // The event template dimensions the result is grouped by
    // Each event template field path may exist at most once in this list.
    repeated EventTemplateField groupings = 5;
    // The filters, sans the IQF criteria, that were applied to these results.
    // Immutable.
    repeated EventFilter event_filters = 6;
    // Size of the population. Required. Immutable.
    int32 population_size = 7;

    message ReportingWindow {
      // Start of the window range, inclusive.
      google.type.Date start = 1;
      // End of the window range, inclusive.
      google.type.Date end = 2;
    }
    // Represents the results for a reporting window with respect to a
    // ReportingSetResult.
    message ReportingWindowResult {
      // Represents noisy result values with respect to a ReportingWindowResult.
      // Immutable.
      message NoisyReportResultValues {
        message NoisyMetricSet {
          // Statistics of a scalar value
          message UnivariateStatistics {
            // The standard deviation of the associated scalar variable value.
            //
            // Can be used to find different confidence intervals.
            double standard_deviation = 1;
          }

          message ReachResult {
            int64 value = 1;
            UnivariateStatistics univariate_statistics = 2;
          }

          message HistogramResult {
            message BinResult {
              double value = 1;
              UnivariateStatistics univariate_statistics = 2;
            }
            repeated BinResult bins = 1;
          }

          message ImpressionCountResult {
            int64 value = 1;
            UnivariateStatistics univariate_statistics = 2;
          }

          ReachResult reach = 1;
          HistogramResult frequencyHistogram = 2;
          ImpressionCountResult impression_count = 3;
        }

        NoisyMetricSet cumulative_results = 1;
        NoisyMetricSet non_cumulative_results = 2;
      }

      // Represents result values with respect to a ReportingWindowResult.
      // Immutable.
      message ReportResultValues {
        ResultGroup.MetricSet.BasicMetricSet cumulative_results = 1;
        ResultGroup.MetricSet.BasicMetricSet non_cumulative_results = 2;
      }

      // Noisy report result values. Required. Immutable.
      NoisyReportResultValues noisy_report_result_values = 3;
      // Denoised report result values. Output-only.
      //
      // In responses, only set when view is `REPORT_RESULT_VIEW_FULL`.
      ReportResultValues denoised_report_result_values = 4;
    }
    message ReportingWindowEntry {
      ReportingWindow key = 1;
      ReportingWindowResult value = 2;
    }
    // Map of `ReportingWindow` to `ReportingWindowResult`.
    repeated ReportingWindowEntry reporting_window_results = 8;
  }

  // Map of external `ReportingSet` ID to `ReportingSetResult`.
  map<string, ReportingSetResult> reporting_set_results = 4;
}

enum ReportResultView {
  // Default value. The API will default to the NOISY view.
  REPORT_RESULT_VIEW_UNSPECIFIED = 0;
  // View which includes noisy values only.
  REPORT_RESULT_VIEW_NOISY = 1;
  // View which includes all values (noisy and de-noised).
  REPORT_RESULT_VIEW_FULL = 2;
}
