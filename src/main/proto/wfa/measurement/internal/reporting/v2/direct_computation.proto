// Copyright 2023 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.internal.reporting.v2;

option java_package = "org.wfanet.measurement.internal.reporting.v2";
option java_multiple_files = true;

// Information about the custom direct methodology.
message CustomDirectMethodology {
  // The information about a variance.
  message Variance {
    // Different types of variances of a frequency distribution result.
    message FrequencyVariances {
      // The variances of a frequency distribution from frequency 1 to maximum
      // frequency specified in the measurement spec.
      map<int64, double> variances = 1;
      // The variances of a k+ frequency distribution from frequency 1 to
      // maximum frequency specified in the measurement spec.
      //
      // A K+ frequency distribution is derived from the frequency distribution
      // by calculating the reach ratio of frequency K and above, i.e. reversed
      // cumulative sum of the frequency distribution. For example, a frequency
      // distribution {1: 0.4, 2: 0.3, 3: 0.2, 4:0.1, 5: 0.0} will have a K+
      // frequency distribution {1: 1.0, 2: 0.6, 3: 0.3, 4:0.1, 5: 0.0}.
      map<int64, double> k_plus_variances = 2;
    }

    // Information about lack of variance.
    message Unavailable {
      // Reason for a `Unavailable`.
      enum Reason {
        // Default value used if the reason is omitted.
        //
        // Used to capture unset reason which is invalid. This enum constant
        // should never be set.
        REASON_UNSPECIFIED = 0;
        // When the variance is mathematically not derivable from a custom
        // direct methodology.
        UNDERIVABLE = 1;
        // When the variance is obtained by upstream providers and not
        // accessible.
        INACCESSIBLE = 2;
      }
      // Reason for this `Unavailable`.
      Reason reason = 1;
    }

    // The type of variance associated with a result. Required.
    oneof type {
      // The variance when the computation result is a scalar type.
      double scalar = 1;
      // The variance when the computation result is a frequency type.
      FrequencyVariances frequency = 2;
      // The variance is unavailable for a custom direct methodology.
      Unavailable unavailable = 3;
    }
  }

  // The variance of the result computed from this custom direct methodology.
  Variance variance = 1;
}

// Parameters used when applying the deterministic count distinct methodology.
message DeterministicCountDistinct {}

// Parameters used when applying the deterministic distribution methodology.
message DeterministicDistribution {}

// Parameters used when applying the deterministic count methodology.
message DeterministicCount {}

// Parameters used when applying the deterministic sum methodology.
message DeterministicSum {}

// Parameters used when applying the Liquid Legions count distinct methodology.
//
// May only be set when the measurement type is REACH.
// To obtain differentially private result, one should add a DP noise to the
// estimate number of sampled registers instead of the target estimate.
message LiquidLegionsCountDistinct {
  // The decay rate of the Liquid Legions sketch. REQUIRED.
  double decay_rate = 1;

  // The maximum size of the Liquid Legions sketch. REQUIRED.
  int64 max_size = 2;
}

// Parameters used when applying the Liquid Legions distribution methodology.
//
// May only be set when the measurement type is REACH_AND_FREQUENCY.
// `Requisition`s using this protocol can be fulfilled by calling
// RequisitionFulfillment/FulfillRequisition with an encrypted sketch.
message LiquidLegionsDistribution {
  // The decay rate of the Liquid Legions sketch. REQUIRED.
  double decay_rate = 1;

  // The maximum size of the Liquid Legions sketch. REQUIRED.
  int64 max_size = 2;
}

// Parameters used when applying the Liquid Legions count methodology
//
// May only be set when the measurement type is IMPRESSION.
// To obtain differentially private result, one should add a DP noise scaled by
// `maximum_frequency_per_user` to the sampled count before scaling up.
message LiquidLegionsCount {
  // The decay rate of the Liquid Legions sketch. REQUIRED.
  double decay_rate = 1;

  // The maximum size of the Liquid Legions sketch. REQUIRED.
  int64 max_size = 2;
}

// Parameters used when applying the Liquid Legions sum methodology
//
// May only be set when the measurement type is WATCH_DURATION.
// To obtain differentially private result, one should add a DP noise scaled by
// `maximum_duration_per_user` to the sampled sum before scaling up.
message LiquidLegionsSum {
  // The decay rate of the Liquid Legions sketch. REQUIRED.
  double decay_rate = 1;

  // The maximum size of the Liquid Legions sketch. REQUIRED.
  int64 max_size = 2;
}
