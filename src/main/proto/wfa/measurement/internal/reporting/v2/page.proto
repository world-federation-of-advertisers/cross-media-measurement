// Copyright 2025 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.internal.reporting.v2;

import "google/type/interval.proto";
import "wfa/measurement/internal/reporting/v2/event_filter.proto";
import "wfa/measurement/internal/reporting/v2/event_template_field.proto";
import "wfa/measurement/internal/reporting/v2/metric_frequency_spec.proto";
import "wfa/measurement/internal/reporting/v2/reporting_impression_qualification_filter.proto";

option java_package = "org.wfanet.measurement.internal.reporting.v2";
option java_multiple_files = true;

message ExternalComponentId {
  // For a `ReportingSet`, the `MeasurementConsumer` ID will be assumed
  // to be the same as the parent report.
  //
  // Ex: If a `DataProvider` has the name "dataproviders/abc", then the
  // ID is "abc". If a `ReportingSet` has the name
  // "measurementconsumers/abc/reportingsets/abcd", then the
  // `ReportingSet` ID is "abcd".
  oneof resource {
    string external_reporting_set_id = 1;
    // `DataProvider` ID from the CMMS public API.
    string cmms_data_provider_id = 2;
  }
}

// A page of results.
message Page {
  // The title of the page.
  string title = 1;

  // The metric metadata
  message MetricMetadata {
    // A summary of a component of the reporting_unit being reported on
    message ReportingUnitComponentSummary {
      ExternalComponentId external_component_id = 1;

      message ReportingUnitComponentSummaryDetails {
        // Display name of the component
        string display_name = 1;

        // Summary of an EventGroup entailed by the component
        //
        // Ex: If an `EventGroup` has the name
        // "measurementconsumers/abc/eventgroups/abcd", then the
        // `MeasurementConsumer` ID is "abc" and the `EventGroup` ID is "abcd".
        message EventGroupSummary {
          // `MeasurementConsumer` ID from the CMMS public API.
          string cmms_measurement_consumer_id = 1;
          // `EventGroup` ID from the CMMS public API.
          string cmms_event_group_id = 2;
        }
        // A summary of each EventGroup entailed by the component.
        repeated EventGroupSummary event_group_summaries = 2;
      }
      ReportingUnitComponentSummaryDetails details = 2;
    }

    // A summary of each component of the reporting_unit reported on
    message ReportingUnitSummary {
      // Component summaries
      repeated ReportingUnitComponentSummary reporting_unit_component_summary =
          1;
    }
    // A summary of the ReportingUnit
    ReportingUnitSummary reporting_unit_summary = 1;

    // The impression qualification filter that was applied
    ReportingImpressionQualificationFilter filter = 2;

    message MetricMetadataDetails {
      // The time interval over which the metrics were computed
      google.type.Interval time_interval = 1;

      // Defines the windowing criteria for a set of Metrics including the time
      // period over which they are computed and whether they are cumulative or
      // not.
      message WindowingSpec {
        // The reporting frequency for this page of results.
        MetricFrequencySpec metric_frequency = 1;

        // Options for specifying cumulative or non-cumulative metrics.
        enum AccumulationOptions {
          // Default value. Unused.
          ACCUMULATION_OPTIONS_UNSPECIFIED = 0;
          // Cumulative metrics
          CUMULATIVE = 1;
          // Non-cumulative metrics
          NON_CUMULATIVE = 2;
        }
        // How to accumulate results.
        AccumulationOptions accumulation_options = 2;
      }
      WindowingSpec windowing_spec = 2;

      // A summary of the aspects of the DimensionSpec that were applied
      message DimensionSpecSummary {
        // The grouping dimensions and values for the reported metrics
        EventTemplateField grouping = 1;
        // The filters applied to the reported metrics
        repeated EventFilter filters = 2;
      }
      DimensionSpecSummary dimension_spec_summary = 3;
    }

    MetricMetadataDetails details = 3;
  }

  // The metric values
  message MetricSet {
    // Metrics that are applicable to any subunit of the ReportingUnit.
    message BasicMetricSet {
      // The reach
      int32 reach = 1;
      // The reach divided by the population_size
      float percent_reach = 2;
      // The k+ reach where the index is frequency - 1.
      repeated int32 k_plus_reach = 3;
      // The percent k+ reach
      repeated float percent_k_plus_reach = 4;
      // The average frequency
      float average_frequency = 5;
      // The impression count
      int32 impressions = 6;
      // The gross ratings points
      float grps = 7;
    }

    // Metrics for a single component of the reporting_unit.
    message ComponentMetricSet {
      // The basic metrics for this component
      BasicMetricSet basic = 1;

      // The component's unique reach
      int32 unique_reach = 2;
    }

    // Entry for `components` map.
    message ComponentMetricSetMapEntry {
      // Map entry key.
      ExternalComponentId key = 1;

      // Map entry value.
      ComponentMetricSet value = 2;
    }
    // Map of `component` to `ComponentMetricSet`.
    repeated ComponentMetricSetMapEntry components = 1;

    // Metrics for the intersection of the components of the reporting_unit
    message ComponentIntersectionMetricSet {
      // The reporting_unit `ReportingSet` components that this intersection
      // corresponds to.
      //
      // For a `ReportingSet`, the `MeasurementConsumer` ID is assumed to be
      // the same as the one in the `AdvancedReport`.
      //
      // Ex: If a `ReportingSet` has the name
      // "measurementconsumers/abc/reportingsets/abcd", then the
      // `ReportingSet` ID is "abcd" and the `MeasurementConsumer` ID is "abc".
      repeated string external_reporting_set_ids = 1;

      message ComponentIntersectionMetricSetDetails {
        // The reporting_unit `DataProvider` components that this intersection
        // corresponds to.
        //
        // Ex: If a `DataProvider` has the name "dataproviders/abc", then the
        // ID is "abc".
        repeated string cmms_data_provider_ids = 1;

        // Basic metrics for the intersection of the components
        BasicMetricSet basic = 2;
      }
      ComponentIntersectionMetricSetDetails details = 2;
    }
    // The metrics for the requested intersections
    repeated ComponentIntersectionMetricSet component_intersections = 2;

    message MetricSetDetails {
      // The size of the population for the filters/grouping specified
      int32 population_size = 1;

      // Metrics for the entire reporting_unit.
      message ReportingUnitMetricSet {
        // The metrics for the union of the reporting_unit components
        BasicMetricSet basic = 1;

        // The stacked incremental reach of the ReportingUnit.
        //
        // For example if the units in the ReportingUnit were "rs1", "rs2",
        // "rs3" then the values in this array are as follows:
        //  1. reach(rs1)
        //  2. reach(rs1+rs2) - reach(rs1)
        //  3. reach(rs1+rs2+rs3) - reach(rs1+rs2)
        repeated int32 stacked_incremental_reach = 2;
      }
      // Metrics for the whole reporting_unit
      ReportingUnitMetricSet reporting_unit = 2;
    }

    MetricSetDetails details = 3;
  }

  // The metadata and metrics for a impression qualification filter
  message Result {
    // Metadata that describes the metric
    MetricMetadata metadata = 1;
    // Metric values
    MetricSet metric_set = 2;
  }
  // The set of results for the Page, one per impression qualification filter
  // that was applicable to the page.
  repeated Result results = 2;
}
