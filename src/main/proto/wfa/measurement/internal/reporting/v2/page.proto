// Copyright 2025 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.internal.reporting.v2;

import "google/type/interval.proto";
import "wfa/measurement/internal/reporting/v2/event_filter.proto";
import "wfa/measurement/internal/reporting/v2/metric_frequency_spec.proto";
import "wfa/measurement/internal/reporting/v2/reporting_impression_qualification_filter.proto";

option java_package = "org.wfanet.measurement.internal.reporting.v2";
option java_multiple_files = true;

// A page of results.
message Page {
  // The title of the page.
  string title = 1;

  // The metric metadata
  message MetricMetadata {
    // A summary of a component of the reporting_unit being reported on
    message ReportingUnitComponentSummary {
      // The external ID of a component of the reporting_unit
      //
      // For BasicReport this is a DataProvider external ID
      // For AdvancedReport this is a ReportingSet external ID
      string external_component_id = 1;

      // Display name of the component
      string display_name = 2;
    }

    // A summary of each component of the reporting_unit reported on
    message ReportingUnitSummary {
      // Component summaries
      repeated ReportingUnitComponentSummary reporting_unit_component_summary =
          1;
    }
    // A summary of the ReportingUnit
    ReportingUnitSummary reporting_unit_summary = 1;

    // The time interval over which the metrics were computed
    google.type.Interval time_interval = 2;

    // Defines the windowing criteria for a set of Metrics including the time
    // period over which they are computed and whether they are cumulative or
    // not.
    message WindowingSpec {
      // The reporting frequency for this page of results.
      MetricFrequencySpec metric_frequency = 1;

      // Options for specifying cumulative or non-cumulative metrics.
      enum AccumulationOptions {
        // Default value. Unused.
        ACCUMULATION_OPTIONS_UNSPECIFIED = 0;
        // Cumulative metrics
        CUMULATIVE = 1;
        // Non-cumulative metrics
        NON_CUMULATIVE = 2;
      }
      // How to accumulate results.
      AccumulationOptions accumulation_options = 2;
    }
    WindowingSpec windowing_spec = 3;

    // Defines the dimensions over which metrics are grouped and filtered.
    message DimensionSpec {
      // Specifies the dimensions on which to Group metrics
      //
      // Only those event template fields that are tagged as groupable
      // and in the common template are supported.
      message Grouping {
        // A set field paths that indicate the dimensions to group by.
        //
        // Each field path is with respect to the Event message with `.` as the
        // traversal operator.
        //
        // For example, if the Event message had an Event Template `common` with
        // a field `age_group` then the field path would be `common.age_group`.
        repeated string event_template_field = 1;
      }
      // Metric grouping
      Grouping grouping = 3;

      // A conjunction of Event Filters
      //
      // Event Template fields that are used by any filter Terms must be
      // tagged as filterable.
      repeated EventFilter filters = 4;
    }
    DimensionSpec dimension_spec = 4;

    // The impression qualification filter that was applied
    ReportingImpressionQualificationFilter filter = 5;
  }

  // The metric values
  message MetricSet {
    // The size of the population for the filters/grouping specified
    int32 population_size = 1;

    // Metrics that are applicable to any subunit of the ReportingUnit.
    message BasicMetricSet {
      // The reach
      int32 reach = 1;
      // The reach divided by the population_size
      float percent_reach = 2;
      // The k+ reach where the index is frequency - 1.
      repeated int32 k_plus_reach = 3;
      // The percent k+ reach
      repeated float percent_k_plus_reach = 4;
      // The average frequency
      float average_frequency = 5;
      // The impression count
      int32 impressions = 6;
      // The gross ratings points
      float grps = 7;
    }
    // Metrics for the entire reporting_unit.
    message ReportingUnitMetricSet {
      // The metrics for the union of the reporting_unit components
      BasicMetricSet basic = 1;

      // The stacked incremental reach of the ReportingUnit.
      //
      // For example if the units in the ReportingUnit were "rs1", "rs2",
      // "rs3" then the values in this array are as follows:
      //  1. reach(rs1)
      //  2. reach(rs1+rs2) - reach(rs1)
      //  3. reach(rs1+rs2+rs3) - reach(rs1+rs2)
      repeated int32 stacked_incremental_reach = 2;
    }
    // Metrics for the whole reporting_unit
    ReportingUnitMetricSet reporting_unit = 2;

    // Metrics for a single component of the reporting_unit.
    message ComponentMetricSet {
      // The basic metrics for this component
      BasicMetricSet basic = 1;

      // The component's unique reach
      int32 unique_reach = 2;
    }
    // Entry for `components` map.
    message ComponentMetricSetMapEntry {
      // Map entry key.
      //
      // This is a DataProvider external ID when use with BasicReport and
      // a ReportingSet external ID when used with an AdvancedReport.
      string key = 1;

      // Map entry value.
      ComponentMetricSet value = 2;
    }
    // Map of `component` to `ComponentMetricSet`.
    repeated ComponentMetricSetMapEntry components = 3;

    // Metrics for the intersection of the components of the reporting_unit
    message ComponentIntersectionMetricSet {
      // The reporting_unit components that this intersection corresponds to.
      //
      // These are DataProvider external IDs when used with a BasicReport and
      // ReportingSet external IDs when used with an AdvancedReport.
      repeated string components = 1;
      // Basic metrics for the intersection of the components
      BasicMetricSet basic = 2;
    }
    // The metrics for the requested intersections
    repeated ComponentIntersectionMetricSet component_intersections = 4;
  }

  // The metadata and metrics for a impression qualification filter
  message Result {
    // Metadata that describes the metric
    MetricMetadata metadata = 1;
    // Metric values
    MetricSet metric_set = 2;
  }
  // The set of results for the Page, one per impression qualification filter
  // that was applicable to the page.
  repeated Result results = 2;
}
