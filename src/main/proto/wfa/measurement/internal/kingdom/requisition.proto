// Copyright 2020 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.internal.kingdom;

import "google/protobuf/timestamp.proto";
import "wfa/measurement/internal/kingdom/computation_participant.proto";

option java_package = "org.wfanet.measurement.internal.kingdom";
option java_multiple_files = true;

message Requisition {
  fixed64 external_measurement_consumer_id = 1;
  fixed64 external_measurement_id = 2;
  fixed64 external_requisition_id = 3;

  fixed64 external_computation_id = 4;

  fixed64 external_data_provider_id = 5;
  fixed64 external_data_provider_certificate_id = 6;

  google.protobuf.Timestamp update_time = 7;

  enum State {
    STATE_UNSPECIFIED = 0;
    UNFULFILLED = 1;
    FULFILLED = 2;
    REFUSED = 3;
  }
  State state = 8;

  // The human-friendly external ID of the Duchy that marked this `Requisition`
  // as `FULFILLED`.
  string external_fulfilling_duchy_id = 9;

  message Refusal {
    enum Justification {
      // Default value if a `Justification` field has not been specified. Should
      // never be used.
      JUSTIFICATION_UNSPECIFIED = 0;

      // At least one cryptographic consent signal (digital signature or
      // encrypted value) in the `Requisition` is invalid.
      //
      // This means either that a digital signature cannot be verified using the
      // specified certificate or an encrypted value cannot be decrypted using
      // the specified key.
      CONSENT_SIGNAL_INVALID = 1;

      // The specification/configuration for the `Requisition` is invalid.
      //
      // For example, `encrypted_requisition_spec` includes an invalid
      // `TimeInterval` (with `end_time` before `start_time`) or some
      // configuration that the `DataProvider` does not support.
      SPECIFICATION_INVALID = 2;

      // There is insufficient remaining privacy budget to fulfill the
      // `Requisition`.
      INSUFFICIENT_PRIVACY_BUDGET = 3;

      // The `Requisition` cannot be fulfilled by the `DataProvider` for a
      // reason that is not more clearly indicated by another `Justification`.
      //
      // This implies that the `DataProvider` *should* be able to fulfill the
      // `Requisition`, but something went irrecoverably wrong. For example, the
      // `DataProvider` encountered corruption of the underlying data.
      UNFULFILLABLE = 4;

      // The `DataProvider` has declined to fulfill this `Requisition`
      // regardless of whether any of the other `Justification` conditions
      // apply.
      DECLINED = 5;
    }
    Justification justification = 1;

    // Human-readable string adding more context to the provided
    // `Justification`. This should NOT include sensitive information.
    //
    // Example: "Data Provider X does not support Virtual ID model line Y".
    string message = 2;
  }

  message DuchyValue {
    // External ID of Certificate used to verify signatures in protocol field.
    fixed64 external_duchy_certificate_id = 1;

    oneof protocol {
      ComputationParticipant.LiquidLegionsV2Details liquid_legions_v2 = 2;
    }
  }
  // Map of external Duchy ID to DuchyValue.
  map<string, DuchyValue> duchies = 10;

  message Details {
    // Serialized `EncryptionPublicKey` message from the public API.
    bytes data_provider_public_key = 1;
    bytes data_provider_public_key_signature = 2;

    bytes encrypted_requisition_spec = 3;

    bytes data_provider_participation_signature = 4;

    Refusal refusal = 5;
  }
  Details details = 11;

  message ParentMeasurement {
    // Version of the public API for serialized message definitions as well as
    // resource names.
    string api_version = 1;

    fixed64 external_measurement_consumer_certificate_id = 2;

    // Serialized `MeasurementSpec` from public API.
    bytes measurement_spec = 3;
    bytes measurement_spec_signature = 4;

    string external_protocol_config_id = 5;
  }
  // Denormalized fields from the parent Measurement. Output-only.
  ParentMeasurement parent_measurement = 12;
}
