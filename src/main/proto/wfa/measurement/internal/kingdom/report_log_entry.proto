// Copyright 2020 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.internal.kingdom;

import "google/protobuf/timestamp.proto";
import "src/main/proto/wfa/measurement/internal/kingdom/report.proto";

option java_package = "org.wfanet.measurement.internal.kingdom";
option java_multiple_files = true;

// Represents a log message on a Report.
//
// These come from a few sources:
//   - Within the Kingdom, e.g. from batch processes
//   - From the Kingdom's advertiser-facing APIs
//   - From a Duchy (about a Computation)
//
// This is to enable a unified view of the progress per Report to e.g. provide
// status updates to advertisers or for debugging.
//
// A ReportLogEntry specifies a Report and a stage that the computations for the
// Report are in, as well as an "Event". These Events include a freeform debug
// message and a list of errors that occurred.
//
// TODO(world-federation-of-advertisers/cross-media-measurement#52): Delete once
// MeasurementLogEntry is being used instead.
message ReportLogEntry {
  int64 external_report_id = 1;
  Principal source = 2;

  // When the ReportLog was persisted in storage. Output only.
  google.protobuf.Timestamp create_time = 3;

  ReportLogDetails report_log_details = 4;

  message Principal {
    oneof principal {
      DuchyPrincipal duchy = 1;
      AdvertiserPrincipal advertiser = 2;
      OfflineProcessPrincipal offline_process = 3;
    }

    message DuchyPrincipal {
      string duchy_id = 1;
    }

    message AdvertiserPrincipal {
      int64 external_advertiser_id = 1;
    }

    message OfflineProcessPrincipal {
      string container_name = 1;
      string container_version = 2;

      // Uniquely identifies the binary name and replica.
      string job_name = 3;
    }
  }
}

message ReportLogDetails {
  oneof log_details {
    DuchyLogDetails duchy_log_details = 1;
    AdvertiserLogDetails advertiser_log_details = 2;
    OfflineProcessLogDetails offline_process_log_details = 3;
  }

  // Event details. This should concisely state what happens in a human-friendly
  // message. Detailed error messages belong in `error_details`.
  //
  // For example, this could state that a stage was completed, an offline job
  // detected a state change is needed, etc.
  string report_message = 5;

  // Unset if event is nominal.
  ErrorDetails error_details = 6;

  message ErrorDetails {
    google.protobuf.Timestamp error_time = 1;
    ErrorType error_type = 2;

    // Human-readable error message. This should not include any sensitive info
    // in any environment. In non-production environments, more details can go
    // into the debug_metadata field.
    string error_message = 3;

    // Stack trace. In production environments, this should be omitted.
    string stacktrace = 4;

    enum ErrorType {
      ERROR_TYPE_UNKNOWN = 0;
      TRANSIENT = 1;
      PERMANENT = 2;
    }
  }
}

message DuchyLogDetails {
  // A self-reported identifier. This might include the mill hostname or any
  // other information that the duchy decides to add. This is not to be trusted!
  string reported_duchy_id = 1;

  MpcAlgorithm algorithm = 2;

  // Stage details.
  int64 stage_number = 3;
  string stage_name = 4;

  google.protobuf.Timestamp stage_start = 5;
  int64 stage_attempt_number = 6;

  enum MpcAlgorithm {
    MPC_ALGORITHM_UNKNOWN = 0;
    LIQUID_LEGIONS_V2 = 1;
  }
}

message AdvertiserLogDetails {
  string api_method = 1;
}

message OfflineProcessLogDetails {
  oneof operation {
    InternalStateChange internal_state_change = 1;
    ReportCreation report_creation = 2;
  }

  message InternalStateChange {
    Report.ReportState previous_state = 1;
    Report.ReportState desired_new_state = 2;
  }

  message ReportCreation {
    // Deliberately empty
  }
}
