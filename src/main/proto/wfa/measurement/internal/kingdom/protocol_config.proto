// Copyright 2021 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.internal.kingdom;

import "wfa/measurement/internal/kingdom/differential_privacy.proto";

option java_package = "org.wfanet.measurement.internal.kingdom";
option java_multiple_files = true;

message ProtocolConfig {
  reserved 2;

  // The ID is reserved for future potential usage.
  // Currently, we directly embed the protocolConfig into `Requisition` and
  // `Measurement`.
  string external_protocol_config_id = 1;

  // The mechanism used to generate noise in computations.
  enum NoiseMechanism {
    NOISE_MECHANISM_UNSPECIFIED = 0;
    NONE = 3;
    GEOMETRIC = 1;
    DISCRETE_GAUSSIAN = 2;
    CONTINUOUS_LAPLACE = 4;
    CONTINUOUS_GAUSSIAN = 5;
  }

  // Configuration for the Direct protocol.
  //
  // The `DataProvider` may choose from the specified noise mechanisms and
  // methodologies.
  message Direct {
    // Configuration parameters for custom direct methodology.
    message CustomDirectMethodology {}
    // Configuration parameters for the deterministic count distinct
    // methodology.
    message DeterministicCountDistinct {}
    // Configuration parameters for the deterministic distribution methodology.
    message DeterministicDistribution {}
    // Configuration parameters for the deterministic count methodology.
    message DeterministicCount {}
    // Configuration parameters for the deterministic sum methodology.
    message DeterministicSum {}
    // Configuration parameters for the direct Liquid Legions distribution
    // methodology.
    message LiquidLegionsDistribution {}
    // Configuration parameters for the direct Liquid Legions count distinct
    // methodology.
    message LiquidLegionsCountDistinct {}

    // The set of mechanisms that can be used to generate noise during
    // computation.
    repeated NoiseMechanism noise_mechanisms = 1;

    // Custom direct methodology.
    //
    // Used when data provider wants to use a methodology that is not listed in
    // protocol config to compute direct measurements.
    CustomDirectMethodology custom_direct_methodology = 2;

    // Deterministic count distinct methodology.
    //
    // Can be used in reach computations.
    DeterministicCountDistinct deterministic_count_distinct = 3;

    // Deterministic distribution methodology.
    //
    // Can be used in frequency computations.
    DeterministicDistribution deterministic_distribution = 4;

    // Deterministic count methodology.
    //
    // Can be used in impression and population computations.
    DeterministicCount deterministic_count = 5;

    // Deterministic sum methodology.
    //
    // Can be used in watch duration computations.
    DeterministicSum deterministic_sum = 6;

    // Liquid Legions count distinct methodology.
    //
    // Can be used in reach computations.
    LiquidLegionsCountDistinct liquid_legions_count_distinct = 7;

    // Liquid Legions distribution methodology.
    //
    // Can be used in frequency computations.
    LiquidLegionsDistribution liquid_legions_distribution = 8;
  }

  // Configuration for Liquid Legions v2 protocols.
  message LiquidLegionsV2 {
    // Parameters for sketch.
    LiquidLegionsSketchParams sketch_params = 1;

    // Differential privacy parameters for data provider noise registers.
    //
    // Each of these registers contains a well-known constant register ID, and
    // arbitrary key and count values.
    DifferentialPrivacyParams data_provider_noise = 2;

    // ID of the OpenSSL built-in elliptic curve. For example, 415 for the
    // prime256v1 curve. Required. Immutable.
    int32 elliptic_curve_id = 3;

    // The maximum frequency to reveal in the histogram. For reach-only liquid
    // legions protocol, this field should be ignored.
    //
    // Deprecated: No longer set on new Measurements where it is specified in
    // MeasurementSpec instead.
    int32 maximum_frequency = 4 [deprecated = true];

    // The mechanism to generate noise during computation.
    //
    // If not specified the value is assumed to be `GEOMETRIC`.
    NoiseMechanism noise_mechanism = 5;
  }

  // Configuration for Honest Majority Share Shuffle protocols.
  message HonestMajorityShareShuffle {
    // Parameters for sketches.
    ShareShuffleSketchParams sketch_params = 1;

    // The mechanism to generate noise by MPC nodes during computation.
    NoiseMechanism noise_mechanism = 2;
  }

  // Configuration for the specific protocol.
  oneof protocol {
    // Liquid Legions v2 config.
    //
    // May only be set when the measurement type is REACH_AND_FREQUENCY.
    LiquidLegionsV2 liquid_legions_v2 = 3;

    // Reach-only Liquid Legions v2 config.
    //
    // Must only be set when the measurement type is REACH.
    LiquidLegionsV2 reach_only_liquid_legions_v2 = 4;

    // Direct protocol.
    Direct direct = 5;

    // Honest Majority Share Shuffle protocol.
    HonestMajorityShareShuffle honest_majority_share_shuffle = 6;
  }
}

// Parameters for a Liquid Legions sketch.
message LiquidLegionsSketchParams {
  // The decay rate of the Liquid Legions sketch.
  double decay_rate = 1;

  // The maximum size of the Liquid Legions sketch.
  int64 max_size = 2;

  // The size of the distribution of the sampling indicator value.
  // Reach-Only Liquid Legions protocol ignores this field.
  int64 sampling_indicator_size = 3;
}

// Parameters for a honest majority share shuffle sketch.
message ShareShuffleSketchParams {
  // Length of each register in bytes.
  int32 bytes_per_register = 1;

  // Secret share modulus.
  int32 ring_modulus = 2;
}
