// Copyright 2020 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.internal.kingdom;

import "google/protobuf/timestamp.proto";
import "src/main/proto/wfa/measurement/internal/kingdom/report.proto";
import "src/main/proto/wfa/measurement/internal/kingdom/report_details.proto";

option java_package = "org.wfanet.measurement.internal.kingdom";
option java_multiple_files = true;

// Internal service for Reports.
service Reports {
  // Gets a specific Report.
  rpc GetReport(GetReportRequest) returns (Report);

  // Creates the next Report from a ReportConfigSchedule.
  //
  // If there is already a Report for the schedule with a time window not fully
  // elapsed, this will return that Report instead of making a new one.
  rpc CreateNextReport(CreateNextReportRequest) returns (Report);

  // Streams Reports from the database, ordered by update time ascending.
  //
  // Note: the stream happens at a snapshot in time, so updates that happen
  // after the gRPC is started will not be included in the results. This implies
  // that the stream will eventually run out of Reports to stream and terminate.
  rpc StreamReports(StreamReportsRequest) returns (stream Report);

  // Streams "ready" Reports from the database: those that are awaiting
  // Requisitions, but all Requisitions have been fulfilled.
  rpc StreamReadyReports(StreamReadyReportsRequest) returns (stream Report);

  // Updates the state of a Report.
  rpc UpdateReportState(UpdateReportStateRequest) returns (Report);

  // Associates a Report and a Requisition.
  rpc AssociateRequisition(AssociateRequisitionRequest)
      returns (AssociateRequisitionResponse);

  // Confirms that a Duchy is ready to perform the computations for a Report.
  rpc ConfirmDuchyReadiness(ConfirmDuchyReadinessRequest) returns (Report);

  // Finishes a Report.
  rpc FinishReport(FinishReportRequest) returns (Report);
}

message GetReportRequest {
  int64 external_report_id = 1;
}

message CreateNextReportRequest {
  int64 external_schedule_id = 1;
  string combined_public_key_resource_id = 2;
}

message StreamReportsRequest {
  int64 limit = 1;
  Filter filter = 2;

  // All repeated fields are individually disjunctions.
  //
  // If a repeated field is not empty, then all output Reports must match one of
  // the entries.
  message Filter {
    repeated int64 external_advertiser_ids = 3;
    repeated int64 external_report_config_ids = 4;
    repeated int64 external_schedule_ids = 5;
    repeated Report.ReportState states = 6;
    google.protobuf.Timestamp updated_after = 7;
  }
}

message StreamReadyReportsRequest {
  int64 limit = 1;
}

message UpdateReportStateRequest {
  int64 external_report_id = 1;
  Report.ReportState state = 2;
}

message AssociateRequisitionRequest {
  int64 external_report_id = 1;
  int64 external_requisition_id = 2;
}

message AssociateRequisitionResponse {
  // Deliberately empty.
}

message ConfirmDuchyReadinessRequest {
  int64 external_report_id = 1;
  string duchy_id = 2;
  repeated int64 external_requisition_ids = 3;
}

message FinishReportRequest {
  int64 external_report_id = 1;
  ReportDetails.Result result = 2;
}
