// Copyright 2023 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.internal.kingdom;

import "google/protobuf/timestamp.proto";
import "google/type/interval.proto";
import "wfa/measurement/internal/kingdom/model_line.proto";

option java_package = "org.wfanet.measurement.internal.kingdom";
option java_multiple_files = true;

// Internal service for persistence of ModelLine entities.
service ModelLines {
  rpc CreateModelLine(ModelLine) returns (ModelLine);
  rpc GetModelLine(GetModelLineRequest) returns (ModelLine);
  // Streams `ModelLine`s.
  rpc StreamModelLines(StreamModelLinesRequest) returns (stream ModelLine);

  rpc SetModelLineHoldbackModelLine(SetModelLineHoldbackModelLineRequest)
      returns (ModelLine);

  // Sets the active_end_time for a `ModelLine`.
  rpc SetActiveEndTime(SetActiveEndTimeRequest) returns (ModelLine);

  // Lists `ModelLine`s that are valid given an `Interval` representing the time
  // range and a set of `ExternalDataProviderId`s. Ordered by `type` from `PROD`
  // to `HOLDBACK` to `DEV`, `active_start_time` descending.
  rpc EnumerateValidModelLines(EnumerateValidModelLinesRequest)
      returns (EnumerateValidModelLinesResponse);
}

message GetModelLineRequest {
  fixed64 external_model_provider_id = 1;
  fixed64 external_model_suite_id = 2;
  fixed64 external_model_line_id = 3;
}

message StreamModelLinesRequest {
  message AfterFilter {
    fixed64 external_model_provider_id = 1;
    fixed64 external_model_suite_id = 2;
    fixed64 external_model_line_id = 3;
    google.protobuf.Timestamp create_time = 4;
  }

  // Filter criteria as a conjunction of specified fields.
  message Filter {
    fixed64 external_model_provider_id = 1;
    fixed64 external_model_suite_id = 2;
    repeated ModelLine.Type type = 3;
    AfterFilter after = 4;
  }
  Filter filter = 1;

  // The maximum number of results to return. If not specified or 0, it implies
  // unlimited.
  int32 limit = 2;
}

message SetModelLineHoldbackModelLineRequest {
  fixed64 external_model_line_id = 1;
  fixed64 external_model_suite_id = 2;
  fixed64 external_model_provider_id = 3;
  fixed64 external_holdback_model_line_id = 4;
  fixed64 external_holdback_model_suite_id = 5;
  fixed64 external_holdback_model_provider_id = 6;
}

message SetActiveEndTimeRequest {
  fixed64 external_model_line_id = 1;
  fixed64 external_model_suite_id = 2;
  fixed64 external_model_provider_id = 3;
  google.protobuf.Timestamp active_end_time = 4;
}

// Request message for `EnumerateValidModelLines` method.
message EnumerateValidModelLinesRequest {
  fixed64 external_model_provider_id = 1;
  fixed64 external_model_suite_id = 2;

  // If `active_end_time` is set, only `ModelLine`s with this interval fully
  // contained between  `active_start_time`  and `active_end_time` are
  // considered. If `active_end_time` is not set, then the `start_time` of this
  // interval needs to be after `active_start_time` for the `ModelLine` to be
  // considered.
  google.type.Interval time_interval = 3;

  // Each `data_availability_intervals` must have an entry for the `ModelLine`
  // for the `ModelLine` to be considered, and the interval in each entry
  // associated with the `ModelLine` must fully contain the `time_interval` for
  // the `ModelLine` to be considered.
  repeated fixed64 external_data_provider_ids = 4;

  // List of `ModelLine.Type`s to consider. Defaults to `PROD`.
  repeated ModelLine.Type types = 5;
}

// Response message for `EnumerateValidModelLines` method.
message EnumerateValidModelLinesResponse {
  // The `ModelLine`s that met all the criteria.
  repeated ModelLine model_lines = 1;
}
