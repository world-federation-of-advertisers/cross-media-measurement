// Copyright 2021 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.internal.kingdom;

import "wfa/measurement/internal/kingdom/event_group.proto";

option java_package = "org.wfanet.measurement.internal.kingdom";
option java_multiple_files = true;

// Internal service for persistence of EventGroup entities.
service EventGroups {
  rpc CreateEventGroup(CreateEventGroupRequest) returns (EventGroup);

  rpc UpdateEventGroup(UpdateEventGroupRequest) returns (EventGroup);

  rpc GetEventGroup(GetEventGroupRequest) returns (EventGroup);

  rpc DeleteEventGroup(DeleteEventGroupRequest) returns (EventGroup);

  // Streams EventGroups ordered by create time, ascending.
  rpc StreamEventGroups(StreamEventGroupsRequest) returns (stream EventGroup);
}

message CreateEventGroupRequest {
  EventGroup event_group = 1;
  string request_id = 2;
}

message UpdateEventGroupRequest {
  EventGroup event_group = 1;
}

message GetEventGroupRequest {
  // External ID of the parent. Required.
  oneof external_parent_id {
    fixed64 external_data_provider_id = 1;
    fixed64 external_measurement_consumer_id = 3;
  }
  // External ID of the EventGroup. Required.
  fixed64 external_event_group_id = 2;
}

message DeleteEventGroupRequest {
  // External ID of the parent `DataProvider`. Required.
  fixed64 external_data_provider_id = 1;
  // The external id of `EventGroup`. Required.
  fixed64 external_event_group_id = 2;
}

message StreamEventGroupsRequest {
  // Filter criteria as a conjunction of specified fields. Repeated fields are
  // disjunctions of their items.
  message Filter {
    reserved 3, 4;

    fixed64 external_data_provider_id = 1;
    fixed64 external_measurement_consumer_id = 6;

    repeated fixed64 external_data_provider_ids = 7;
    repeated fixed64 external_measurement_consumer_ids = 2;
    bool show_deleted = 5;

    EventGroupKey after = 8;
  }
  Filter filter = 1;

  // The maximum number of results to return. If not specified or 0, it implies
  // unlimited.
  int32 limit = 2;
}

message EventGroupKey {
  fixed64 external_data_provider_id = 1;
  fixed64 external_event_group_id = 2;
}
