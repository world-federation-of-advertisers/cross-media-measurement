// Copyright 2021 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.internal.kingdom;

import "wfa/common/el_gamal_key.proto";
import "wfa/common/noise_parameters.proto";

option java_package = "org.wfanet.measurement.internal.kingdom";
option java_multiple_files = true;

// Protocol-specific configuration and parameters for the Liquid Legions V2
// Protocol.
message LiquidLegionsV2Data {
  // Initial configurations
  LiquidLegionsV2Config config = 1;
  // ElGamal keys used for a certain report.
  map<string, wfa.common.ElGamalPublicKey> duchy_keys = 2;
}

// Protocol-specific configuration for the Liquid Legions V2 Protocol.
// Used internally in the report details. The fields should be set when a report
// is created and then immutable.
message LiquidLegionsV2Config {
  // The decay rate of the Liquid Legions sketch.
  double decay_rate = 1;

  // The maximum size of the Liquid Legions sketch.
  int64 size = 2;

  // The maximum frequency to reveal in the histogram.
  int32 maximum_frequency = 3;

  // Noise parameters selected for the LiquidLegionV2 MPC protocol.
  // Only used as the configuration file consumed by the LiquidLegionV2Mill.
  message NoiseConfig {
    message ReachNoiseConfig {
      // DP params for the publisher noise registers.
      // Each of these registers contains a well-known constant register id, and
      // arbitrary key and count values.
      wfa.common.DifferentialPrivacyParams publisher_noise = 1;
      // DP params for the blind histogram noise register.
      // Each of these registers contains a random register id, the same
      // constant key indicating that the register is destroyed, and an
      // arbitrary count value.
      wfa.common.DifferentialPrivacyParams blind_histogram_noise = 2;
      // DP params for the noise for the publisher noise registers.
      // Each of these registers contains a well-known constant register id, and
      // arbitrary key and count values.
      wfa.common.DifferentialPrivacyParams noise_for_publisher_noise = 3;
      // DP params for the global reach DP noise registers.
      // Each of these registers contains a random register id which is out of
      // bounds of the normal id space, the same constant key indicating that
      // the register is destroyed, and an arbitrary count value.
      wfa.common.DifferentialPrivacyParams global_reach_dp_noise = 4;
    }
    ReachNoiseConfig reach_noise_config = 1;

    // Differential privacy parameters for noise tuples.
    // Same value is used for both (0, R, R) and (R, R, R) tuples.
    wfa.common.DifferentialPrivacyParams frequency_noise_config = 2;
  }
  NoiseConfig noise_config = 4;

  // ID of the OpenSSL built-in elliptic curve. For example, 415 for the
  // prime256v1 curve.
  int32 elliptic_curve_id = 5;
}