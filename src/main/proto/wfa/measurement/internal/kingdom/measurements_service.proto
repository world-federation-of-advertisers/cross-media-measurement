// Copyright 2021 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.internal.kingdom;

option java_package = "org.wfanet.measurement.internal.kingdom";
option java_multiple_files = true;

// Internal service for managing `Measurement` resources.
service Measurements {
  // Returns the `Measurement` with the specified resource key.
  rpc GetMeasurement(GetMeasurementRequest) returns (Measurement) {}

  // Creates (registers) a `Measurement`.
  rpc CreateMeasurement(CreateMeasurementRequest) returns (Measurement) {}

  // Transitions a `Measurement` to Measuerment.State.SUCCEEDED and populates
  // the result field.
  rpc FinishMeasurement(FinishMeasurementRequest)
      returns (Measurement);

  // Returns the `Requisition`s for the specified `DataProviderId`.
  rpc ListRequisitions(ListRequisitionsRequest)
      returns (ListRequisitionsResponse);

  // Marks a Requisition as having RequisitionState.FULFILLED.
  rpc FulfillRequisition(FulfillRequisitionRequest) returns (Requisition);

  // Transitions a `Requisition` to the `REFUSED` state.
  //
  // This is a terminal state for the `Requisition` and all computations that
  // rely on the `Requisition` will fail. Consequently, this should only be used
  // for permanent failures and not transient errors.
  //
  // This is a state transition method (see https://aip.dev/216).
  rpc RefuseRequisition(RefuseRequisitionRequest) returns (Requisition);

  // Sets the requisition params of a Duchy.
  //
  // This is a [state transition method](https://google.aip.dev/216) that
  // transitions the `ComputationParticipant` from the `CREATED` state to the
  // `REQUISITION_PARAMS_SET` state.
  rpc SetParticipantRequisitionParams(SetParticipantRequisitionParamsRequest)
      returns (ComputationParticipant);

  // Transitions a `ComputationParticipant` to the `REFUSED` state.
  //
  // This is a [state transition method](https://google.aip.dev/216).
  rpc RefuseComputationParticipant(RefuseComputationParticipantRequest)
      returns (ComputationParticipant);

  // Transitions a `ComputationParticipant` to the `READY` state.
  //
  // This is a [state transition method](https://google.aip.dev/216).
  rpc ConfirmComputationParticipant(ConfirmComputationParticipantRequest)
      returns (ComputationParticipant);
}


// Request message for `GetMeasurement` method.
message GetMeasurementRequest {
  // Resource key.
  Measurement.Key key = 1;
}

// Request message for `CreateMeasurement` method.
message CreateMeasurementRequest {
  // The `Measurement` to create. Required. The `key` field will be
  // ignored, and the system will assign an ID.
  Measurement measurement = 1;
}

// Request message for `FinishMeasurementRequest` method.
message FinishMeasurementRequest {
  // Resource key.
  Measurement.Key key = 1;
  bytes result_public_key = 2;
  bytes encrypted_result = 3;
}

// Request message for `ListRequisitions` method.
message ListRequisitionsRequest {
  // Resource key of the parent `EventGroup`. Required. `event_group_id` may be
  // omitted to list across all `EventGroup`s for the specified `DataProvider`.
  //
  // Results in a `PERMISSION_DENIED` error if any key segment does not match
  // for the authenticated user. For example, attempting to list
  // `Requisition`s for other `DataProvider`s or for `EventGroup`s
  // belonging to other `MeasurementConsumer`s.
  EventGroup.Key parent = 1;

  // The maximum number of resources to return. See https://aip.dev/158.
  int32 page_size = 2;
  // A token from a previous call, specified to retrieve the next page. See
  // https://aip.dev/158.
  string page_token = 3;

  // Filter criteria. Repeated fields are treated as logical ORs, and multiple
  // fields specified as logical ANDs.
  message Filter {
    repeated Requisition.State states = 1;
    repeated Measurement.Key measurements = 2;
  }
  // Result filter. If a page token is specified, then this will be ignored and
  // the filter for the first page will be applied.
  Filter filter = 4;
}

// Response message for `ListRequisitions` method.
message ListRequisitionsResponse {
  // The `Requisition` resources.
  repeated Requisition requisitions = 1;

  // A token that can be specified in a subsequent call to retrieve the next
  // page. See https://aip.dev/158.
  string next_page_token = 2;
}


