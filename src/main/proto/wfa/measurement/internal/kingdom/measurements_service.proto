// Copyright 2021 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.internal.kingdom;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "wfa/measurement/internal/kingdom/measurement.proto";

option java_package = "org.wfanet.measurement.internal.kingdom";
option java_multiple_files = true;

// Internal service for persistence of Measurement entities.
service Measurements {
  rpc CreateMeasurement(Measurement) returns (Measurement);

  // Returns the Measurement for the specified external ID and parent.
  rpc GetMeasurement(GetMeasurementRequest) returns (Measurement);

  // Returns the Measurement for the specified external computation ID, using
  // the COMPUTATION view.
  rpc GetMeasurementByComputationId(GetMeasurementByComputationIdRequest)
      returns (Measurement);

  // Streams Measurements ordered by update time, ascending.
  rpc StreamMeasurements(StreamMeasurementsRequest)
      returns (stream Measurement);

  rpc SetMeasurementResult(SetMeasurementResultRequest) returns (Measurement);

  // Marks a Measurement as CANCELLED by transitioning its state.
  rpc CancelMeasurement(CancelMeasurementRequest) returns (Measurement);

  // Marks Measurements as CANCELLED by transitioning their states.
  rpc BatchCancelMeasurements(BatchCancelMeasurementsRequest)
      returns (BatchCancelMeasurementsResponse);

  // Permanently deletes Measurements.
  rpc BatchDeleteMeasurements(BatchDeleteMeasurementsRequest)
      returns (google.protobuf.Empty);
}

message GetMeasurementRequest {
  fixed64 external_measurement_consumer_id = 1;
  fixed64 external_measurement_id = 2;
}

message GetMeasurementByComputationIdRequest {
  fixed64 external_computation_id = 1;
}

message StreamMeasurementsRequest {
  // Filter criteria as a conjunction of specified fields. Repeated fields are
  // disjunctions of their items.
  message Filter {
    int64 external_measurement_consumer_id = 1;
    int64 external_measurement_consumer_certificate_id = 2;
    repeated Measurement.State states = 3;
    // for next page token, both after fields need to be set
    google.protobuf.Timestamp updated_after = 4;
    oneof id_after {
      fixed64 external_measurement_id_after = 5;
      fixed64 external_computation_id_after = 6;
    }
    string externalDuchyId = 7;
  }
  Filter filter = 1;

  // The maximum number of results to return. If not specified or 0, it implies
  // unlimited.
  int32 limit = 2;

  Measurement.View measurement_view = 3;
}

message SetMeasurementResultRequest {
  fixed64 external_computation_id = 1;

  // External ID of the aggregator `Duchy`.
  string external_aggregator_duchy_id = 2;

  // External ID of the certificate belonging to the aggregator `Duchy`.
  fixed64 external_aggregator_certificate_id = 3;

  // Serialized `EncryptionPublicKey` message from the public API.
  bytes result_public_key = 4;

  // Encrypted `SignedData` message from the public API containing a serialized
  // `Result` message from the public API, which can be verified using
  // `aggregator_certificate`.
  bytes encrypted_result = 5;
}

message CancelMeasurementRequest {
  fixed64 external_measurement_consumer_id = 1;
  fixed64 external_measurement_id = 2;
}

message BatchCancelMeasurementsRequest {
  // The request message specifying the Measurements to cancel. A maximum of
  // 1000 Measurements can be cancelled in a batch.
  repeated CancelMeasurementRequest requests = 1;
}

message BatchCancelMeasurementsResponse {
  // Measurements cancelled.
  repeated Measurement measurements = 1;
}

message DeleteMeasurementRequest {
  fixed64 external_measurement_consumer_id = 1;
  fixed64 external_measurement_id = 2;
}

message BatchDeleteMeasurementsRequest {
  // The request message specifying the Measurements to permanently delete. A
  // maximum of 1000 Measurements can be deleted in a batch.
  repeated DeleteMeasurementRequest requests = 1;
}
