// Copyright 2020 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.internal.kingdom;

import "google/protobuf/timestamp.proto";
import "wfa/measurement/internal/kingdom/legacy_requisition.proto";

option java_package = "org.wfanet.measurement.internal.kingdom";
option java_multiple_files = true;

// Internal service for Requisitions.
service Requisitions {
  // Creates a new DatabaseRequisition in the database. The `requisition_id` and
  // `external_requisition_id` fields are ignored. This is idempotent.
  rpc CreateRequisition(Requisition) returns (Requisition);

  // Marks a Requisition as having RequisitionState.FULFILLED.
  rpc FulfillRequisition(FulfillRequisitionRequest) returns (Requisition);

  // Streams Requisitions from the database, ordered by create time ascending.
  rpc StreamRequisitions(StreamRequisitionsRequest)
      returns (stream Requisition);
}

message FulfillRequisitionRequest {
  int64 external_requisition_id = 1;
  string duchy_id = 2;
}

message StreamRequisitionsRequest {
  int64 limit = 1;

  Filter filter = 3;

  // All repeated fields are individually disjunctions.
  //
  // If a repeated field is not empty, then all output Requisitions must match
  // one of the entries.
  message Filter {
    repeated int64 external_data_provider_ids = 1;
    repeated int64 external_campaign_ids = 2;
    repeated Requisition.RequisitionState states = 3;

    google.protobuf.Timestamp created_after = 4;
  }
}
