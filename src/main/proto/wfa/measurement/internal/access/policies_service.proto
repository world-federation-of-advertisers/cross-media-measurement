// Copyright 2024 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.internal.access;

import "wfa/measurement/internal/access/policy.proto";

option java_package = "org.wfanet.measurement.internal.access";
option java_multiple_files = true;
option java_outer_classname = "PoliciesServiceProto";

service Policies {
  // Gets the Policy with the specified resource ID.
  //
  // Error reasons:
  // * `POLICY_NOT_FOUND`
  rpc GetPolicy(GetPolicyRequest) returns (Policy);

  // Creates a new Policy.
  //
  // Error reasons:
  // * `PRINCIPAL_TYPE_NOT_SUPPORTED`
  // * `POLICY_ALREADY_EXISTS`
  // * `ROLE_NOT_FOUND`
  // * `PRINCIPAL_NOT_FOUND`
  rpc CreatePolicy(Policy) returns (Policy);

  // Looks up a Policy by lookup key.
  //
  // Error reasons:
  // * `POLICY_NOT_FOUND_FOR_PROTECTED_RESOURCE`
  rpc LookupPolicy(LookupPolicyRequest) returns (Policy);

  // Adds members to a Policy binding.
  //
  // Error reasons:
  // * `POLICY_NOT_FOUND`
  // * `ETAG_MISMATCH`
  // * `ROLE_NOT_FOUND`
  // * `PRINCIPAL_NOT_FOUND`
  // * `PRINCIPAL_TYPE_NOT_SUPPORTED`
  // * `POLICY_BINDING_MEMBERSHIP_ALREADY_EXISTS`
  rpc AddPolicyBindingMembers(AddPolicyBindingMembersRequest) returns (Policy);

  // Removes members from a Policy binding.
  //
  // Error reasons:
  // * `POLICY_NOT_FOUND`
  // * `ETAG_MISMATCH`
  // * `ROLE_NOT_FOUND`
  // * `PRINCIPAL_NOT_FOUND`
  // * `PRINCIPAL_TYPE_NOT_SUPPORTED`
  // * `POLICY_BINDING_MEMBERSHIP_NOT_FOUND`
  rpc RemovePolicyBindingMembers(RemovePolicyBindingMembersRequest)
      returns (Policy);
}

message GetPolicyRequest {
  string policy_resource_id = 1;
}

message LookupPolicyRequest {
  oneof lookup_key {
    string protected_resource_name = 1;
  }
}

message AddPolicyBindingMembersRequest {
  string policy_resource_id = 1;
  string role_resource_id = 2;
  repeated string member_principal_resource_ids = 3;

  // Current etag. Optional.
  string etag = 4;
}

message RemovePolicyBindingMembersRequest {
  string policy_resource_id = 1;
  string role_resource_id = 2;
  repeated string member_principal_resource_ids = 3;

  // Current etag. Optional.
  string etag = 4;
}
