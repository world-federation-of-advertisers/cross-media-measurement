// Copyright 2022 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.reporting.v1alpha;

import "google/api/field_behavior.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

option java_package = "org.wfanet.measurement.reporting.v1alpha";
option java_multiple_files = true;
option java_outer_classname = "TimeIntervalProto";

// A time interval.
message TimeInterval {
  // Start of the time interval, inclusive.
  google.protobuf.Timestamp start_time = 1
      [(google.api.field_behavior) = REQUIRED];
  // End of the time interval, exclusive. This must be later than the start
  // time.
  google.protobuf.Timestamp end_time = 2
      [(google.api.field_behavior) = REQUIRED];
}

// A list of time intervals with different start times and end times.
message TimeIntervals {
  // A list of time intervals.
  repeated TimeInterval time_intervals = 1
      [(google.api.field_behavior) = REQUIRED];
}

// A series of time intervals with the same length.
message PeriodicTimeInterval {
  // Start of the first time interval, inclusive.
  google.protobuf.Timestamp start_time = 1
      [(google.api.field_behavior) = REQUIRED];

  // Increment for each time interval. The first interval will be [start_time,
  // start_time + increment), the second [start_time + increment, start_time +
  // increment * 2) and so forth.
  //
  // TODO(@SanjayVas): Consider whether we want to use civil time instead.
  google.protobuf.Duration increment = 2
      [(google.api.field_behavior) = REQUIRED];

  // Number of intervals.
  int32 interval_count = 3 [(google.api.field_behavior) = REQUIRED];
}
