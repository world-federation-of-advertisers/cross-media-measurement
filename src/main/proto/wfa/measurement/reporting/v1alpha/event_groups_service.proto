// Copyright 2022 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.reporting.v1alpha;

import "google/api/resource.proto";
import "wfa/measurement/reporting/v1alpha/event_group.proto";

service EventGroups {
  // Lists `EventGroup`s. Results in a `PERMISSION_DENIED` error if attempting
  // to list `EventGroup`s that the authenticated user does not have access to.
  rpc ListEventGroups(ListEventGroupsRequest)
    returns (ListEventGroupsResponse) {
    option (google.api.http) = {
      get: "/v1alpha/{parent=dataProviders/data_provider}/eventGroups"
    };
    option (google.api.method_signature) = "parent";
  }
}

message ListEventGroupsRequest {
  // Resource key of the parent `DataProvider`. The wildcard ID (`-`) may be
  // used in place of the `DataProvider` ID to list across `DataProvider`s, in
  // which case a filter should be specified.
  string parent = 1
  [(google.api.resource_reference).type = "halo.wfanet.org/DataProvider"];

  // The maximum number of resources to return. See https://aip.dev/158.
  int32 page_size = 2;
  // A token from a previous call, specified to retrieve the next page. See
  // https://aip.dev/158.
  string page_token = 3;

  // Filter criteria. Repeated fields are treated as logical ORs, and multiple
  // fields specified as logical ANDs.
  message Filter {
    repeated string measurement_consumers = 1
    [(google.api.resource_reference).type =
      "halo.wfanet.org/MeasurementConsumer"];
  }
  // Result filter.
  Filter filter = 4;
}

message ListEventGroupsResponse {
  // The `EventGroup` resources.
  repeated EventGroup event_groups = 1;

  // A token that can be specified in a subsequent call to retrieve the next
  // page. See https://aip.dev/158.
  string next_page_token = 2;
}
