// Copyright 2022 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.reporting.v1alpha;

import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "wfa/measurement/reporting/v1alpha/metric.proto";
import "wfa/measurement/reporting/v1alpha/time_interval.proto";

option java_package = "org.wfanet.measurement.reporting.v1alpha";
option java_multiple_files = true;
option java_outer_classname = "ReportProto";

// Resource representing a report.
message Report {
  option (google.api.resource) = {
    type: "reporting.halo-cmm.org/Report"
    pattern: "measurementConsumers/{measurement_consumer}/reports/{report}"
  };

  // Resource name.
  string name = 1;

  // Representation of a Measurement Consumer entity.
  string measurement_consumer = 2 [(google.api.resource_reference) = {
    type: "halo.wfanet.org/MeasurementConsumer"
  }];

  // Map entry of `EventGroup` to filter predicate.
  message EventGroupFilter {
    // Key of the map entry, which is an `EventGroup` resource name. Required.
    string key = 1 [
      (google.api.field_behavior) = REQUIRED,
      (google.api.resource_reference) = {
        type: "reporting.halo-cmm.org/EventGroup"
      }
    ];

    // Filter predicate in CEL.
    string value = 2 [(google.api.field_behavior) = REQUIRED];
  }

  // A Map with `EventGroup`s as the keys and filter predicates as the values.
  repeated EventGroupFilter event_group_filters = 3
      [(google.api.field_behavior) = REQUIRED];

  // Types of time intervals for metric aggregation.
  oneof time {
    // A list of time intervals with different start times and end times.
    TimeIntervals time_intervals = 4;
    // A series of time intervals with the same length.
    PeriodicTimeInterval periodic_time_interval = 5;
  }

  // The metrics that are included in `Report`.
  repeated Metric metrics = 6 [(google.api.field_behavior) = REQUIRED];

  // Possible states of a `Report`.
  enum State {
    // Default value. This value is unused.
    STATE_UNSPECIFIED = 0;
    // Computation is running.
    RUNNING = 1;
    // Completed successfully. Terminal state.
    SUCCEEDED = 2;
    // Completed with failure. Terminal state.
    FAILED = 3;
  }

  // Report state.
  State state = 7 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Result in CSV format.
  string result = 8 [(google.api.field_behavior) = OUTPUT_ONLY];
}
