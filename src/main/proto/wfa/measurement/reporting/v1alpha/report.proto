// Copyright 2022 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.reporting.v1alpha;

import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "wfa/measurement/reporting/v1alpha/metric.proto";
import "wfa/measurement/reporting/v1alpha/time_interval.proto";

option java_package = "org.wfanet.measurement.reporting.v1alpha";
option java_multiple_files = true;
option java_outer_classname = "ReportProto";

// Resource representing a report.
message Report {
  option (google.api.resource) = {
    type: "reporting.halo-cmm.org/Report"
    pattern: "measurementConsumers/{measurement_consumer}/reports/{report}"
  };

  // Resource name.
  string name = 1;

  // Used as the prefix of the idempotency keys of internal measurements. This
  // value must be unique among `Report`s for the parent `MeasurementConsumer`.
  // TODO(@riemanli) Moved the idempotency key to request messages.
  string report_idempotency_key = 2 [(google.api.field_behavior) = REQUIRED];

  // Representation of a Measurement Consumer entity.
  string measurement_consumer = 3 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "halo.wfanet.org/MeasurementConsumer"
    }
  ];

  // Define the universe for all sets of event groups  in `metrics`.
  message EventGroupUniverse {
    // Map entry of `EventGroup` to filter predicate.
    message EventGroupEntry {
      // Key of the map entry, which is an `EventGroup` resource name.
      string key = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference) = {
          type: "reporting.halo-cmm.org/EventGroup"
        }
      ];

      // Filter predicate in CEL. If unspecified, evaluates to `true`.
      string value = 2;
    }

    // A Map with `EventGroup`s as the keys and filter predicates as the values.
    repeated EventGroupEntry event_group_entries = 1
        [(google.api.field_behavior) = REQUIRED];
  }

  // The universe that defines all sets of event groups in `metrics`. Events
  // from event groups that aren't listed here won't be included.
  EventGroupUniverse event_group_universe = 4
      [(google.api.field_behavior) = REQUIRED];

  // Types of time intervals for metric aggregation.
  // REQUIRED
  oneof time {
    // A list of time intervals with different start times and end times.
    TimeIntervals time_intervals = 5;
    // A series of time intervals with the same length.
    PeriodicTimeInterval periodic_time_interval = 6;
  }

  // The metrics that are included in `Report`.
  repeated Metric metrics = 7 [(google.api.field_behavior) = REQUIRED];

  // Possible states of a `Report`.
  enum State {
    // Default value. This value is unused.
    STATE_UNSPECIFIED = 0;
    // Computation is running.
    RUNNING = 1;
    // Completed successfully. Terminal state.
    SUCCEEDED = 2;
    // Completed with failure. Terminal state.
    FAILED = 3;
  }

  // Report state.
  State state = 8 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Set operation calculations are done for each set operation for a given
  // `Metric`, which is column by column.
  message Result {
    // A column with a header and values.
    message Column {
      // The header of the column.
      string column_header = 1;
      // Must be in the same order as `row_headers`.
      repeated double set_operations = 2;
    }
    // The measurement result of Reach, ImpressionCount, or WatchDuration
    message ScalarTable {
      // Must be in the same order as column's set_operations.
      repeated string row_headers = 1;
      // Must be in the same order as `row_headers`.
      repeated Column columns = 2;
    }
    // For Reach, ImpressionCount, or WatchDuration
    ScalarTable scalar_table = 1;

    // HistogramTable has an additional field frequency for each row, thus
    // different from ScalarTable.
    message HistogramTable {
      // Combine header and frequency as Row.
      message Row {
        // Must be in the same order as column's set_operations.
        string row_header = 1;
        // frequency of the row
        int32 frequency = 2;
      }
      // Must be in the same order as column's set_operations.
      repeated Row rows = 1;
      // Must be in the same order as row's `row_headers`.
      repeated Column columns = 2;
    }
    // Each HistogramTable contains the result of one frequency histogram
    // metric.
    repeated HistogramTable histogram_tables = 2;
  }

  // Set only when `state` is `SUCCEEDED`.
  Result result = 9 [(google.api.field_behavior) = OUTPUT_ONLY];
}
