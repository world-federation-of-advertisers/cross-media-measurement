// Copyright 2023 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.reporting.v2alpha;

import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/type/interval.proto";

option java_package = "org.wfanet.measurement.reporting.v2alpha";
option java_multiple_files = true;
option java_outer_classname = "MetricProto";

// The specification of a metric that can be selected to be in a `Report`.
message MetricSpec {
  // Parameters for differential privacy (DP).
  //
  // For detail, refer to "Dwork, C. and Roth, A., 2014. The algorithmic
  // foundations of differential privacy. Foundations and Trends in Theoretical
  // Computer Science, 9(3-4), pp.211-407."
  message DifferentialPrivacyParams {
    optional double epsilon = 1;
    optional double delta = 2;
  }

  // Specifies a range of VIDs to be sampled.
  message VidSamplingInterval {
    // The start of the sampling interval in [0, 1)
    float start = 1;
    // The width of the sampling interval.
    //
    // start + width cannot be larger than 1.
    float width = 2 [(google.api.field_behavior) = REQUIRED];
  }

  message SamplingAndPrivacyParams {
    // Differential privacy parameters.
    //
    // If any of the fields are not specified, the service implementation will
    // choose values.
    DifferentialPrivacyParams privacy_params = 1
        [(google.api.field_behavior) = REQUIRED];

    // Specifies the range of VIDs to be sampled.
    //
    // If not specified, the service implementation will choose values for all
    // the fields in the message.
    VidSamplingInterval vid_sampling_interval = 2;
  }

  message ReachAndFrequencySamplingAndPrivacyParams {
    // Differential privacy parameters for reach.
    //
    // If any of the fields are not specified, the service implementation will
    // choose values.
    DifferentialPrivacyParams reach_privacy_params = 1
        [(google.api.field_behavior) = REQUIRED];

    // Differential privacy parameters for frequency.
    //
    // If any of the fields are not specified, the service implementation will
    // choose values.
    DifferentialPrivacyParams frequency_privacy_params = 2
        [(google.api.field_behavior) = REQUIRED];

    // Specifies the range of VIDs to be sampled.
    //
    // If not specified, the service implementation will choose values for all
    // the fields in the message.
    VidSamplingInterval vid_sampling_interval = 3;
  }

  // Parameters that are used to generate `Reach` metrics. Applied on a
  // per-Measurement basis.
  message ReachParams {
    // Differential privacy parameters for reach.
    DifferentialPrivacyParams privacy_params = 1 [deprecated = true];

    // Parameters for multiple DataProviders. Will be required in a future
    // release. If set, `single_data_provider_params` needs to be set. Takes
    // precedence over `privacy_params`.
    SamplingAndPrivacyParams multiple_data_provider_params = 2;

    // Parameters for a single DataProvider. Will be required in a future
    // release. If set, `multiple_data_provider_params` needs to be set.
    SamplingAndPrivacyParams single_data_provider_params = 3;
  }

  // Parameters that are used to generate `ReachAndFrequency` metrics. Applied
  // on a per-Measurement basis.
  message ReachAndFrequencyParams {
    // Differential privacy parameters for reach and multiple DataProviders.
    DifferentialPrivacyParams reach_privacy_params = 1 [deprecated = true];
    // Differential privacy parameters for frequency distribution.
    DifferentialPrivacyParams frequency_privacy_params = 2 [deprecated = true];

    // Parameters for multiple DataProviders. Will be required in a future
    // release. If set, `single_data_provider_params` needs to be set. Takes
    // precedence over `reach_privacy_params` and `frequency_privacy_params`.
    ReachAndFrequencySamplingAndPrivacyParams multiple_data_provider_params = 4;

    // Parameters for a single DataProvider. Will be required in a future
    // release. If set, `multiple_data_provider_params` needs to be set.
    ReachAndFrequencySamplingAndPrivacyParams single_data_provider_params = 5;

    // Maximum frequency cut-off value in frequency histogram.
    //
    // Counts with frequency higher than `maximum_frequency` will be aggregated
    // together. If not set, the default value will be used and outputted here.
    int32 maximum_frequency = 3;
  }
  // Parameters that are used to generate `Impression Count` metrics. Applied on
  // a per-Measurement basis.
  message ImpressionCountParams {
    // Differential privacy parameters.
    DifferentialPrivacyParams privacy_params = 1 [deprecated = true];

    // Parameters for impression. Will be required in a future release. Takes
    // precedence over `privacy_params`.
    SamplingAndPrivacyParams params = 3;

    // Maximum frequency per user that will be included in this metric. Enforced
    // on a per EDP basis.
    //
    // Setting the maximum frequency for each user is for noising the impression
    // estimation with the noise proportional to maximum_frequency_per_user to
    // guarantee epsilon-DP, i.e. the higher maximum_frequency_per_user, the
    // larger the variance. On the other hand, if maximum_frequency_per_user is
    // too small, there's a truncation bias. Through optimization, the
    // recommended value for maximum_frequency_per_user = 60 for the case with
    // over 1M audience size.
    // If not set, the default value will be used and outputted here.
    optional int32 maximum_frequency_per_user = 2;
  }
  // Parameters that are used to generate `Watch Duration` metrics. Applied on a
  // per-Measurement basis.
  message WatchDurationParams {
    // Differential privacy parameters.
    DifferentialPrivacyParams privacy_params = 1 [deprecated = true];

    // Parameters for watch duration. Will be required in a future release.
    // Takes precedence over `privacy_params`.
    SamplingAndPrivacyParams params = 3;

    // Maximum watch duration per user that will be included in this metric.
    //
    // Recommended maximum_watch_duration_per_user = cap on the total watch
    // duration of all the impressions of a user = 4000 sec for the case with
    // over 1M audience size. Enforced on a per EDP basis.
    // If not set, the default value will be used and outputted here.
    google.protobuf.Duration maximum_watch_duration_per_user = 2;
  }

  // Parameters that are used to generate `Population` metrics.
  message PopulationCountParams {}

  // Types of metric with parameters.
  oneof type {
    // The count of unique audiences reached given a set of event groups.
    ReachParams reach = 1 [(google.api.field_behavior) = IMMUTABLE];
    // The reach-and-frequency given a set of event groups.
    //
    // Currently, we only support union operations for reach-and-frequency. Any
    // other types of operations won't guarantee the correctness of the result.
    ReachAndFrequencyParams reach_and_frequency = 2
        [(google.api.field_behavior) = IMMUTABLE];
    // The impression count given a set of event groups.
    ImpressionCountParams impression_count = 3
        [(google.api.field_behavior) = IMMUTABLE];
    // The watch duration given a set of event groups.
    WatchDurationParams watch_duration = 4
        [(google.api.field_behavior) = IMMUTABLE];
    // The count of unique members in a population
    PopulationCountParams population_count = 5
        [(google.api.field_behavior) = IMMUTABLE];
  }

  // Range of VIDs that will be included in this measurement
  //
  // If this field is unspecified in a request message, the service
  // implementation will use the value specified in the system defaults.
  VidSamplingInterval vid_sampling_interval = 6 [deprecated = true];
}

// Statistics of a scalar value
message UnivariateStatistics {
  // The standard deviation of the associated scalar variable value.
  //
  // Can be used to find different confidence intervals.
  double standard_deviation = 1;
}

// The calculation result of a metric
message MetricResult {
  // Reach result format.
  message ReachResult {
    // Reach value.
    int64 value = 1;
    // Univariate statistics of the reach value above.
    //
    // Only set when all source Measurements contain sufficient information to
    // calculate univariate statistics.
    UnivariateStatistics univariate_statistics = 2;
  }
  // Histogram result format.
  message HistogramResult {
    // Bin result format.
    message BinResult {
      // The result value of a bin.
      double value = 1;
    }
    // The bin in a histogram.
    message Bin {
      // The label of the bin.
      string label = 1;
      // The result of the bin.
      BinResult bin_result = 2;

      // Univariate statistics of the result at this bin.
      //
      // Only set when all source Measurements contain sufficient information to
      // calculate univariate statistics.
      UnivariateStatistics result_univariate_statistics = 3;
      // Univariate statistics of the relative result at this bin.
      //
      // Only set when all source Measurements contain sufficient information to
      // calculate univariate statistics. Relative result = (bin value) / (sum
      // of all bin values)
      UnivariateStatistics relative_univariate_statistics = 4;
      // Univariate statistics of the k+ count from the current bin (i.e. k-th
      // bin, inclusive) to the last bin (inclusive).
      //
      // Only set when all source Measurements contain sufficient information to
      // calculate univariate statistics. A K+ count is the sum of the values
      // from the k-th bin to the last bin.
      UnivariateStatistics k_plus_univariate_statistics = 5;
      // Univariate statistics of the relative k+ count from the current bin
      // (i.e. k-th bin, inclusive) to the last bin (inclusive).
      //
      // Only set when all source Measurements contain sufficient information to
      // calculate univariate statistics. A relative K+ count = (K+ count) /
      // (sum of all bin values)
      UnivariateStatistics relative_k_plus_univariate_statistics = 6;
    }
    // The bins that form a histogram. Ordering is not guaranteed.
    repeated Bin bins = 1;
  }

  // Reach-and-frequency result format.
  message ReachAndFrequencyResult {
    ReachResult reach = 1;
    HistogramResult frequency_histogram = 2;
  }

  // Impression count result format.
  message ImpressionCountResult {
    // Impression value.
    int64 value = 1;
    // Univariate statistics of the impression value above.
    //
    // Only set when all of the set operations for the result are unions and all
    // source Measurements contain sufficient information to calculate
    // univariate statistics.
    UnivariateStatistics univariate_statistics = 2;
  }
  // Watch duration result format.
  message WatchDurationResult {
    // Watch duration value in second.
    double value = 1;
    // Univariate statistics of the watch duration value above.
    //
    // Only set when all of the set operations for the result are unions and all
    // source Measurements contain sufficient information to calculate
    // univariate statistics.
    UnivariateStatistics univariate_statistics = 2;
  }

  // Population count result format.
  message PopulationCountResult {
    // Population value.
    int64 value = 1;
  }

  // The metric result
  oneof result {
    // Reach result.
    ReachResult reach = 3;
    // Reach-and-frequency result.
    ReachAndFrequencyResult reach_and_frequency = 4;
    // Impression count result.
    ImpressionCountResult impression_count = 5;
    // Watch duration result.
    WatchDurationResult watch_duration = 6;
    // Population result.
    PopulationCountResult population_count = 7;
  }

  // List of resource names representing `Measurement`s from the CMMS public
  // API that were used to calculate the `result` in this `MetricResult`.
  repeated string cmms_measurements = 8 [
    (google.api.resource_reference).type = "halo.wfanet.org/Measurement",
    (google.api.field_behavior) = OUTPUT_ONLY
  ];
}

// A resource that will calculate a particular quantity as defined by
// `MetricSpec` cumulatively over a time interval for the given `ReportingSet`.
//
// The metric value once calculated is stored in `MetricResult`.
message Metric {
  option (google.api.resource) = {
    type: "reporting.halo-cmm.org/Metric"
    pattern: "measurementConsumers/{measurement_consumer}/metrics/{metric}"
  };

  // Resource name
  string name = 1;

  // The resource name of the reporting set to calculate the metric on.
  string reporting_set = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_behavior) = IMMUTABLE,
    (google.api.resource_reference) = {
      type: "reporting.halo-cmm.org/ReportingSet"
    }
  ];

  // The time over which to calculate the metric cumulatively.
  google.type.Interval time_interval = 3 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_behavior) = IMMUTABLE
  ];

  // The specification of what metric to calculate
  MetricSpec metric_spec = 4 [(google.api.field_behavior) = REQUIRED];

  // Additional filters that will be combined with AND boolean operation and
  // applied to the reporting set. If unspecified, evaluates to `true`
  repeated string filters = 5 [(google.api.field_behavior) = IMMUTABLE];

  // Possible states of a `Metric`.
  enum State {
    // Default value. This value is unused.
    STATE_UNSPECIFIED = 0;
    // Computation is running.
    RUNNING = 1;
    // Completed successfully. Terminal state.
    SUCCEEDED = 2;
    // Completed with failure. Terminal state.
    FAILED = 3;
  }

  // Metric state.
  State state = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The time when the metric is successfully created.
  google.protobuf.Timestamp create_time = 7
      [(google.api.field_behavior) = OUTPUT_ONLY];

  // The result of calculating the metric.
  MetricResult result = 8 [(google.api.field_behavior) = OUTPUT_ONLY];
}
