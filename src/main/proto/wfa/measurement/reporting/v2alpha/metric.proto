// Copyright 2022 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.reporting.v2alpha;

import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "wfa/measurement/reporting/v2alpha/time_interval.proto";
import "wfa/measurement/reporting/v2alpha/reporting_set.proto";

option java_package = "org.wfanet.measurement.reporting.v2alpha";
option java_multiple_files = true;
option java_outer_classname = "MetricProto";

// The specification of a metric that can be selected to be in a `Report`.
message MetricSpec {
  // Parameters that are used to generate `Reach` metric.
  message ReachParams {}
  // Parameters that are used to generate `Frequency Histogram` metric.
  message FrequencyHistogramParams {
    // Maximum frequency cut-off value in the frequency histogram. Counts with
    // frequency higher than `max_frequency` will be aggregated together.
    int32 maximum_frequency_per_user = 1;
  }
  // Parameters that are used to generate `Impression Count` metric.
  message ImpressionCountParams {
    // Maximum frequency per user that will be included in this measurement.
    int32 maximum_frequency_per_user = 1;
  }
  // Parameters that are used to generate `Watch Duration` metric.
  message WatchDurationParams {
    // Maximum frequency per user that will be included in this measurement.
    int32 maximum_frequency_per_user = 1;
    // Maximum watch duration per user that will be included in this
    // measurement.
    int32 maximum_watch_duration_per_user = 2;
  }

  // Types of metric with parameters.
  oneof metric_type {
    // The count of unique audiences reached given a set of event groups.
    ReachParams reach = 1;
    // The reach frequency histogram given a set of event groups. Currently, we
    // only support union operations for frequency histograms. Any other
    // operations on frequency histograms won't guarantee the result is a
    // frequency histogram.
    FrequencyHistogramParams frequency_histogram = 2;
    // The impression count given a set of event groups.
    ImpressionCountParams impression_count = 3;
    // The watch duration given a set of event groups.
    WatchDurationParams watch_duration = 4;
  }
}

// The calculation result of a metric
message MetricResult {
  // The metric result in scalar type. Ex: reach, impression count.
  message ScalarResult {
    // The value of the scalar result
    double value = 1;
  }
  // The metric result in histogram type. Ex: frequency histogram.
  message HistogramResult {
    // The histogram bin with a label and a value.
    message HistogramBin {
      // The label of the bin.
      string label = 1;
      // The value of the bin.
      double value = 2;
    }
    // The histogram bins that form a histogram.
    repeated HistogramBin bins = 1;
  }
  oneof result {
    // Reach result
    ScalarResult reach = 1;
    // Frequency histogram result
    HistogramResult frequency_histogram = 2;
    // Impression count result
    ScalarResult impression_count = 3;
    // Watch duration result in seconds.
    ScalarResult watch_duration = 4;
  }
}

// Definition of a metric for a `Report` in terms of set operations.
message Metric {
  option (google.api.resource) = {
    type: "reporting.halo-cmm.org/Metric"
    pattern: "measurementConsumers/{measurement_consumer}/metrics/{metric}"
  };
  // Resource name
  string name = 1 [(google.api.field_behavior) = REQUIRED];

  // The resource name of the reporting set to calculate the metric on.
  ReportingSet reporting_set = 2 [(google.api.field_behavior) = REQUIRED];

  // The time over which to calculate the metric.
  TimeInterval time_interval = 3 [(google.api.field_behavior) = REQUIRED];

  // The specification of what metric to calculate
  MetricSpec metric_spec = 4 [(google.api.field_behavior) = REQUIRED];

  // The resource name of what model to use.
  // If model is empty, compute the associated metric with the reporting
  // set defined above using kingdom measurements; otherwise, use the model
  // inferences.
  // The user needs to provide a model that can cover all time intervals and all
  // primitive reporting sets defined in this metric.
  string model = 5;

  // The result of calculating the metric.
  MetricResult result = 6 [(google.api.field_behavior) = OUTPUT_ONLY];
}
