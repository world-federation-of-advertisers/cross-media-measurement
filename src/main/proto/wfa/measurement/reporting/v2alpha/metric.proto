// Copyright 2023 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.reporting.v2alpha;

import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "wfa/measurement/reporting/v2alpha/time_interval.proto";
import "wfa/measurement/reporting/v2alpha/reporting_set.proto";

option java_package = "org.wfanet.measurement.reporting.v2alpha";
option java_multiple_files = true;
option java_outer_classname = "MetricProto";

// The specification of a metric that can be selected to be in a `Report`.
message MetricSpec {
  // Parameters that are used to generate `Reach` metric.
  message ReachParams {}
  // Parameters that are used to generate `Frequency Histogram` metric.
  message FrequencyHistogramParams {
    // Maximum frequency cut-off value in the frequency histogram. Counts with
    // frequency higher than `max_frequency` will be aggregated together.
    int32 maximum_frequency_per_user = 1
        [(google.api.field_behavior) = REQUIRED];
  }
  // Parameters that are used to generate `Impression Count` metric.
  message ImpressionCountParams {
    // Maximum frequency per user that will be included in this metric. Enforced
    // on a per EDP basis.
    //
    // Setting the maximum frequency for each user is for noising the impression
    // estimation with the noise proportional to maximum_frequency_per_user to
    // guarantee epsilon-DP, i.e. the higher maximum_frequency_per_user, the
    // larger the variance. On the other hand, if maximum_frequency_per_user is
    // too small, there's a truncation bias. Through optimization, the
    // recommended value for maximum_frequency_per_user = 60 for the case with
    // over 1M audience size.
    int32 maximum_frequency_per_user = 1
        [(google.api.field_behavior) = REQUIRED];
  }
  // Parameters that are used to generate `Watch Duration` metric.
  message WatchDurationParams {
    // Maximum frequency per user that will be included in this metric. Enforced
    // on a per EDP basis.
    int32 maximum_frequency_per_user = 1
        [(google.api.field_behavior) = REQUIRED];
    // Maximum watch duration per user in second that will be included in this
    // metric.
    //
    // Recommended maximum_watch_duration_per_user = cap on the total watch
    // duration of all the impressions of a user = 4000 sec for the case with
    // over 1M audience size. Enforced on a per EDP basis.
    int32 maximum_watch_duration_per_user = 2
        [(google.api.field_behavior) = REQUIRED];
  }

  // Types of metric with parameters.
  oneof type {
    // The count of unique audiences reached given a set of event groups.
    ReachParams reach = 1;
    // The reach frequency histogram given a set of event groups.
    //
    // Currently, we only support union operations for frequency histograms. Any
    // other operations on frequency histograms won't guarantee the result is a
    // frequency histogram.
    FrequencyHistogramParams frequency_histogram = 2;
    // The impression count given a set of event groups.
    ImpressionCountParams impression_count = 3;
    // The watch duration given a set of event groups.
    WatchDurationParams watch_duration = 4;
  }
}

// The calculation result of a metric
message MetricResult {
  // Histogram result format.
  message Histogram {
    // The bin in a histogram
    message Bin {
      // The label of the bin.
      string bin_label = 1;
      // The value of the bin.
      double value = 2;
    }
    // The bins that form a histogram. Ordering is not guaranteed.
    repeated Bin bins = 1;
  }

  // The metric result
  oneof result {
    // Reach value.
    int64 reach = 3;
    // Histogram result.
    Histogram frequency_histogram = 4;
    // Impression counts.
    int64 impression_count = 5;
    // Watch duration in second.
    double watch_duration = 6;
  }
}

// A resource that will calculate a particular quantity as defined by
// `MetricSpec` cumulatively over a time interval for the given `ReportingSet`.
//
// The metric value once calculated is stored in `MetricResult`.
message Metric {
  option (google.api.resource) = {
    type: "reporting.halo-cmm.org/Metric"
    pattern: "measurementConsumers/{measurement_consumer}/metrics/{metric}"
  };
  // Resource name
  string name = 1 [(google.api.field_behavior) = REQUIRED];

  // The resource name of the reporting set to calculate the metric on.
  ReportingSet reporting_set = 2 [(google.api.field_behavior) = REQUIRED];

  // The time over which to calculate the metric cumulatively.
  TimeInterval time_interval = 3 [(google.api.field_behavior) = REQUIRED];

  // The specification of what metric to calculate
  MetricSpec metric_spec = 4 [(google.api.field_behavior) = REQUIRED];

  // Possible states of a `Metric`.
  enum State {
    // Default value. This value is unused.
    STATE_UNSPECIFIED = 0;
    // Computation is running.
    RUNNING = 1;
    // Completed successfully. Terminal state.
    SUCCEEDED = 2;
    // Completed with failure. Terminal state.
    FAILED = 3;
  }

  // Metric state.
  State state = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The result of calculating the metric.
  MetricResult result = 6 [(google.api.field_behavior) = OUTPUT_ONLY];
}
