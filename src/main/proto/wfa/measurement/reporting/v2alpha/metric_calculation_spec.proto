// Copyright 2023 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.reporting.v2alpha;

import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/type/date.proto";
import "google/type/dayofweek.proto";
import "wfa/measurement/reporting/v2alpha/metric.proto";

option java_package = "org.wfanet.measurement.reporting.v2alpha";
option java_multiple_files = true;
option java_outer_classname = "MetricCalculationSpecProto";

// Resource representing a MetricCalculationSpec.
//
// Reused across Reports.
message MetricCalculationSpec {
  option (google.api.resource) = {
    type: "reporting.halo-cmm.org/MetricCalculationSpec"
    pattern: "measurementConsumers/{measurement_consumer}/metricCalculationSpecs/{metric_calculation_spec}"
  };

  reserved 6;

  // Resource name.
  string name = 1;

  // The display name will be used as the display name in
  // `Report.MetricCalculationResult`.
  string display_name = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_behavior) = IMMUTABLE
  ];

  // A collection of metrics.
  repeated MetricSpec metric_specs = 3 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_behavior) = IMMUTABLE
  ];

  // An additional event filter that will be conjoined to any filters
  // present on the `ReportingSet` provided as part of the
  // `Report.ReportingMetricEntry`.
  string filter = 4 [(google.api.field_behavior) = IMMUTABLE];

  // Contain the grouping predicates.
  message Grouping {
    // The CEL expressions that are applied to the corresponding event message
    // for the specified event groups. Each predicate is an element of this
    // grouping set. They will used in the Cartesian product with the elements
    // in other groupings.
    // All fields referenced in one of these predicate expressions must be
    // defined for events from all of the event groups referenced.
    repeated string predicates = 1 [(google.api.field_behavior) = REQUIRED];
  }

  // The final set of groups is the Cartesian product of `groupings` and will
  // fan out multiple metrics per metric spec and per time interval (time
  // intervals are from `time` in `Report`), i.e. one metric per element of the
  // Cartesian product of the groupings with a single metric type and a single
  // time interval. Predicates must be unique.
  repeated Grouping groupings = 5 [(google.api.field_behavior) = IMMUTABLE];

  // Describes the frequencies at which results are generated.
  message FrequencySpec {
    // When Daily is selected the time specified by the report_start field in
    // the Report is used to anchor the start time for each day.
    message Daily {}

    // When Weekly is selected the first Metrics are calculated on the first
    // occurence of the speciied day of week on or after the report_start field
    // in the Report.
    // For example, if day_of_week is Tuesday and the start time is a Tuesday
    // then the first Metrics are calcualted for the day specified in
    // start_time. But if day_of_wek is Monday and the start time is a Tuesday
    // then the first Metrics are calcualted for the first Monday after the
    // start time.
    message Weekly {
      google.type.DayOfWeek day_of_week = 1
          [(google.api.field_behavior) = REQUIRED];
    }

    // When Monthly is slected the first Metrics are calulated on the first
    // occurence of the specified day of month on or after the report_start
    // field in the Report. This behavior is similar to that of Weekly.
    message Monthly {
      // If this represents a date that is greater than the end of the month,
      // then it will be coerced to the end of the month. Cannot be less than 1.
      int32 day_of_month = 1 [(google.api.field_behavior) = REQUIRED];
    }

    // The frequency at which the time interval is divided.
    oneof frequency {
      Daily daily = 1;
      Weekly weekly = 2;
      Monthly monthly = 3;
    }
  }
  FrequencySpec frequency_spec = 7 [(google.api.field_behavior) = REQUIRED];

  message Window {
    message TrailingWindow {
      // Represents how much of the `increment` to go back.
      int32 count = 1 [(google.api.field_behavior) = REQUIRED];

      enum Increment {
        // Default value if the increment is omitted. Must not be used.
        INCREMENT_UNSPECIFIED = 0;
        DAY = 1;
        WEEK = 2;
        MONTH = 3;
      }
      Increment increment = 2 [(google.api.field_behavior) = REQUIRED];
    }

    // How far back the Metrics at each period (as defined by the Frequency)
    // cover. Required.
    oneof window {
      // The amount of time to look back for a Metric.
      TrailingWindow trailing_window = 1;
      // Metrics start from the report start time as specified in the Report.
      boolean report_start_time = 2;
    }
  }
  Window window = 8 [(google.api.field_behavior) = REQUIRED];
}
