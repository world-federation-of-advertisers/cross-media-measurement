// Copyright 2023 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.reporting.v2alpha;

import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/type/dayofweek.proto";
import "wfa/measurement/reporting/v2alpha/metric.proto";

option java_package = "org.wfanet.measurement.reporting.v2alpha";
option java_multiple_files = true;
option java_outer_classname = "MetricCalculationSpecProto";

// Resource representing a MetricCalculationSpec.
//
// Reused across Reports.
message MetricCalculationSpec {
  option (google.api.resource) = {
    type: "reporting.halo-cmm.org/MetricCalculationSpec"
    pattern: "measurementConsumers/{measurement_consumer}/metricCalculationSpecs/{metric_calculation_spec}"
  };

  reserved 6;

  // Resource name.
  string name = 1;

  // The display name will be used as the display name in
  // `Report.MetricCalculationResult`.
  string display_name = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_behavior) = IMMUTABLE
  ];

  // A collection of metrics.
  repeated MetricSpec metric_specs = 3 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_behavior) = IMMUTABLE
  ];

  // An additional event filter that will be conjoined to any filters
  // present on the `ReportingSet` provided as part of the
  // `Report.ReportingMetricEntry`.
  string filter = 4 [(google.api.field_behavior) = IMMUTABLE];

  // Contain the grouping predicates.
  message Grouping {
    // The CEL expressions that are applied to the corresponding event message
    // for the specified event groups. Each predicate is an element of this
    // grouping set. They will used in the Cartesian product with the elements
    // in other groupings.
    // All fields referenced in one of these predicate expressions must be
    // defined for events from all of the event groups referenced.
    repeated string predicates = 1 [(google.api.field_behavior) = REQUIRED];
  }

  // The final set of groups is the Cartesian product of `groupings` and will
  // fan out multiple metrics per metric spec and per time interval (time
  // intervals are from `time` in `Report`), i.e. one metric per element of the
  // Cartesian product of the groupings with a single metric type and a single
  // time interval. Predicates must be unique.
  repeated Grouping groupings = 5 [(google.api.field_behavior) = IMMUTABLE];

  // Describes the frequencies at which metrics are generated.
  message MetricFrequencySpec {
    // Specification for a daily frequency.
    message Daily {}

    // Specification for a weekly frequency.
    message Weekly {
      google.type.DayOfWeek day_of_week = 1
          [(google.api.field_behavior) = REQUIRED];
    }

    // Specification for a monthly frequency.
    message Monthly {
      // Cannot be less than 1.
      int32 day_of_month = 1 [(google.api.field_behavior) = REQUIRED];
    }

    // The frequency at which time intervals are created. Anchored by the
    // time in `reporting_interval.report_start` in a `Report`. Required.
    oneof frequency {
      // A time interval is created for each day.
      Daily daily = 1;
      // A time interval is created for each week, starting on the first
      // occurrence of the `day_of_week`. If `report_start` date is Monday and
      // `day_of_week` is Tuesday, the first time interval will be created for
      // the following day.
      Weekly weekly = 2;
      // A time interval is created for each month, starting on the first
      // occurrence of the `day_of_month`. If `report_start` date is the 1st of
      // the month and `day_of_month` is 14, the first time interval will be
      // created starting with the 14th of that month. If 'day_of_month` is
      // larger than the amount of days the month has, a time interval will be
      // created for the end of the month.
      Monthly monthly = 3;
    }
  }

  // The `MetricFrequencySpec` for this `MetricCalculationSpec`. Used by a
  // `Report` to determine what the time intervals are when using this
  // `MetricCalculationSpec`.
  //
  // If set, the combination of this and `trailing_window` will be used to
  // determine the time intervals for a `Report` using this
  // `MetricCalculationSpec`.
  // If not set, the time intervals in a `Report` will be completely up to the
  // `Report.
  MetricFrequencySpec metric_frequency_spec = 8
      [(google.api.field_behavior) = IMMUTABLE];

  // How far back the `Metric`s at each period (as defined by
  // `metric_frequency_spec`) cover.
  message TrailingWindow {
    // Represents how much of the `increment` to go back.
    int32 count = 1 [(google.api.field_behavior) = REQUIRED];

    enum Increment {
      // Default value if the increment is omitted. Must not be used.
      INCREMENT_UNSPECIFIED = 0;
      DAY = 1;
      WEEK = 2;
      MONTH = 3;
    }
    Increment increment = 2 [(google.api.field_behavior) = REQUIRED];
  }

  // The `TrailingWindow` for this `MetricCalculationSpec`. The beginning of the
  // time covered is bounded by `ReportingInterval.report_start`.
  //
  // If set, but `metric_frequency_spec` is not, an error will be thrown.
  // If set and `metric_frequency_spec` is also set, the combination of this
  // and `metric_frequency_spec` will be used to determine the time intervals
  // for a `Report` using this `MetricCalculationSpec`.
  // If not set and `metric_frequency_spec` is set, the time intervals for a
  // `Report` using this `MetricCalculationSpec` will all start from
  // `ReportingInterval.report_start`.
  // If not set and `metric_frequency_spec` is also not set, then this is not
  // used for determining the time intervals for a `Report`.
  TrailingWindow trailing_window = 9 [(google.api.field_behavior) = IMMUTABLE];

  // A map of arbitrary key-value pairs to support tagging of
  // `MetricCalculationSpec`s for upstream use by UIs and other rich clients.
  map<string, string> tags = 7 [(google.api.field_behavior) = IMMUTABLE];
}
