// Copyright 2023 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.reporting.v2alpha;

import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/timestamp.proto";
import "wfa/measurement/reporting/v2alpha/metric.proto";
import "wfa/measurement/reporting/v2alpha/time_interval.proto";

option java_package = "org.wfanet.measurement.reporting.v2alpha";
option java_multiple_files = true;
option java_outer_classname = "ReportProto";

// Resource representing a report.
//
// With the time range defined in `Report`, each ReportingMetric is expanded to
// multiple `Metric` by using all the combinations of (time, metric type,
// grouping slice), i.e. the Cartesian product of time intervals, metric types,
// and grouping slices. Grouping slices are generated by the Cartesian product
// of `Grouping`s defined in `MetricCalculationSpec`.
message Report {
  option (google.api.resource) = {
    type: "reporting.halo-cmm.org/Report"
    pattern: "measurementConsumers/{measurement_consumer}/reports/{report}"
  };

  // Resource name.
  string name = 1;

  // Contain the grouping predicates.
  message Grouping {
    // The CEL expressions that are applied to the corresponding event message
    // for the specified event groups. Each predicate is an element of this
    // grouping set. They will used in the Cartesian product with the elements
    // in other groupings.
    // All fields referenced in one of these predicate expressions must be
    // defined for events from all of the event groups referenced.
    repeated string predicates = 1 [(google.api.field_behavior) = REQUIRED];
  }
  // The specification of metric calculations.
  message MetricCalculationSpec {
    // The display name will be used as the display name in
    // `MetricCalculationResult`.
    string display_name = 1 [
      (google.api.field_behavior) = REQUIRED,
      (google.api.field_behavior) = IMMUTABLE
    ];

    // A collection of metrics.
    repeated MetricSpec metric_specs = 2 [
      (google.api.field_behavior) = REQUIRED,
      (google.api.field_behavior) = IMMUTABLE
    ];
    // The final set of groups is the Cartesian product of `groupings` and will
    // fan out multiple metrics per metric spec and per time interval, i.e.
    // one metric per element of the Cartesian product of the groupings with a
    // single metric type and a single time interval.
    repeated Grouping groupings = 3 [(google.api.field_behavior) = IMMUTABLE];
    // Whether the results for a given time interval is cumulative with those of
    // previous time intervals.
    // Only supported when using `PeriodicTimeInterval`.
    bool cumulative = 4 [(google.api.field_behavior) = IMMUTABLE];
  }
  // The specification of metric calculation for a reporting set.
  message ReportingMetricCalculationSpec {
    // A collection of metric calculations.
    repeated MetricCalculationSpec metric_calculation_specs = 1 [
      (google.api.field_behavior) = REQUIRED,
      (google.api.field_behavior) = IMMUTABLE
    ];
  }

  // Map entry of `ReportingSet` to `ReportingMetricCalculationSpec`. Each entry
  // defines the metric calculations with a reporting set.
  message ReportingMetricEntry {
    // Key of the map entry.
    string key = 1 [
      (google.api.field_behavior) = REQUIRED,
      (google.api.resource_reference) = {
        type: "reporting.halo-cmm.org/ReportingSet"
      }
    ];
    // Value of the map entry.
    ReportingMetricCalculationSpec value = 2
        [(google.api.field_behavior) = IMMUTABLE];
  }

  // The calculations defined for specific reporting sets.
  repeated ReportingMetricEntry reporting_metric_entries = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_behavior) = IMMUTABLE
  ];

  // Types of time intervals for metric aggregation.
  // REQUIRED
  oneof time {
    // A list of time intervals with different start times and end times.
    TimeIntervals time_intervals = 3;
    // A series of time intervals with the same length.
    PeriodicTimeInterval periodic_time_interval = 4;
  }

  // Possible states of a `Report`.
  enum State {
    // Default value. This value is unused.
    STATE_UNSPECIFIED = 0;
    // Computation is running.
    RUNNING = 1;
    // Completed successfully. Terminal state.
    SUCCEEDED = 2;
    // Completed with failure. Terminal state.
    FAILED = 3;
  }

  // Report state.
  State state = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The result of `MetricCalculationSpec` contains multiple results at the
  // level of granularity of single time interval and single group of the
  // Cartesian product of groupings.
  message MetricCalculationResult {
    // The name of the `MetricCalculationResult`.
    string display_name = 1;

    // The reporting set associated with this `MetricCalculationSpec`.
    string reporting_set = 2 [(google.api.resource_reference) = {
      type: "reporting.halo-cmm.org/ReportingSet"
    }];

    // Whether the results for a given time interval is cumulative with those of
    // previous time intervals.
    // Only supported when using `PeriodicTimeInterval`.
    bool cumulative = 3;

    // Contains the attributes of the result, including the group of predicates,
    // time interval, and metric result.
    message ResultAttribute {
      // Lists the predicates in the group which is one of the groups in the
      // Cartesian product of groupings.
      repeated string grouping_predicates = 1;

      // The time interval associated with the metric calculation.
      //
      // If `cumulative` in `MetricCalculationSpec` is true, the metric result
      // is calculated cumulatively from the first start time defined in the
      // report to the end of this time interval. Otherwise, the result is
      // calculated cumulatively over this time interval.
      TimeInterval time_interval = 2;

      // The metric result calculated on the reporting set with the setup in the
      // attribute.
      MetricResult metric_result = 3;
    }
    // The number of results is equal to the size of the Cartesian product of
    // groupings, time intervals, and metric types.
    repeated ResultAttribute result_attributes = 4;
  }

  // The time when the report is successfully created.
  google.protobuf.Timestamp create_time = 6
      [(google.api.field_behavior) = OUTPUT_ONLY];

  // Set only when `state` is `SUCCEEDED`.
  repeated MetricCalculationResult metric_calculation_results = 7
      [(google.api.field_behavior) = OUTPUT_ONLY];
}
