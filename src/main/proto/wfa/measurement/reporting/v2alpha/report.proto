// Copyright 2023 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.reporting.v2alpha;

import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/timestamp.proto";
import "google/type/date.proto";
import "google/type/datetime.proto";
import "google/type/interval.proto";
import "wfa/measurement/reporting/v2alpha/metric.proto";
import "wfa/measurement/reporting/v2alpha/time_interval.proto";

option java_package = "org.wfanet.measurement.reporting.v2alpha";
option java_multiple_files = true;
option java_outer_classname = "ReportProto";

// Resource representing a report.
//
// With the time range defined in `Report`, each ReportingMetric is expanded to
// multiple `Metric` by using all the combinations of (time, metric type,
// grouping slice), i.e. the Cartesian product of time intervals, metric types,
// and grouping slices. Grouping slices are generated by the Cartesian product
// of `Grouping`s defined in `MetricCalculationSpec`.
message Report {
  option (google.api.resource) = {
    type: "reporting.halo-cmm.org/Report"
    pattern: "measurementConsumers/{measurement_consumer}/reports/{report}"
  };

  reserved 4;

  // Resource name.
  string name = 1;

  // A map of arbitrary key-value pairs to support tagging of Reports
  // for upstream use by UIs and other rich clients.
  map<string, string> tags = 9 [(google.api.field_behavior) = IMMUTABLE];

  // The specification of metric calculation for a reporting set.
  message ReportingMetricCalculationSpec {
    // A collection of metric calculation spec resource names.
    repeated string metric_calculation_specs = 1 [
      (google.api.field_behavior) = REQUIRED,
      (google.api.field_behavior) = IMMUTABLE
    ];
  }

  // Map entry of `ReportingSet` to `ReportingMetricCalculationSpec`. Each entry
  // defines the metric calculations with a reporting set.
  message ReportingMetricEntry {
    // Key of the map entry.
    string key = 1 [
      (google.api.field_behavior) = REQUIRED,
      (google.api.resource_reference) = {
        type: "reporting.halo-cmm.org/ReportingSet"
      }
    ];
    // Value of the map entry.
    ReportingMetricCalculationSpec value = 2 [
      (google.api.field_behavior) = REQUIRED,
      (google.api.field_behavior) = IMMUTABLE
    ];
  }

  // The calculations defined for specific reporting sets.
  repeated ReportingMetricEntry reporting_metric_entries = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_behavior) = IMMUTABLE
  ];

  // The interval over which Metrics are generated. This interval is
  // closed on the left hand side and open on the right hand side.
  message ReportingInterval {
    // The date and time of the start of the report. The year,
    // month, day, and time_offset are all required.
    // If `utc_offset` is set, daylight savings is ignored and days will
    // be 24 hours based on the time of day specified here. If `time_zone` is
    // set, days will be based on the calendar and daylight savings will be
    // considered; if 5 AM is chosen, the day will start with 5 AM year-round.
    // This side of the interval is closed.
    google.type.DateTime report_start = 1 [
      (google.api.field_behavior) = REQUIRED,
      (google.api.field_behavior) = IMMUTABLE
    ];

    // The end date of the report. The time is considered to be the same as
    // that specified in the report start. This side of the interval is open.
    google.type.Date report_end = 2 [
      (google.api.field_behavior) = REQUIRED,
      (google.api.field_behavior) = IMMUTABLE
    ];
  }

  // Types of time intervals for metric aggregation.
  // Required if not used for `report_template` in `ReportSchedule`.
  oneof time {
    // A list of time intervals with different start times and end times. If
    // this field is set and any `MetricCalculationSpec` specifies
    // `metric_frequency_spec` an error will be reported.
    TimeIntervals time_intervals = 3;

    // A single time interval specifying the start and end time of the `Report`.
    // If this is specified, then for each `MetricCalculationSpec`,
    // `metric_frequency_spec` and `trailing_window` will be used to divide the
    // interval. Any interval created will have a lower bound of report_start.
    // If no `metric_frequency_spec` is specified then the entire interval is
    // reported on.
    ReportingInterval reporting_interval = 10;
  }

  // Possible states of a `Report`.
  enum State {
    // Default value. This value is unused.
    STATE_UNSPECIFIED = 0;
    // Computation is running.
    RUNNING = 1;
    // Completed successfully. Terminal state.
    SUCCEEDED = 2;
    // Completed with failure. Terminal state.
    FAILED = 3;
  }

  // Report state.
  State state = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The result of `MetricCalculationSpec` contains multiple results at the
  // level of granularity of single time interval and single group of the
  // Cartesian product of groupings.
  message MetricCalculationResult {
    reserved 3;

    // The resource name of the `MetricCalculationSpec` associated with this
    // `MetricCalculationResult`.
    string metric_calculation_spec = 6 [(google.api.resource_reference) = {
      type: "reporting.halo-cmm.org/MetricCalculationSpec"
    }];

    // The name of the `MetricCalculationResult`.
    string display_name = 1;

    // The reporting set associated with this `MetricCalculationSpec`.
    string reporting_set = 2 [(google.api.resource_reference) = {
      type: "reporting.halo-cmm.org/ReportingSet"
    }];

    // Contains the attributes of the result, including the group of predicates,
    // time interval, and metric result.
    message ResultAttribute {
      // The resource name of the `Metric` associated with this
      // `ResultAttribute`.
      string metric = 6 [(google.api.resource_reference) = {
        type: "reporting.halo-cmm.org/Metric"
      }];

      // Lists the predicates in the group which is one of the groups in the
      // Cartesian product of groupings.
      repeated string grouping_predicates = 1;

      // The metric spec that is associated with the metric calculation.
      MetricSpec metric_spec = 2;

      // An additional event filter that was conjoined to the grouping
      // predicates and any filters present on the ReportingSet.
      string filter = 5;

      // The time interval associated with the metric calculation.
      google.type.Interval time_interval = 3;

      // Denormalized `state` from `Metric`.
      Metric.State state = 7;

      // The metric result calculated on the reporting set with the setup in the
      // attribute. Only set if `state` is `SUCCEEDED`.
      MetricResult metric_result = 4;
    }
    // The number of results is equal to the size of the Cartesian product of
    // groupings, time intervals, and metric types.
    repeated ResultAttribute result_attributes = 4;
  }

  // The time when the report is successfully created.
  google.protobuf.Timestamp create_time = 6
      [(google.api.field_behavior) = OUTPUT_ONLY];

  // If `state` is `SUCCEEDED` or `FAILED`, results will be listed. `SUCCEEDED`
  // `Metric`s will have their result and `FAILED` `Metric`s will have info to
  // help determine the cause of the failure.
  repeated MetricCalculationResult metric_calculation_results = 7
      [(google.api.field_behavior) = OUTPUT_ONLY];

  // Only set if there is a `ReportSchedule` that this `Report` was created for.
  string report_schedule = 8 [(google.api.field_behavior) = OUTPUT_ONLY];
}
