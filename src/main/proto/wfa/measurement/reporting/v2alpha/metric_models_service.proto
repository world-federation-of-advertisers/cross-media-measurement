// Copyright 2023 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.reporting.v2alpha;

import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/annotations.proto";
import "google/api/resource.proto";
import "wfa/measurement/reporting/v2alpha/metric.proto";
import "wfa/measurement/reporting/v2alpha/metric_model.proto";
import "wfa/measurement/reporting/v2alpha/time_interval.proto";
import "wfa/measurement/reporting/v2alpha/reporting_set.proto";

option java_package = "org.wfanet.measurement.reporting.v2alpha";
option java_multiple_files = true;
option java_outer_classname = "MetricModelsServiceProto";

// Service for interacting with `MetricModel` resources.
service MetricModels {
  // Returns the `MetricModel` with the specified resource key.
  rpc GetMetricModel(GetMetricModelRequest) returns (MetricModel) {
    option (google.api.http) = {
      get: "/v2alpha/{name=measurementConsumers/*/metricModels/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // Lists `MetricModel`s.
  rpc ListMetricModels(ListMetricModelsRequest)
      returns (ListMetricModelsResponse) {
    option (google.api.http) = {
      get: "/v2alpha/{parent=measurementConsumers/*}/metricModels"
    };
    option (google.api.method_signature) = "parent";
  }

  // Creates a `MetricModel`.
  rpc CreateMetricModel(CreateMetricModelRequest) returns (MetricModel) {
    option (google.api.http) = {
      post: "/v2alpha/{parent=measurementConsumers/*}/metricModels"
      body: "metric_model"
    };
    option (google.api.method_signature) = "parent,metric_model";
  }

  // Applies the metric model to estimate the metric result.
  // Will return a RPC error if the model hasn't been trained yet.
  rpc ApplyMetricModel(ApplyMetricModelRequest)
      returns (ApplyMetricModelResponse) {
    option (google.api.http) = {
      get: "/v2alpha/{name=measurementConsumers/*/metricModels/*}:apply"
    };
  }
}

// Request message for `GetMetricModel` method.
message GetMetricModelRequest {
  // The name of the metric model to retrieve.
  // Format:
  // measurementConsumers/{measurement_consumer}/metricModels/{metric_model}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "reporting.halo-cmm.org/MetricModel"
    }
  ];
}

// Request message for `ListMetricModels` method.
message ListMetricModelsRequest {
  // Format: measurementConsumers/{measurement_consumer}
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      child_type: "reporting.halo-cmm.org/MetricModel"
    }
  ];

  // The maximum number of metric models to return. The service may return fewer
  // than this value.
  // If unspecified, at most 50 metric models will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 2;

  // A page token, received from a previous `ListMetricModels` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListMetricModels` must
  // match the call that provided the page token.
  string page_token = 3;
}

// Response message for `ListMetricModels` method.
message ListMetricModelsResponse {
  // The metric models from the specified measurement consumer.
  repeated MetricModel metric_models = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

// Request message for `CreateMetricModel` method.
message CreateMetricModelRequest {
  // The parent resource where this metric model will be created.
  // Format: measurementConsumers/{measurement_consumer}
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      child_type: "reporting.halo-cmm.org/MetricModel"
    }
  ];

  // The metric model to create.
  MetricModel metric_model = 2 [(google.api.field_behavior) = REQUIRED];
}

// Request message for `ApplyMetricModel` method.
message ApplyMetricModelRequest {
  // The name of the metric model that will be applied.
  //
  // The user needs to provide a model that can cover the time interval and
  // all primitive reporting set bases of the specified reporting set.
  // Format:
  // measurementConsumers/{measurement_consumer}/metricModels/{metric_model}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "reporting.halo-cmm.org/MetricModel"
    }
  ];
  // The resource name of the reporting set that the model estimates the metric
  // on.
  string reporting_set = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "reporting.halo-cmm.org/ReportingSet"
    }
  ];

  // The time over which to calculate the metric cumulatively.
  TimeInterval time_interval = 3 [(google.api.field_behavior) = REQUIRED];

  // The specification of what metric to estimate
  MetricSpec metric_spec = 4;

  // Additional filters that will be combined with AND boolean operation and
  // applied to the reporting set. If unspecified, evaluates to `true`
  repeated string filters = 5;
}

// Response message for `ApplyMetricModel` method.
message ApplyMetricModelResponse {
  // The metric result estimated by the model specified in the request.
  MetricResult metric_result = 1;
}