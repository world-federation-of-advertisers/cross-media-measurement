// Copyright 2024 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.reporting.v2alpha;

import "google/api/field_behavior.proto";
<<<<<<< HEAD
import "google/protobuf/duration.proto";
import "wfa/measurement/reporting/v2alpha/media_type.proto";

option java_package = "org.wfanet.measurement.reporting.v2alpha";
option java_multiple_files = true;
option java_outer_classname = "ImpressionQualificationFilterSpecProto";
=======

option java_package = "org.wfanet.measurement.reporting.v2alpha";
option java_multiple_files = true;
option java_outer_classname = "ImpressionQualificationFilterProto";
>>>>>>> 30c4f0785 (updated from review)

// Specifies the impression filter for a ReportingMediaType.
//
// If particular filter values are not applicable to the media they
// are applied to it is an error (e.g. DISPLAY cannot be filtered by
// percent completion)
message ImpressionQualificationFilterSpec {
<<<<<<< HEAD
  // The Media Type the filter is applicable to.
  MediaType media_type = 1 [
=======
  // Defines how filters related to Reporting Media Types.
  //
  // Generally, a Filter with a given Filter Type is applied to a Reporting Unit
  // when the type matches that of the Reporting Media Type. However, a filer
  // with type CROSS_MEDIA is applied when multiple Reporting Media Types are
  // specified.
  enum FilterType {
    // Default value. Unused.
    REPORTING_MEDIA_TYPE_UNSPECIFIED = 0;
    // Filter is for Cross Media
    CROSS_MEDIA = 1;
    // Filter is for Video
    VIDEO = 2;
    // Filter is for Display
    DISPLAY = 3;
    // Filter is for Other
    OTHER = 4;
  }
  // The type of filter.
  FilterType filter_type = 1 [
>>>>>>> 30c4f0785 (updated from review)
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_behavior) = IMMUTABLE
  ];

  // Specifies a quantile
  enum Quantile {
    // Default value. Unused.
    QUANTILE_UNSPECIFIED = 0;
    // 0th percentile
    ZERO = 1;
    // 25th percentile
    TWENTY_FIVE = 2;
    // 50th percentile
    FIFTY = 3;
    // 75th percentile
    SEVENTY_FIVE = 4;
    // 100th percentile
    ONE_HUNDRED = 5;
  }

  // Specify a percent as a fraction or as a quantile
  message Percent {
<<<<<<< HEAD
    // Required
=======
>>>>>>> 30c4f0785 (updated from review)
    oneof value {
      // The fraction
      float fraction = 1 [(google.api.field_behavior) = IMMUTABLE];
      // The quantile
      Quantile quantile = 2 [(google.api.field_behavior) = IMMUTABLE];
    }
  }

  // Specifies the viewpability filter
  Percent viewability = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_behavior) = IMMUTABLE
  ];
<<<<<<< HEAD

  // Specifies the completion filter
  oneof completion {
    // Speifies a completion percent
    Percent percent = 3 [(google.api.field_behavior) = IMMUTABLE];
    // Specifies the absolute completion duration
    google.protobuf.Duration duration = 4
        [(google.api.field_behavior) = IMMUTABLE];
  }
=======
  // Specifies the completion filter
  Percent completion = 3 [(google.api.field_behavior) = IMMUTABLE];
>>>>>>> 30c4f0785 (updated from review)
}
