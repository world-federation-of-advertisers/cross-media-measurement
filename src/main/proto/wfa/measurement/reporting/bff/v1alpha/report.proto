// Copyright 2023 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.reporting.bff.v1alpha;

import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/timestamp.proto";
import "google/type/interval.proto";

option java_package = "org.wfanet.measurement.reporting.bff.v1alpha";
option java_multiple_files = true;
option java_outer_classname = "ReportProto";

option go_package = "wfa/measurement/reporting/bff/v1alpha/reportingpb";

// Resource representing a UI renderable report
//
// When finished processing, the metrics are nested by source by
// demographic category by time interval.
message Report {
  option (google.api.resource) = {
    type: "ui.reporting.halo-cmm.org/Report"
    pattern: "measurementConsumers/{measurement_consumer}/reports/{report}"
  };

  // The human understandable name of the report.
  string name = 1;

  // The generated id of the report (the same as the name).
  string report_id = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Possible states for the report.
  enum State {
    STATE_UNSPECIFIED = 0;
    RUNNING = 1;
    SUCCEEDED = 2;
    FAILED = 3;
  }

  // Current state of the report.
  // This helps the system and user know what data is viewable.
  State state = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Metrics of the report that directly contains the time interval and
  // demographics; metrics are nested under demographics.
  message DemographicMetricsByTimeInterval {
    // Metrics of the report that directly contain the demographic category and
    // sources of the metrics; metrics are nested under the sources.
    message DemoBucket {
      // The human readable name of the demographic bucket these metrics fall
      // into.
      string demo_category_name = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

      // The metrics of a given source.
      // The metrics are limited to the prior contraints of time interval and
      // demographic, and the current constraint of source.
      message SourceMetrics {
        // The name of the source of these metrics.
        // The metrics may be built from a set of sources.
        string source_name = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

        // Impression count with standard deviation.
        message ImpressionCountResult {
          // The number of impressions.
          int64 impression_count = 1;

          // The standard deviation for determining confidence intervals.
          double standard_deviation = 2;
        }

        // The number of impressions.
        ImpressionCountResult impression_count = 2
            [(google.api.field_behavior) = OUTPUT_ONLY];

        // The frequency of views by cumulative count. EG:
        //   1: 10
        //   2: 5
        //   3: 2
        // The keys are implied to be views of at least that amount (eg. 1 is
        // really 1+).
        map<int32, double> frequency_histogram = 3
            [(google.api.field_behavior) = OUTPUT_ONLY];

        // The reach value.
        int64 reach = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
      }

      // The sources (excluding union) where the metrics came from.
      // These can include set sources (eg. complement set).
      repeated SourceMetrics per_publisher_source = 2
          [(google.api.field_behavior) = OUTPUT_ONLY];

      // Full union metric set.
      SourceMetrics union_source = 3
          [(google.api.field_behavior) = OUTPUT_ONLY];
    }

    // The time period for which this metric was calculated.
    google.type.Interval time_interval = 1
        [(google.api.field_behavior) = OUTPUT_ONLY];

    // The demographic of this metric. The actual metric values are
    // nested underneath.
    repeated DemoBucket demo_bucket = 2
        [(google.api.field_behavior) = OUTPUT_ONLY];
  }

  // Set of metrics grouped by time intervals.
  repeated DemographicMetricsByTimeInterval time_interval = 4
      [(google.api.field_behavior) = OUTPUT_ONLY];
}
