// Copyright 2022 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.reporting.bff.v1alpha;

import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/annotations.proto";
import "google/api/resource.proto";
import "google/protobuf/timestamp.proto";
import "wfa/measurement/reporting/bff/v1alpha/report.proto";

option java_package = "org.wfanet.measurement.reporting.bff.v1alpha";
option java_multiple_files = true;
option java_outer_classname = "ReportsServiceProto";

option go_package = "wfa/measurement/reporting/bff/v1alpha/reportingpb";

// Service for interacting with `Report` resources.
service Reports {
  // Returns the `Report` with the specified resource key.
  rpc GetReport(GetReportRequest) returns (Report) {
    option (google.api.http) = {
      get: "/v1alpha/reports/{report_id}"
    };
  }

  // Lists `Report`s.
  rpc ListReports(ListReportsRequest) returns (ListReportsResponse) {
    option (google.api.http) = {
      get: "/v1alpha/reports"
    };
  }

  // Creates a `Report` based on a predefined template.
  rpc CreateReport(CreateReportRequest) returns (CreateReportResponse) {
    option (google.api.http) = {
      post: "/v1alpha/reports"
    };
  }
}

message CreateReportRequest {
  string report_id = 1 [(google.api.field_behavior) = REQUIRED];

  repeated string data_providers = 2;

  google.protobuf.Timestamp start_date = 3;

  google.protobuf.Timestamp end_date = 4;
}

message CreateReportResponse {
  // Possible statuses from a create report request.
  // Does not mean the report was successfully created,
  // just the request was received.
  enum Status {
    // Create report request successfully sent.
    SUCCEEDED = 0;
    // Error submitting create report request.
    ERRORED = 1;
  }

  Status status = 1;
}

enum ReportView {
  // The default / unset value.
  REPORT_VIEW_UNSPECIFIED = 0;

  // Include basic metadata about the report, but not the full contents.
  REPORT_VIEW_BASIC = 1;

  // Include everything.
  REPORT_VIEW_FULL = 2;
}

// Request message for `GetReport` method.
message GetReportRequest {
  // The id of the report to retrieve.
  string report_id = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "ui.reporting.halo-cmm.org/Report"
    }
  ];

  // Defaults to REPORT_VIEW_FULL
  ReportView view = 2;
}

// Request message for `ListReports` method.
message ListReportsRequest {
  // Defaults to REPORT_VIEW_BASIC
  ReportView view = 1;

  // The maximum number of reports to return. The service may return fewer than
  // this value.
  // If unspecified, at most 50 reports will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 2;

  // A page token, received from a previous `ListReports` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListReports` must match
  // the call that provided the page token.
  string page_token = 3;
}

// Response message for `ListReports` method.
message ListReportsResponse {
  // The reports from the specified measurement consumer.
  repeated Report reports = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}
