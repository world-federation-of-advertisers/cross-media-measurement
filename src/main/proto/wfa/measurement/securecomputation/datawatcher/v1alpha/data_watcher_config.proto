// Copyright 2025 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

// (-- api-linter: core::0191::proto-package=disabled --)
package wfa.measurement.securecomputation.datawatcher.v1alpha;

import "google/protobuf/any.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";

// (-- api-linter: core::0191::java-package=disabled --)
option java_package = "org.wfanet.measurement.securecomputation.datawatcher.v1alpha";
option java_multiple_files = true;
option java_outer_classname = "DataWatcherConfigProto";

message DataWatcherConfig {

  message DiscoveredWork {
    // The packed message
    google.protobuf.Any config = 1;
    // Path that matched the work
    string path = 2;
  }

  // The path to watch
  string source_path_regex = 1;

  // The config used for control plane apps
  message ControlPlaneConfig {
    // The Control Plane queue that will execute this work item.
    string queue = 1;
    // Protobuf payload with application-specific config
    // (-- api-linter: core::0146::any=disabled --)
    google.protobuf.Any app_config = 2;
  }
  // The config used for any Webhooks
  message WebhookConfig {
    // The endpoint to trigger.
    string endpoint_uri = 1;
    // Json payload to send to endpoint of application-specific config.
    google.protobuf.Struct app_config = 2;
  }

  oneof sink_config {
    // The sink used to send event to the Control Plane.
    ControlPlaneConfig control_plane_config = 2;
    // The sink used to send events to a web hook.
    WebhookConfig web_hook_config = 3;
  }
}

// The DataWatcher configuration
message DataWatcherConfigs {
  // All the configs that the DataWatcher will match
  repeated DataWatcherConfig configs = 1;
}
