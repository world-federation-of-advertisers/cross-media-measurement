// Copyright 2025 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.edpaggregator.v1alpha;

import "google/api/field_behavior.proto";
import "google/api/resource.proto";

option java_package = "org.wfanet.measurement.edpaggregator.v1alpha";
option java_multiple_files = true;
option java_outer_classname = "ResultsFulfillerParamsProto";

// Message representing the params used for the results fulfiller tee app
message ResultsFulfillerParams {
  // The Cmms Resource name for the EDP
  string data_provider = 1;
  // Message representing the storage details used by the results fulfiller app
  message StorageParams {
    // The blob uri prefix for the labeled impressions `BlobDetails` that is
    // stored in GCS for a given EDP
    // See reference:
    // https://github.com/world-federation-of-advertisers/common-jvm/blob/main/src/main/kotlin/org/wfanet/measurement/storage/SelectedStorageClient.kt
    string labeled_impressions_blob_details_uri_prefix = 1
        [(google.api.field_behavior) = REQUIRED];

    // The Project ID for the requisitions GCS instance that can be
    // used with a blob URI to retrieve the data. Optional.
    string gcs_project_id = 4;
  }

  // The storage used by the tee app
  StorageParams storage_params = 2 [(google.api.field_behavior) = REQUIRED];

  // Message representing the details needed to generate certificates
  message ConsentParams {
    // The resource key of the DER-encoded certificate file used for result
    // signing
    string result_cs_cert_der_resource_path = 1
        [(google.api.field_behavior) = REQUIRED];

    // The resource key of the DER-encoded private key file used for result
    // signing
    string result_cs_private_key_der_resource_path = 2
        [(google.api.field_behavior) = REQUIRED];

    // The resource key of the private encryption key file
    string private_encryption_key_resource_path = 3
        [(google.api.field_behavior) = REQUIRED];

    // The name for the certificate used by the EDP
    string edp_certificate_name = 4 [
      (google.api.resource_reference).type = "halo.wfanet.org/Certificate",
      (google.api.field_behavior) = REQUIRED
    ];
  }

  // Information necessary for EDP Consent signaling
  ConsentParams consent_params = 3 [(google.api.field_behavior) = REQUIRED];

  // Message representing the details needed to connect to the kingdom
  message TransportLayerSecurityParams {
    // The resource key of the client certificate
    string client_cert_resource_path = 1
        [(google.api.field_behavior) = REQUIRED];

    // The resource key of the client private key
    string client_private_key_resource_path = 2
        [(google.api.field_behavior) = REQUIRED];
  }

  // The connection to the Cmms API
  TransportLayerSecurityParams cmms_connection = 4
      [(google.api.field_behavior) = REQUIRED];

  // The parameters for noise that is applied to the result.
  message NoiseParams {
    // The types of noise
    enum NoiseType {
      // Default/unset.
      UNSPECIFIED = 0;
      // No noise applied.
      NONE = 1;
      // Continuous gaussian noise applied.
      CONTINUOUS_GAUSSIAN = 2;
    }
    // The type of noise applied to the result
    NoiseType noise_type = 1;
  }

  // The noise params to be applied.
  NoiseParams noise_params = 5;
}
