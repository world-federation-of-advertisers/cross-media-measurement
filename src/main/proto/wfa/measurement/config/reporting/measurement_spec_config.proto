/*
 * Copyright 2023 The Cross-Media Measurement Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package wfa.measurement.config;

option java_package = "org.wfanet.measurement.config.reporting";
option java_multiple_files = true;

// The configuration for MeasurementSpecs used in Measurements created by the
// Reporting server.
message MeasurementSpecConfig {
  // Parameters for differential privacy (DP).
  //
  // For detail, refer to "Dwork, C. and Roth, A., 2014. The algorithmic
  // foundations of differential privacy. Foundations and Trends in Theoretical
  // Computer Science, 9(3-4), pp.211-407."
  message DifferentialPrivacyParams {
    double epsilon = 1;
    double delta = 2;
  }

  // Specifies a range of VIDs to be sampled.
  message VidSamplingInterval {
    message FixedStart {
      // The start of the sampling interval in [0, 1)
      float start = 1;
      // The width of the sampling interval.
      float width = 2;
    }

    message RandomStart {
      int32 num_vid_buckets = 1;
      // The width of the sampling interval in [1, `num_vid_buckets`]. For
      // example, if `num_vid_buckets` is 300, then this width can be in the
      // range [1, 300]. If 100 is chosen, then the width in
      // `vid_sampling_interval` of `MeasurementSpec` is 100/300.
      int32 width = 2;
    }

    // Defaults to start of 0 width of 1 if not set.
    oneof start {
      FixedStart fixed_start = 1;
      RandomStart random_start = 2;
    }
  }

  message ReachSingleDataProvider {
    // Differential privacy parameters for reach.
    DifferentialPrivacyParams privacy_params = 1;
    VidSamplingInterval vid_sampling_interval = 2;
  }
  ReachSingleDataProvider reach_single_data_provider = 1;

  message Reach {
    // Differential privacy parameters for reach.
    DifferentialPrivacyParams privacy_params = 1;
    VidSamplingInterval vid_sampling_interval = 2;
  }
  Reach reach = 2;

  message ReachAndFrequencySingleDataProvider {
    // Differential privacy parameters for reach.
    DifferentialPrivacyParams reach_privacy_params = 1;
    // Differential privacy parameters for frequency.
    DifferentialPrivacyParams frequency_privacy_params = 2;
    VidSamplingInterval vid_sampling_interval = 3;
  }
  ReachAndFrequencySingleDataProvider reach_and_frequency_single_data_provider =
      3;

  message ReachAndFrequency {
    // Differential privacy parameters for reach.
    DifferentialPrivacyParams reach_privacy_params = 1;
    // Differential privacy parameters for frequency.
    DifferentialPrivacyParams frequency_privacy_params = 2;
    VidSamplingInterval vid_sampling_interval = 3;
  }
  ReachAndFrequency reach_and_frequency = 4;

  message Impression {
    // Differential privacy parameters.
    DifferentialPrivacyParams privacy_params = 1;
    VidSamplingInterval vid_sampling_interval = 2;
  }
  Impression impression = 5;

  message Duration {
    // Differential privacy parameters.
    DifferentialPrivacyParams privacy_params = 1;
    VidSamplingInterval vid_sampling_interval = 2;
  }
  Duration duration = 6;
}
