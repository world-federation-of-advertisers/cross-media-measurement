// Copyright 2023 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.api.v2alpha.event_group_metadata.testing;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/type/date.proto";

option java_package = "org.wfanet.measurement.api.v2alpha.event_group_metadata.testing";
option java_multiple_files = true;

// A sequence of VIDs represented with a beginning and exclusive end.
message VidRange {
  int64 start = 1;
  int64 end_exclusive = 2;
}

// Value of an event field.
message FieldValue {
  oneof value {
    string string_value = 1;
    bool bool_value = 2;
    // The number value of the enum.
    int32 enum_value = 3;
    double double_value = 4;
    float float_value = 5;
    int32 int32_value = 6;
    int64 int64_value = 7;
    google.protobuf.Duration duration_value = 8;
    google.protobuf.Timestamp timestamp_value = 9;
  }
}

// The specification of a population for synthetic event generation.
message SyntheticPopulationSpec {
  // The overall range of VIDs for the synthetic population.
  VidRange vid_range = 1;

  // Type URL of the event message type.
  //
  // This is the message type which `population_fields` and
  // `non_population_fields` refer to.
  string event_message_type_url = 5;

  // Set of field paths within a synthetic event that pertain to the population,
  // with `.` as the traversal operator.
  //
  // For example, an `age_group` field within a `person` event template would
  // have the path `person.age_group`.
  //
  // The values of these fields are assigned at the sub-population level.
  //
  // TODO(@SanjayVas): Consider determining this set from protobuf options on
  // event template definitions.
  repeated string population_fields = 2;

  // Set of field paths within a synthetic event that do not pertain to the
  // population, with `.` as the traversal operator.
  //
  // For example, a `viewed_fraction` field within a `video_ad` event template
  // would have the path `video_ad.viewed_fraction`.
  //
  // The values of these fields are assigned at the event level.
  repeated string non_population_fields = 3;

  // A subset of the synthetic population.
  message SubPopulation {
    VidRange vid_sub_range = 1;

    // A map of `population_fields` to their values for each subpopulation.
    map<string, FieldValue> population_fields_values = 2;
  }

  // Subpopulations should describe non-overlapping VID ranges. The combinations
  // of population field values should be unique across subpopulations.
  repeated SubPopulation sub_populations = 4;
}

// The specification of an `EventGroup` for synthetic event generation.
//
// Each `SyntheticEventGroupSpec` implicitly references a single
// `SyntheticPopulationSpec`.
message SyntheticEventGroupSpec {
  string description = 1;

  // The specification of VIDs reached at a specific frequency and their
  // non-population attributes.
  message FrequencySpec {
    int64 frequency = 1;

    // The specification of non-population field values for a VID range.
    message VidRangeSpec {
      // A range of VIDs within a single `SubPopulation`.
      VidRange vid_range = 1;

      // A map of `non_population_fields` from `SyntheticPopulationSpec` to
      // their values.
      map<string, FieldValue> non_population_field_values = 2;

      // Rate in the range (0, 1] at which VIDs sampled from `vid_range`.
      //
      // If not specified or if the rate is 1, no sampling is done and all VIDs
      // in range are taken.
      //
      // The sampling process is as follows, with all values using little endian
      // byte order:
      // 1. Concatenate the VID, `sampling_nonce`, and
      // `non_population_field_values`.
      // 2. Take the FarmHash Fingerprint64 of (1) as a signed 64-bit integer.
      // 3. Divide (2) by 2^63 - 1 to map it to the range [-1, 1].
      // 4. Check if (4) is in the range [-`sampling_rate`, `sampling_rate`]. If
      // so, the VID is included in the sample.
      //
      // `non_population_field_values` is encoded by concatenating the key and
      // the value of each entry ordered by key lexicographically. The values
      // are encoded by concatenating the scalar subfields in depth-first search
      // order. Fields of type `string` are encoded as UTF-8, and fields of type
      // `boolean` are encoded as a single byte containing `0` or `1`.
      double sampling_rate = 3;
    }
    // The VID ranges should be non-overlapping sub-ranges of SubPopulations.
    repeated VidRangeSpec vid_range_specs = 2;
  }

  // The specification for all frequencies reached for a specific date range.
  message DateSpec {
    // A range of `Date`s represented with a beginning and exclusive end.
    message DateRange {
      google.type.Date start = 1;
      google.type.Date end_exclusive = 2;
    }
    // Dates the VIDs were reached.
    DateRange date_range = 1;

    // Each FrequencySpec must have a unique frequency.
    repeated FrequencySpec frequency_specs = 2;
  }
  // `DateSpec`s should describe non-overlapping date ranges.
  repeated DateSpec date_specs = 2;

  // Random nonce value used for sampling. Required if `sampling_rate` is
  // specified in any `VidRangeSpec`.
  int64 sampling_nonce = 3;
}

// Recepie to generate a `SyntheticEventGroupSpec`.
//

// For each dateSpec in `CartesianSyntheticEventGroupSpecRecipe`;
// 1. Group the nonPopulationDimensionSpecs based on their field names. These
//  groups specify the distribution of the data for the respective dimensions.
// 2. Cross these groups with each other and the frequencyDimensionSpecs. This
//  produces a desired distribution for all the non population dimensions and
//  the frequencies.
// 3. Cross this result with the subPopulations defined in the
//  syntheticPopulationSpec. This will not add any fields since the poopualtion
//  values are defiend in the syntheticPopulationSpec, this operation is used to
//  query the vid ranges to be used for the resulting cartesian product.
// 4. Create frequency specs from these groups such that the frequency field is
//  set from frequencyDimensionSpec, . the vidRange is the vid Range of the
//  subpopulation and the sampling rate is the product of all ratios in
//  dimensions and total reach divided by total number of vids.
message CartesianSyntheticEventGroupSpecRecipe {
  string description = 1;

  // Random nonce value to be used in every `VidRangeSpec` in the resulting
  // `SyntheticEventGroupSpec`. Required.
  int64 sampling_nonce = 2;

  // The specification of NonPopulation field dimensions.
  message NonPopulationDimensionSpec {
    message FieldValueRatio {
      // Value of the non_population_field.
      FieldValue field_value = 1;
      // Ratio of this field value for this dimension.
      float ratio = 2;
    }
    // Ratios in these fields must sum up to 1.
    repeated FieldValueRatio field_value_ratios = 1;
  }

  // The specification for all frequencies reached for a specific date range.
  message DateSpec {
    // A range of `Date`s represented with a beginning and exclusive end.
    message DateRange {
      google.type.Date start = 1;
      google.type.Date end_exclusive = 2;
    }
    // Dates the VIDs were reached.
    SyntheticEventGroupSpec.DateSpec.DateRange date_range = 1;

    // This value together with FrequencyDimensionSpecs implies total
    // impressions.
    int64 total_reach = 2;
    // A map of frequencies to their values ratios. Ratios must sum up to 1.
    map<int64, float> frequency_ratios = 3;
    // A map of `NonPopulationDimensionSpec` keyed by field from
    // `non_population_fields` in the corresponding `PopulationSpec`.
    map<string, NonPopulationDimensionSpec> non_population_dimension_specs = 4;
  }
  // `DateSpec`s should describe non-overlapping date ranges.
  repeated DateSpec date_specs = 3;
}
