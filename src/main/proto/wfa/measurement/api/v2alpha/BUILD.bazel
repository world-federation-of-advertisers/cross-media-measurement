load("@com_google_protobuf//bazel:proto_library.bzl", "proto_library")
load("@rules_java//java:java_library.bzl", "java_library")
load("@rules_jvm_external//:defs.bzl", "maven_export")
load("@wfa_common_jvm//build/maven:defs.bzl", "artifact_version")
load("@wfa_rules_kotlin_jvm//kotlin:defs.bzl", "kt_jvm_grpc_proto_library", "kt_jvm_proto_library")

package(default_visibility = ["//visibility:public"])

MAVEN_COORDINATES = "org.wfanet.measurement.api:v2alpha-kotlin:" + artifact_version()

GRPC_MAVEN_COORDINATES = "org.wfanet.measurement.api:v2alpha-grpc-kotlin:" + artifact_version()

LIBS = [
    "account",
    "api_key",
    "certificate",
    "crypto",
    "data_provider",
    "date_interval",
    "differential_privacy",
    "direct_computation",
    "duchy",
    "event_annotations",
    "event_group",
    "event_group_metadata_descriptor",
    "event_template",
    "exchange",
    "exchange_step",
    "exchange_step_attempt",
    "exchange_workflow",
    "measurement",
    "measurement_consumer",
    "measurement_spec",
    "model_line",
    "model_outage",
    "model_provider",
    "model_release",
    "model_rollout",
    "model_shard",
    "model_suite",
    "multi_party_computation",
    "population",
    "population_spec",
    "protocol_config",
    "public_key",
    "random_seed",
    "recurring_exchange",
    "requisition",
    "requisition_spec",
]

SERVICES = [
    "accounts",
    "api_keys",
    "certificates",
    "data_providers",
    "event_group_metadata_descriptors",
    "event_groups",
    "exchange_step_attempts",
    "exchange_steps",
    "exchanges",
    "measurement_consumers",
    "measurements",
    "model_lines",
    "model_outages",
    "model_providers",
    "model_releases",
    "model_rollouts",
    "model_shards",
    "model_suites",
    "populations",
    "public_keys",
    "requisition_fulfillment",
    "requisitions",
]

proto_library(
    name = "page_token_proto",
    srcs = ["page_token.proto"],
    deps = [
        "@com_google_googleapis//google/type:date_proto",
        "@com_google_googleapis//google/type:interval_proto",
        "@com_google_protobuf//:timestamp_proto",
        "@wfa_measurement_proto//src/main/proto/wfa/measurement/api/v2alpha:exchange_step_proto",
        "@wfa_measurement_proto//src/main/proto/wfa/measurement/api/v2alpha:measurement_proto",
        "@wfa_measurement_proto//src/main/proto/wfa/measurement/api/v2alpha:model_line_proto",
        "@wfa_measurement_proto//src/main/proto/wfa/measurement/api/v2alpha:requisition_proto",
    ],
)

kt_jvm_proto_library(
    name = "page_token_kt_jvm_proto",
    deps = [
        "//src/main/proto/wfa/measurement/api/v2alpha:page_token_proto",
    ],
)

[
    alias(
        name = "{name}_proto".format(name = name),
        actual = "@wfa_measurement_proto//src/main/proto/wfa/measurement/api/v2alpha:{name}_proto".format(name = name),
    )
    for name in LIBS
]

[
    kt_jvm_proto_library(
        name = "{name}_kt_jvm_proto".format(name = name),
        deps = [":{name}_proto".format(name = name)],
    )
    for name in LIBS
]

[
    alias(
        name = "{service}_service_proto".format(service = service),
        actual = "@wfa_measurement_proto//src/main/proto/wfa/measurement/api/v2alpha:{service}_service_proto".format(service = service),
    )
    for service in SERVICES
]

[
    kt_jvm_grpc_proto_library(
        name = "{service}_service_kt_jvm_grpc_proto".format(service = service),
        deps = [":{service}_service_proto".format(service = service)],
    )
    for service in SERVICES
]

java_library(
    name = "api_kt_jvm_proto",
    tags = ["maven_coordinates=" + MAVEN_COORDINATES],
    exports = [
        ":{name}_kt_jvm_proto".format(name = name)
        for name in LIBS
    ] + [
        ":{service}_service_kt_jvm_proto".format(service = service)
        for service in SERVICES
    ],
)

maven_export(
    name = "maven",
    lib_name = "api_kt_jvm_proto",
    maven_coordinates = MAVEN_COORDINATES,
    tags = [
        "no-javadocs",
        "no-remote-cache",
    ],
    visibility = ["//visibility:private"],
)

java_library(
    name = "api_kt_jvm_grpc_proto",
    tags = ["maven_coordinates=" + GRPC_MAVEN_COORDINATES],
    exports = [":api_key_kt_jvm_proto"] + [
        ":{service}_service_kt_jvm_grpc_proto".format(service = service)
        for service in SERVICES
    ],
)

maven_export(
    name = "grpc_maven",
    lib_name = "api_kt_jvm_grpc_proto",
    maven_coordinates = GRPC_MAVEN_COORDINATES,
    tags = [
        "no-javadocs",
        "no-remote-cache",
    ],
    visibility = ["//visibility:private"],
)
