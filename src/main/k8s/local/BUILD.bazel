load("//build:variables.bzl", "IMAGE_REPOSITORY_SETTINGS", "TEST_K8S_SETTINGS")
load("//build/k8s:defs.bzl", "kustomization_dir")
load("@wfa_rules_cue//cue:defs.bzl", "cue_library")
load("//src/main/k8s:macros.bzl", "cue_dump")
load("@wfa_common_jvm//build:versions.bzl", "SPANNER_EMULATOR")
load("@wfa_common_jvm//build:defs.bzl", "expand_template")

package(
    default_visibility = [
        ":__subpackages__",
        "//src/test/kotlin/org/wfanet/measurement/integration/k8s:__pkg__",
    ],
)

SECRET_NAME = "certs-and-configs"

DB_SECRET_NAME = "db-creds"

MC_CONFIG_SECRET_NAME = "mc-config"

cue_library(
    name = "config_cue",
    srcs = ["config.cue"],
    deps = [
        "//src/main/k8s:base",
        "//src/main/k8s:config",
        "//src/main/k8s:spanner",
    ],
)

cue_library(
    name = "emulators_cue",
    srcs = ["emulators.cue"],
    deps = [
        ":config_cue",
        "//src/main/k8s:base",
    ],
)

cue_dump(
    name = "emulators",
    cue_tags = {
        "secret_name": SECRET_NAME,
        "spanner_emulator_version": SPANNER_EMULATOR.version,
        "container_registry": IMAGE_REPOSITORY_SETTINGS.container_registry,
        "image_repo_prefix": IMAGE_REPOSITORY_SETTINGS.repository_prefix,
        "image_tag": IMAGE_REPOSITORY_SETTINGS.image_tag,
    },
    tags = ["manual"],
    deps = [":emulators_cue"],
)

cue_library(
    name = "kingdom_cue",
    srcs = ["kingdom.cue"],
    deps = [
        ":config_cue",
        "//src/main/k8s:kingdom",
    ],
)

cue_dump(
    name = "kingdom",
    cue_tags = {
        "secret_name": SECRET_NAME,
        "container_registry": IMAGE_REPOSITORY_SETTINGS.container_registry,
        "image_repo_prefix": IMAGE_REPOSITORY_SETTINGS.repository_prefix,
        "image_tag": IMAGE_REPOSITORY_SETTINGS.image_tag,
    },
    tags = ["manual"],
    deps = [":kingdom_cue"],
)

cue_library(
    name = "duchies_cue",
    srcs = ["duchies.cue"],
    deps = [
        ":config_cue",
        "//src/main/k8s:duchy",
    ],
)

cue_dump(
    name = "duchies",
    cue_tags = {
        "secret_name": SECRET_NAME,
        "container_registry": IMAGE_REPOSITORY_SETTINGS.container_registry,
        "image_repo_prefix": IMAGE_REPOSITORY_SETTINGS.repository_prefix,
        "image_tag": IMAGE_REPOSITORY_SETTINGS.image_tag,
        "aggregator_cert_name": TEST_K8S_SETTINGS.aggregator_cert_name,
        "worker1_cert_name": TEST_K8S_SETTINGS.worker1_cert_name,
        "worker2_cert_name": TEST_K8S_SETTINGS.worker2_cert_name,
    },
    tags = ["manual"],
    deps = [":duchies_cue"],
)

cue_library(
    name = "edp_simulators_cue",
    srcs = ["edp_simulators.cue"],
    deps = [
        ":config_cue",
        "//src/main/k8s:edp_simulator",
    ],
)

cue_dump(
    name = "edp_simulators",
    cue_tags = {
        "secret_name": SECRET_NAME,
        "container_registry": IMAGE_REPOSITORY_SETTINGS.container_registry,
        "image_repo_prefix": IMAGE_REPOSITORY_SETTINGS.repository_prefix,
        "image_tag": IMAGE_REPOSITORY_SETTINGS.image_tag,
        "mc_name": TEST_K8S_SETTINGS.mc_name,
        "edp1_name": TEST_K8S_SETTINGS.edp1_name,
        "edp2_name": TEST_K8S_SETTINGS.edp2_name,
        "edp3_name": TEST_K8S_SETTINGS.edp3_name,
        "edp4_name": TEST_K8S_SETTINGS.edp4_name,
        "edp5_name": TEST_K8S_SETTINGS.edp5_name,
        "edp6_name": TEST_K8S_SETTINGS.edp6_name,
    },
    tags = ["manual"],
    deps = [
        ":edp_simulators_cue",
    ],
)

cue_dump(
    name = "edp_simulators_csv",
    srcs = ["edp_simulators_csv.cue"],
    cue_tags = {
        "secret_name": SECRET_NAME,
        "container_registry": IMAGE_REPOSITORY_SETTINGS.container_registry,
        "image_repo_prefix": IMAGE_REPOSITORY_SETTINGS.repository_prefix,
        "image_tag": IMAGE_REPOSITORY_SETTINGS.image_tag,
        "mc_name": TEST_K8S_SETTINGS.mc_name,
        "edp1_name": TEST_K8S_SETTINGS.edp1_name,
        "edp2_name": TEST_K8S_SETTINGS.edp2_name,
        "edp3_name": TEST_K8S_SETTINGS.edp3_name,
        "edp4_name": TEST_K8S_SETTINGS.edp4_name,
        "edp5_name": TEST_K8S_SETTINGS.edp5_name,
        "edp6_name": TEST_K8S_SETTINGS.edp6_name,
    },
    tags = ["manual"],
    deps = [
        ":edp_simulators_cue",
    ],
)

cue_dump(
    name = "postgres_database",
    srcs = ["postgres_database.cue"],
    cue_tags = {
        "db_secret_name": DB_SECRET_NAME,
    },
    tags = ["manual"],
    deps = [
        "//src/main/k8s:base",
    ],
)

cue_dump(
    name = "reporting",
    srcs = ["reporting.cue"],
    cue_tags = {
        "secret_name": SECRET_NAME,
        "db_secret_name": DB_SECRET_NAME,
        "mc_config_secret_name": MC_CONFIG_SECRET_NAME,
        "container_registry": IMAGE_REPOSITORY_SETTINGS.container_registry,
        "image_repo_prefix": IMAGE_REPOSITORY_SETTINGS.repository_prefix,
        "image_tag": IMAGE_REPOSITORY_SETTINGS.image_tag,
    },
    tags = ["manual"],
    deps = [
        ":config_cue",
        "//src/main/k8s:postgres",
        "//src/main/k8s:reporting",
    ],
)

cue_dump(
    name = "prometheus",
    srcs = ["prometheus.cue"],
    tags = ["manual"],
    deps = ["//src/main/k8s:base"],
)

cue_dump(
    name = "open_telemetry",
    srcs = ["open_telemetry.cue"],
    tags = ["manual"],
    deps = ["//src/main/k8s:open_telemetry"],
)

cue_dump(
    name = "grafana",
    srcs = ["grafana.cue"],
    cue_tags = {
        "secret_name": TEST_K8S_SETTINGS.grafana_secret_name,
    },
    tags = ["manual"],
    deps = ["//src/main/k8s:grafana"],
)

expand_template(
    name = "gen_encryption_key_pair_config",
    out = "encryption_key_pair_config.textproto",
    substitutions = {
        "{principal}": TEST_K8S_SETTINGS.mc_name,
    },
    tags = ["manual"],
    template = "encryption_key_pair_config.tmpl.textproto",
)

expand_template(
    name = "gen_measurement_consumer_config",
    out = "measurement_consumer_config.textproto",
    substitutions = {
        "{key}": TEST_K8S_SETTINGS.mc_name,
        "{api_key}": TEST_K8S_SETTINGS.mc_api_key,
        "{signing_certificate_name}": TEST_K8S_SETTINGS.mc_cert_name,
    },
    tags = ["manual"],
    template = "measurement_consumer_config.tmpl.textproto",
)

kustomization_dir(
    name = "config_files_with_empty_mapping",
    srcs = [
        "config_files_kustomization.yaml",
        "empty_akid_mapping_config.textproto",
        "empty_encryption_key_pair_config.textproto",
    ],
    renames = {
        "config_files_kustomization.yaml": "kustomization.yaml",
        "empty_akid_mapping_config.textproto": "authority_key_identifier_to_principal_map.textproto",
        "empty_encryption_key_pair_config.textproto": "encryption_key_pair_config.textproto",
    },
)

kustomization_dir(
    name = "config_files",
    srcs = [
        "config_files_kustomization.yaml",
        ":encryption_key_pair_config.textproto",
    ],
    renames = {
        "config_files_kustomization.yaml": "kustomization.yaml",
    },
    tags = ["manual"],
)

kustomization_dir(
    name = "db_creds",
    srcs = ["db_creds_kustomization.yaml"],
    renames = {
        "db_creds_kustomization.yaml": "kustomization.yaml",
    },
)

kustomization_dir(
    name = "mc_config",
    srcs = [
        "mc_config_kustomization.yaml",
        ":measurement_consumer_config.textproto",
    ],
    renames = {
        "mc_config_kustomization.yaml": "kustomization.yaml",
    },
    tags = ["manual"],
)

kustomization_dir(
    name = "kingdom_setup",
    testonly = True,
    srcs = [
        ":emulators",
        ":kingdom",
    ],
    generate_kustomization = True,
    tags = ["manual"],
    deps = [
        ":config_files_with_empty_mapping",
        "//src/main/k8s/testing/secretfiles:kustomization",
    ],
)

kustomization_dir(
    name = "cmms",
    testonly = True,
    srcs = [
        ":duchies",
        ":edp_simulators",
        ":emulators",
        ":kingdom",
    ],
    generate_kustomization = True,
    tags = ["manual"],
    deps = [
        ":config_files",
        "//src/main/k8s/testing/secretfiles:kustomization",
    ],
)

kustomization_dir(
    name = "cmms_with_reporting",
    testonly = True,
    srcs = [
        ":duchies",
        ":edp_simulators",
        ":emulators",
        ":kingdom",
        ":postgres_database",
        ":reporting",
    ],
    generate_kustomization = True,
    tags = ["manual"],
    deps = [
        ":config_files",
        ":db_creds",
        ":mc_config",
        "//src/main/k8s/testing/secretfiles:kustomization",
    ],
)
