load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("//build/k8s:defs.bzl", "k8s_apply", "kustomization_dir")

package(
    default_testonly = True,
    default_visibility = [
        "//src/main/k8s:__subpackages__",
        "//src/main/kotlin/org/wfanet/measurement/integration:__subpackages__",
        "//src/test/kotlin/org/wfanet/measurement/api:__subpackages__",
        "//src/test/kotlin/org/wfanet/measurement/integration:__subpackages__",
        "//src/test/kotlin/org/wfanet/measurement/loadtest:__subpackages__",
        "//src/test/kotlin/org/wfanet/measurement/reporting:__subpackages__",
    ],
)

filegroup(
    name = "all_der_files",
    srcs = glob(["*.der"]),
)

filegroup(
    name = "all_tink_keysets",
    srcs = glob(["*.tink"]),
)

filegroup(
    name = "all_configs",
    srcs = glob(["*.textproto"]),
)

filegroup(
    name = "root_certs",
    srcs = glob(["*_root.pem"]),
)

filegroup(
    name = "mc_trusted_certs",
    srcs = [
        "kingdom_root.pem",
        "aggregator_root.pem",
    ] + glob(["edp*_root.pem"]),
)

filegroup(
    name = "edp_trusted_certs",
    srcs = [
        "aggregator_root.pem",
        "kingdom_root.pem",
        "mc_root.pem",
        "worker1_root.pem",
        "worker2_root.pem",
    ],
)

filegroup(
    name = "encryption_public_keys",
    srcs = [
        ":mc_enc_public.pb",
        ":mc_enc_public.pb.sig",
    ],
)

genrule(
    name = "gen_trusted_certs",
    srcs = [":root_certs"],
    outs = ["all_root_certs.pem"],
    cmd = "cat $(SRCS) > $@",
)

genrule(
    name = "gen_mc_trusted_certs",
    srcs = [":mc_trusted_certs"],
    outs = ["mc_trusted_certs.pem"],
    cmd = "cat $(SRCS) > $@",
)

genrule(
    name = "gen_edp_trusted_certs",
    srcs = [":edp_trusted_certs"],
    outs = ["edp_trusted_certs.pem"],
    cmd = "cat $(SRCS) > $@",
)

genrule(
    name = "gen_serialized_mc_public_key",
    srcs = ["mc_enc_public.tink"],
    outs = ["mc_enc_public.pb"],
    cmd = "$(location //src/main/kotlin/org/wfanet/measurement/api/v2alpha/tools:EncryptionPublicKeys) serialize --data $< --out $@",
    tools = ["//src/main/kotlin/org/wfanet/measurement/api/v2alpha/tools:EncryptionPublicKeys"],
)

genrule(
    name = "gen_mc_public_key_sig",
    srcs = [
        ":mc_enc_public.pb",
        "mc_cs_cert.der",
        "mc_cs_private.der",
    ],
    outs = ["mc_enc_public.pb.sig"],
    cmd = "$(location //src/main/kotlin/org/wfanet/measurement/api/v2alpha/tools:EncryptionPublicKeys) sign --certificate $(location mc_cs_cert.der) --signing-key $(location mc_cs_private.der) --in $(location :mc_enc_public.pb) --out $@",
    tools = ["//src/main/kotlin/org/wfanet/measurement/api/v2alpha/tools:EncryptionPublicKeys"],
)

SECRET_FILES = [
    "all_root_certs.pem",
    "kingdom_root.pem",
    "kingdom_tls.key",
    "kingdom_tls.pem",
    "aggregator_tls.key",
    "aggregator_tls.pem",
    "aggregator_cs_cert.der",
    "aggregator_cs_private.der",
    "worker1_tls.key",
    "worker1_tls.pem",
    "worker1_cs_cert.der",
    "worker1_cs_private.der",
    "worker2_tls.key",
    "worker2_tls.pem",
    "worker2_cs_cert.der",
    "worker2_cs_private.der",
    "edp1_cs_cert.der",
    "edp1_cs_private.der",
    "edp1_enc_private.tink",
    "edp1_enc_public.tink",
    "edp1_tls.key",
    "edp1_tls.pem",
    "edp2_cs_cert.der",
    "edp2_cs_private.der",
    "edp2_enc_private.tink",
    "edp2_enc_public.tink",
    "edp2_tls.key",
    "edp2_tls.pem",
    "edp3_cs_cert.der",
    "edp3_cs_private.der",
    "edp3_enc_private.tink",
    "edp3_enc_public.tink",
    "edp3_tls.key",
    "edp3_tls.pem",
    "edp4_cs_cert.der",
    "edp4_cs_private.der",
    "edp4_enc_private.tink",
    "edp4_enc_public.tink",
    "edp4_tls.key",
    "edp4_tls.pem",
    "edp5_cs_cert.der",
    "edp5_cs_private.der",
    "edp5_enc_private.tink",
    "edp5_enc_public.tink",
    "edp5_tls.key",
    "edp5_tls.pem",
    "edp6_cs_cert.der",
    "edp6_cs_private.der",
    "edp6_enc_private.tink",
    "edp6_enc_public.tink",
    "edp6_tls.key",
    "edp6_tls.pem",
    "mp1_tls.pem",
    "mp1_tls.key",
    "mp1_cs_cert.der",
    "mp1_cs_private.der",
    "mp1_enc_private.tink",
    "mp1_enc_public.tink",
    "mc_cs_cert.der",
    "mc_cs_private.der",
    "mc_enc_private.tink",
    "mc_enc_public.tink",
    "mc_tls.key",
    "mc_tls.pem",
    "duchy_id_config.textproto",
    "duchy_cert_config.textproto",
    "aggregator_protocols_setup_config.textproto",
    "non_aggregator_protocols_setup_config.textproto",
    "llv2_protocol_config_config.textproto",
    "exchange_workflow.textproto",
    "reporting_tls.key",
    "reporting_tls.pem",
]

filegroup(
    name = "secret_files",
    srcs = SECRET_FILES,
)

write_file(
    name = "gen_kustomization",
    out = "kustomization.yaml",
    content = [
        "secretGenerator:",
        "- name: certs-and-configs",
        "  files:",
    ] + ["  - " + file for file in SECRET_FILES],
)

kustomization_dir(
    name = "kustomization",
    srcs = [
        ":kustomization.yaml",
        ":secret_files",
    ],
)

k8s_apply(
    name = "apply_kustomization",
    srcs = [":kustomization"],
)
