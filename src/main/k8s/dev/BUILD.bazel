load("@wfa_rules_cue//cue:defs.bzl", "cue_library")
load(
    "//build:variables.bzl",
    "AWS_SETTINGS",
    "DUCHY_K8S_SETTINGS",
    "GCLOUD_SETTINGS",
    "IMAGE_REPOSITORY_SETTINGS",
    "KINGDOM_K8S_SETTINGS",
    "SIMULATOR_K8S_SETTINGS",
)
load("@wfa_common_jvm//build:defs.bzl", "expand_template")
load("//src/main/k8s:macros.bzl", "cue_dump")
load("//build/k8s:defs.bzl", "kustomization_dir")

SECRET_NAME = "certs-and-configs"

MC_CONFIG_SECRET_NAME = "mc-config"

SIGNING_SECRET_NAME = "signing"

cue_library(
    name = "base_gke",
    srcs = ["base_gke.cue"],
    deps = ["//src/main/k8s:base"],
)

cue_library(
    name = "base_eks",
    srcs = ["base_eks.cue"],
    deps = ["//src/main/k8s:base"],
)

cue_library(
    name = "config",
    srcs = ["config.cue"],
)

cue_library(
    name = "config_gke",
    srcs = ["config_gke.cue"],
    deps = [
        ":config",
        "//src/main/k8s:postgres",
        "//src/main/k8s:spanner",
    ],
)

cue_library(
    name = "config_eks",
    srcs = ["config_eks.cue"],
    deps = [
        ":config",
        "//src/main/k8s:postgres",
    ],
)

cue_dump(
    name = "kingdom_gke",
    srcs = ["kingdom_gke.cue"],
    cue_tags = {
        "secret_name": SECRET_NAME,
        "container_registry": IMAGE_REPOSITORY_SETTINGS.container_registry,
        "image_repo_prefix": IMAGE_REPOSITORY_SETTINGS.repository_prefix,
        "image_tag": IMAGE_REPOSITORY_SETTINGS.image_tag,
        "google_cloud_project": GCLOUD_SETTINGS.project,
        "spanner_instance": GCLOUD_SETTINGS.spanner_instance,
    },
    tags = ["manual"],
    deps = [
        ":base_gke",
        ":config_gke",
        "//src/main/k8s:kingdom",
    ],
)

kustomization_dir(
    name = "kingdom_secret",
    srcs = ["kingdom_secret_kustomization.yaml"],
    renames = {"kingdom_secret_kustomization.yaml": "kustomization.yaml"},
)

kustomization_dir(
    name = "config_files",
    srcs = ["config_files_kustomization.yaml"],
    renames = {"config_files_kustomization.yaml": "kustomization.yaml"},
)

kustomization_dir(
    name = "kingdom",
    srcs = [
        "resource_requirements.yaml",
        ":kingdom_gke",
    ],
    generate_kustomization = True,
    tags = ["manual"],
    deps = [
        "config_files",
        ":kingdom_secret",
    ],
)

cue_dump(
    name = "aggregator_duchy_gke",
    srcs = ["duchy_gke.cue"],
    cue_tags = {
        "duchy_name": "aggregator",
        "duchy_protocols_setup_config": "aggregator_protocols_setup_config.textproto",
        "secret_name": SECRET_NAME,
        "certificate_id": DUCHY_K8S_SETTINGS.certificate_id,
        "cloud_storage_bucket": DUCHY_K8S_SETTINGS.storage_bucket,
        "container_registry": IMAGE_REPOSITORY_SETTINGS.container_registry,
        "image_repo_prefix": IMAGE_REPOSITORY_SETTINGS.repository_prefix,
        "image_tag": IMAGE_REPOSITORY_SETTINGS.image_tag,
        "google_cloud_project": GCLOUD_SETTINGS.project,
        "spanner_instance": GCLOUD_SETTINGS.spanner_instance,
        "kingdom_system_api_target": KINGDOM_K8S_SETTINGS.system_api_target,
    },
    tags = ["manual"],
    deps = [
        ":base_gke",
        ":config_gke",
        "//src/main/k8s:base",
        "//src/main/k8s:spanner_duchy",
    ],
)

cue_dump(
    name = "worker1_duchy_gke",
    srcs = ["duchy_gke.cue"],
    cue_tags = {
        "duchy_name": "worker1",
        "duchy_protocols_setup_config": "non_aggregator_protocols_setup_config.textproto",
        "secret_name": SECRET_NAME,
        "certificate_id": DUCHY_K8S_SETTINGS.certificate_id,
        "cloud_storage_bucket": DUCHY_K8S_SETTINGS.storage_bucket,
        "container_registry": IMAGE_REPOSITORY_SETTINGS.container_registry,
        "image_repo_prefix": IMAGE_REPOSITORY_SETTINGS.repository_prefix,
        "image_tag": IMAGE_REPOSITORY_SETTINGS.image_tag,
        "google_cloud_project": GCLOUD_SETTINGS.project,
        "spanner_instance": GCLOUD_SETTINGS.spanner_instance,
        "kingdom_system_api_target": KINGDOM_K8S_SETTINGS.system_api_target,
    },
    tags = ["manual"],
    deps = [
        ":base_gke",
        ":config_gke",
        "//src/main/k8s:base",
        "//src/main/k8s:spanner_duchy",
    ],
)

cue_dump(
    name = "worker2_duchy_gke",
    srcs = ["duchy_gke.cue"],
    cue_tags = {
        "duchy_name": "worker2",
        "duchy_protocols_setup_config": "non_aggregator_protocols_setup_config.textproto",
        "secret_name": SECRET_NAME,
        "certificate_id": DUCHY_K8S_SETTINGS.certificate_id,
        "cloud_storage_bucket": DUCHY_K8S_SETTINGS.storage_bucket,
        "container_registry": IMAGE_REPOSITORY_SETTINGS.container_registry,
        "image_repo_prefix": IMAGE_REPOSITORY_SETTINGS.repository_prefix,
        "image_tag": IMAGE_REPOSITORY_SETTINGS.image_tag,
        "google_cloud_project": GCLOUD_SETTINGS.project,
        "spanner_instance": GCLOUD_SETTINGS.spanner_instance,
        "kingdom_system_api_target": KINGDOM_K8S_SETTINGS.system_api_target,
    },
    tags = ["manual"],
    deps = [
        ":base_gke",
        ":config_gke",
        "//src/main/k8s:base",
        "//src/main/k8s:spanner_duchy",
    ],
)

cue_dump(
    name = "worker2_duchy_eks",
    srcs = ["duchy_eks.cue"],
    cue_tags = {
        "duchy_name": "worker2",
        "duchy_protocols_setup_config": "non_aggregator_protocols_setup_config.textproto",
        "secret_name": SECRET_NAME,
        "certificate_id": DUCHY_K8S_SETTINGS.certificate_id,
        "container_registry": IMAGE_REPOSITORY_SETTINGS.container_registry,
        "image_repo_prefix": IMAGE_REPOSITORY_SETTINGS.repository_prefix,
        "image_tag": IMAGE_REPOSITORY_SETTINGS.image_tag,
        "postgres_host": AWS_SETTINGS.postgres_host,
        "postgres_port": AWS_SETTINGS.postgres_port,
        "postgres_credential_secret_name": AWS_SETTINGS.postgres_credential_secret_name,
        "postgres_region": AWS_SETTINGS.postgres_region,
        "s3_bucket": AWS_SETTINGS.s3_bucket,
        "s3_region": AWS_SETTINGS.s3_region,
        "computation_control_server_eips": AWS_SETTINGS.computation_control_server_eips,
        "kingdom_system_api_target": KINGDOM_K8S_SETTINGS.system_api_target,
    },
    tags = ["manual"],
    deps = [
        ":base_eks",
        ":config_eks",
        "//src/main/k8s:base",
        "//src/main/k8s:duchy",
        "//src/main/k8s:postgres_duchy",
    ],
)

expand_template(
    name = "gen_aggregator_secret_kustomization",
    out = "aggregator_secret_kustomization.yaml",
    substitutions = {
        "{duchy_id}": "aggregator",
        "{duchy_role}": "aggregator",
    },
    template = "duchy_secret_kustomization.tmpl.yaml",
)

expand_template(
    name = "gen_worker1_secret_kustomization",
    out = "worker1_secret_kustomization.yaml",
    substitutions = {
        "{duchy_id}": "worker1",
        "{duchy_role}": "non_aggregator",
    },
    template = "duchy_secret_kustomization.tmpl.yaml",
)

expand_template(
    name = "gen_worker2_secret_kustomization",
    out = "worker2_secret_kustomization.yaml",
    substitutions = {
        "{duchy_id}": "worker2",
        "{duchy_role}": "non_aggregator",
    },
    template = "duchy_secret_kustomization.tmpl.yaml",
)

kustomization_dir(
    name = "aggregator_duchy_secret",
    srcs = [":aggregator_secret_kustomization.yaml"],
    renames = {"aggregator_secret_kustomization.yaml": "kustomization.yaml"},
)

kustomization_dir(
    name = "worker1_duchy_secret",
    srcs = [":worker1_secret_kustomization.yaml"],
    renames = {"worker1_secret_kustomization.yaml": "kustomization.yaml"},
)

kustomization_dir(
    name = "worker2_duchy_secret",
    srcs = [":worker2_secret_kustomization.yaml"],
    renames = {"worker2_secret_kustomization.yaml": "kustomization.yaml"},
)

kustomization_dir(
    name = "aggregator_duchy",
    srcs = [
        "resource_requirements.yaml",
        ":aggregator_duchy_gke",
    ],
    generate_kustomization = True,
    tags = ["manual"],
    deps = [
        ":aggregator_duchy_secret",
        ":config_files",
    ],
)

kustomization_dir(
    name = "worker1_duchy",
    srcs = [
        "resource_requirements.yaml",
        ":worker1_duchy_gke",
    ],
    generate_kustomization = True,
    tags = ["manual"],
    deps = [
        ":config_files",
        ":worker1_duchy_secret",
    ],
)

kustomization_dir(
    name = "worker2_duchy",
    srcs = [
        "resource_requirements.yaml",
        ":worker2_duchy_gke",
    ],
    generate_kustomization = True,
    tags = ["manual"],
    deps = [
        ":config_files",
        ":worker2_duchy_secret",
    ],
)

kustomization_dir(
    name = "worker2_duchy_aws",
    srcs = [
        "resource_requirements.yaml",
        ":worker2_duchy_eks",
    ],
    generate_kustomization = True,
    tags = ["manual"],
    deps = [
        ":config_files",
        ":worker2_duchy_secret",
    ],
)

cue_library(
    name = "edp_simulator_gke",
    srcs = ["edp_simulator_gke.cue"],
    deps = [
        ":base_gke",
        ":config_gke",
        "//src/main/k8s:edp_simulator",
    ],
)

EDP_SIMULATOR_TAGS = {
    "secret_name": SECRET_NAME,
    "mc_name": SIMULATOR_K8S_SETTINGS.mc_name,
    "edp1_name": SIMULATOR_K8S_SETTINGS.edp1_name,
    "edp2_name": SIMULATOR_K8S_SETTINGS.edp2_name,
    "edp3_name": SIMULATOR_K8S_SETTINGS.edp3_name,
    "edp4_name": SIMULATOR_K8S_SETTINGS.edp4_name,
    "edp5_name": SIMULATOR_K8S_SETTINGS.edp5_name,
    "edp6_name": SIMULATOR_K8S_SETTINGS.edp6_name,
    "container_registry": IMAGE_REPOSITORY_SETTINGS.container_registry,
    "image_repo_prefix": IMAGE_REPOSITORY_SETTINGS.repository_prefix,
    "image_tag": IMAGE_REPOSITORY_SETTINGS.image_tag,
    "kingdom_public_api_target": KINGDOM_K8S_SETTINGS.public_api_target,
    "duchy_public_api_target": DUCHY_K8S_SETTINGS.public_api_target,
}

cue_dump(
    name = "bigquery_edp_simulator_gke",
    srcs = ["bigquery_edp_simulator_gke.cue"],
    cue_tags = dict(EDP_SIMULATOR_TAGS.items() + {
        "google_cloud_project": GCLOUD_SETTINGS.project,
        "bigquery_dataset": SIMULATOR_K8S_SETTINGS.bigquery_dataset,
        "bigquery_table": SIMULATOR_K8S_SETTINGS.bigquery_table,
    }.items()),
    tags = ["manual"],
    deps = [":edp_simulator_gke"],
)

kustomization_dir(
    name = "bigquery_edp_simulators",
    testonly = True,
    srcs = [
        "resource_requirements.yaml",
        ":bigquery_edp_simulator_gke",
    ],
    generate_kustomization = True,
    tags = ["manual"],
    deps = [
        "//src/main/k8s/testing/secretfiles:kustomization",
    ],
)

cue_dump(
    name = "synthetic_generator_edp_simulator_gke",
    srcs = ["synthetic_generator_edp_simulator_gke.cue"],
    cue_tags = EDP_SIMULATOR_TAGS,
    tags = ["manual"],
    deps = [":edp_simulator_gke"],
)

kustomization_dir(
    name = "synthetic_generator_config_files",
    testonly = True,
    srcs = [
        "synthetic_generator_config_files_kustomization.yaml",
        "//src/main/k8s/testing/data:synthetic_generation_specs",
    ],
    renames = {
        "synthetic_generator_config_files_kustomization.yaml": "kustomization.yaml",
    },
)

kustomization_dir(
    name = "synthetic_generator_edp_simulators",
    testonly = True,
    srcs = [
        "resource_requirements.yaml",
        ":synthetic_generator_edp_simulator_gke",
    ],
    generate_kustomization = True,
    tags = ["manual"],
    deps = [
        ":synthetic_generator_config_files",
        "//src/main/k8s/testing/secretfiles:kustomization",
    ],
)

cue_dump(
    name = "reporting_gke",
    srcs = ["reporting_gke.cue"],
    cue_tags = {
        "secret_name": SIGNING_SECRET_NAME,
        "mc_config_secret_name": MC_CONFIG_SECRET_NAME,
        "container_registry": IMAGE_REPOSITORY_SETTINGS.container_registry,
        "image_repo_prefix": IMAGE_REPOSITORY_SETTINGS.repository_prefix,
        "image_tag": IMAGE_REPOSITORY_SETTINGS.image_tag,
        "google_cloud_project": GCLOUD_SETTINGS.project,
        "postgres_instance": GCLOUD_SETTINGS.postgres_instance,
        "postgres_region": GCLOUD_SETTINGS.postgres_region,
        "kingdom_public_api_target": KINGDOM_K8S_SETTINGS.public_api_target,
    },
    tags = ["manual"],
    deps = [
        ":base_gke",
        ":config_gke",
        "//src/main/k8s:reporting",
    ],
)

kustomization_dir(
    name = "reporting_config_files",
    srcs = ["reporting_config_files_kustomization.yaml"],
    renames = {"reporting_config_files_kustomization.yaml": "kustomization.yaml"},
)

kustomization_dir(
    name = "reporting_secrets",
)

kustomization_dir(
    name = "reporting",
    srcs = [
        "resource_requirements.yaml",
        ":reporting_gke",
    ],
    generate_kustomization = True,
    tags = ["manual"],
    deps = [
        ":reporting_config_files",
        ":reporting_secrets",
    ],
)

cue_dump(
    name = "reporting_v2_gke",
    srcs = ["reporting_v2_gke.cue"],
    cue_tags = {
        "secret_name": SIGNING_SECRET_NAME,
        "mc_config_secret_name": MC_CONFIG_SECRET_NAME,
        "container_registry": IMAGE_REPOSITORY_SETTINGS.container_registry,
        "image_repo_prefix": IMAGE_REPOSITORY_SETTINGS.repository_prefix,
        "image_tag": IMAGE_REPOSITORY_SETTINGS.image_tag,
        "google_cloud_project": GCLOUD_SETTINGS.project,
        "postgres_instance": GCLOUD_SETTINGS.postgres_instance,
        "postgres_region": GCLOUD_SETTINGS.postgres_region,
        "kingdom_public_api_target": KINGDOM_K8S_SETTINGS.public_api_target,
    },
    tags = ["manual"],
    deps = [
        ":base_gke",
        ":config_gke",
        "//src/main/k8s:reporting_v2",
    ],
)

kustomization_dir(
    name = "reporting_v2_config_files",
    srcs = ["reporting_v2_config_files_kustomization.yaml"],
    renames = {"reporting_v2_config_files_kustomization.yaml": "kustomization.yaml"},
)

kustomization_dir(
    name = "reporting_v2_secrets",
)

kustomization_dir(
    name = "reporting_v2",
    srcs = [
        "resource_requirements.yaml",
        ":reporting_v2_gke",
    ],
    generate_kustomization = True,
    tags = ["manual"],
    deps = [
        ":reporting_v2_config_files",
        ":reporting_v2_secrets",
    ],
)

cue_dump(
    name = "open_telemetry_gke",
    srcs = ["open_telemetry_gke.cue"],
    tags = ["manual"],
    deps = [
        "//src/main/k8s:open_telemetry",
    ],
)

cue_dump(
    name = "open_telemetry_eks",
    srcs = ["open_telemetry_eks.cue"],
    cue_tags = {
        "amp_ingest_endpoint": AWS_SETTINGS.amp_ingest_endpoint,
        "amp_region": AWS_SETTINGS.amp_region,
    },
    tags = ["manual"],
    deps = [
        ":config_eks",
        "//src/main/k8s:open_telemetry",
    ],
)

cue_dump(
    name = "prometheus_gke",
    srcs = ["prometheus_gke.cue"],
    tags = ["manual"],
    deps = [
        ":base_gke",
    ],
)
