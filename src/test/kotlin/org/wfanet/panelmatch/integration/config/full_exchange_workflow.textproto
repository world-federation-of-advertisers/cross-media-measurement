# MP generates a blob storage public/private key pair.
steps {
  step_id: "generate-blob-encryption-key-pair-step"
  party: MODEL_PROVIDER

  generate_hybrid_encryption_key_pair_step {}

  output_labels { key: "private-key-handle" value: "mp-blob-encryption-private-key" }
  output_labels { key: "public-key-handle" value: "mp-blob-encryption-public-key" }
}

# MP exports its blob encryption public key.
steps {
  step_id: "export-blob-encryption-public-key"
  party: MODEL_PROVIDER

  copy_to_shared_storage_step { copy_options { label_type: BLOB } }

  input_labels { key: "blob-encryption-public-key" value: "mp-blob-encryption-public-key" }
  output_labels { key: "blob-encryption-public-key-for-mp" value: "blob-encryption-public-key-for-mp" }
}

# EDP imports MP's blob encryption public key.
steps {
  step_id: "import-blob-encryption-public-key-for-mp"
  party: DATA_PROVIDER

  copy_from_shared_storage_step { copy_options { label_type: BLOB } }

  input_labels { key: "blob-encryption-public-key-for-mp" value: "blob-encryption-public-key-for-mp" }
  output_labels { key: "blob-encryption-public-key-for-mp" value: "edp-blob-encryption-public-key-for-mp" }
}

# EDP provides a previously generated pepper used in generating AES keys.
steps {
  step_id: "input-hkdf-pepper"
  party: DATA_PROVIDER

  input_step {}

  output_labels { key: "input" value: "edp-hkdf-pepper" }
}

# EDP encrypts its hkdf pepper using MP's public key.
steps {
  step_id: "encrypt-hkdf-pepper"
  party: DATA_PROVIDER

  hybrid_encrypt_step {}

  input_labels { key: "plaintext-data" value: "edp-hkdf-pepper" }
  input_labels { key: "public-key-handle" value: "edp-blob-encryption-public-key-for-mp" }
  output_labels { key: "encrypted-data" value: "edp-encrypted-hkdf-pepper" }
}

# EDP exports its encrypted hkdf pepper.
steps {
  step_id: "export-encrypted-hkdf-pepper"
  party: DATA_PROVIDER

  copy_to_shared_storage_step { copy_options { label_type: BLOB } }

  input_labels { key: "encrypted-hkdf-pepper" value: "edp-encrypted-hkdf-pepper" }
  output_labels { key: "encrypted-hkdf-pepper" value: "encrypted-hkdf-pepper" }
}

# MP imports EDP's encrypted hkdf pepper.
steps {
  step_id: "import-encrypted-hkdf-pepper"
  party: MODEL_PROVIDER

  copy_from_shared_storage_step { copy_options { label_type: BLOB } }

  input_labels { key: "encrypted-hkdf-pepper" value: "encrypted-hkdf-pepper" }
  output_labels { key: "encrypted-hkdf-pepper" value: "mp-encrypted-hkdf-pepper" }
}

# MP decrypts its hkdf pepper with its private key.
steps {
  step_id: "decrypt-hkdf-pepper"
  party: MODEL_PROVIDER

  hybrid_decrypt_step {}

  input_labels { key: "private-key-handle" value: "mp-blob-encryption-private-key" }
  input_labels { key: "encrypted-data" value: "mp-encrypted-hkdf-pepper" }
  output_labels { key: "decrypted-data" value: "mp-hkdf-pepper" }
}

# EDP provides a previously generated identifier hash pepper used in hashing encrypted identifiers.
steps {
  step_id: "input-identifier-hash-pepper"
  party: DATA_PROVIDER

  input_step {}

  output_labels { key: "input" value: "edp-identifier-hash-pepper" }
}

# EDP encrypts its identifier hash pepper using MP's public key.
steps {
  step_id: "encrypt-identifier-hash-pepper"
  party: DATA_PROVIDER

  hybrid_encrypt_step {}

  input_labels { key: "plaintext-data" value: "edp-identifier-hash-pepper" }
  input_labels { key: "public-key-handle" value: "edp-blob-encryption-public-key-for-mp" }
  output_labels { key: "encrypted-data" value: "edp-encrypted-identifier-hash-pepper" }
}

# EDP exports its identifier hash pepper.
steps {
  step_id: "export-identifier-hash-pepper"
  party: DATA_PROVIDER

  copy_to_shared_storage_step { copy_options { label_type: BLOB } }

  input_labels { key: "encrypted-identifier-hash-pepper" value: "edp-encrypted-identifier-hash-pepper" }
  output_labels { key: "encrypted-identifier-hash-pepper" value: "encrypted-identifier-hash-pepper" }
}

# MP imports EDP's encrypted identifier hash pepper.
steps {
  step_id: "import-encrypted-identifier-hash-pepper"
  party: MODEL_PROVIDER

  copy_from_shared_storage_step { copy_options { label_type: BLOB } }

  input_labels { key: "encrypted-identifier-hash-pepper" value: "encrypted-identifier-hash-pepper" }
  output_labels { key: "encrypted-identifier-hash-pepper" value: "mp-encrypted-identifier-hash-pepper" }
}

# MP decrypts its identifier-hash pepper using its private key.
steps {
  step_id: "decrypt-identifier-hash-pepper"
  party: MODEL_PROVIDER

  hybrid_decrypt_step {}

  input_labels { key: "private-key-handle" value: "mp-blob-encryption-private-key" }
  input_labels { key: "encrypted-data" value: "mp-encrypted-identifier-hash-pepper" }
  output_labels { key: "decrypted-data" value: "mp-identifier-hash-pepper" }
}

# MP generates private commutative deterministic key.
steps {
  step_id: "generate-commutative-deterministic-key"
  party: MODEL_PROVIDER

  generate_commutative_deterministic_key_step {}

  output_labels { key: "symmetric-key" value: "mp-commutative-deterministic-key" }
}

# MP provides unencrypted join keys
steps {
  step_id: "input-plaintext-join-keys"
  party: MODEL_PROVIDER

  input_step {}

  output_labels { key: "input" value: "mp-plaintext-join-keys" }
}

# EDP provides previously generated private key as input.
steps {
  step_id: "input-commutative-deterministic-key"
  party: DATA_PROVIDER

  input_step {}

  output_labels { key: "input" value: "edp-commutative-deterministic-key" }
}

# EDP provides the previous protocol execution's single blinded joinkeys as input.
#
# These are used to validate that the new single-blinded joinkeys derived in
# this protocol don't deviate too much.
steps {
  step_id: "input-previous-single-blinded-join-keys"
  party: DATA_PROVIDER

  input_step {}

  # TODO: fix copy_from_previous_exchange_step and then make this one of those.
  # copy_from_previous_exchange_step {}
  # input_labels { key: "input" value: "edp-single-blinded-join-keys-audit-trail" }

  output_labels { key: "output" value: "edp-previous-single-blinded-join-keys" }
}

# MP wraps their hashed join keys in a layer of deterministic commutative
# encryption.
steps {
  step_id: "single-blind"
  party: MODEL_PROVIDER

  commutative_deterministic_encrypt_step {}

  input_labels { key: "unencrypted-data" value: "mp-plaintext-join-keys" }
  input_labels { key: "encryption-key" value: "mp-commutative-deterministic-key" }

  output_labels { key: "encrypted-data" value: "mp-single-blinded-join-keys" }
}

steps {
  step_id: "export-single-blinded-join-keys"
  party: MODEL_PROVIDER

  copy_to_shared_storage_step { copy_options { label_type: BLOB } }

  input_labels { key: "single-blinded-join-keys" value: "mp-single-blinded-join-keys" }
  output_labels { key: "single-blinded-join-keys" value: "single-blinded-join-keys" }
}

steps {
  step_id: "import-single-blinded-join-keys"
  party: DATA_PROVIDER

  copy_from_shared_storage_step { copy_options { label_type: BLOB } }

  input_labels { key: "single-blinded-join-keys" value: "single-blinded-join-keys" }
  output_labels { key: "single-blinded-join-keys" value: "edp-single-blinded-join-keys" }
}

# EDP validates that the single-encrypted join keys are sufficiently
# similar to the previous execution's single-encrypted join keys.
steps {
  step_id: "validate-single-blinded-join-keys"
  party: DATA_PROVIDER

  # Ensure there are are between 1000 and 10,000 panelists and 99% of them
  # appeared in the previous protocol.
  intersect_and_validate_step {
    max_size: 10000
    maximum_new_items_allowed: 100
  }

  input_labels { key: "previous-data" value: "edp-previous-single-blinded-join-keys" }
  input_labels { key: "current-data" value: "edp-single-blinded-join-keys" }

  # Outputs "current-data" as a local copy for long-term auditing storage.
  output_labels { key: "current-data" value: "edp-single-blinded-join-keys-audit-trail" }
}

# EDP wraps the single-encrypted join keys in another layer of
# commutative deterministic encryption.
steps {
  step_id: "double-blind"
  party: DATA_PROVIDER

  commutative_deterministic_reencrypt_step {}

  input_labels { key: "encrypted-data" value: "edp-single-blinded-join-keys-audit-trail" }
  input_labels { key: "encryption-key" value: "edp-commutative-deterministic-key" }

  output_labels { key: "reencrypted-data" value: "edp-double-blinded-join-keys" }
}

steps {
  step_id: "export-double-blinded-join-keys"
  party: DATA_PROVIDER

  copy_to_shared_storage_step { copy_options { label_type: BLOB } }

  input_labels { key: "double-blinded-join-keys" value: "edp-double-blinded-join-keys" }
  output_labels { key: "double-blinded-join-keys" value: "double-blinded-join-keys" }
}

steps {
  step_id: "import-double-blinded-join-keys"
  party: MODEL_PROVIDER

  copy_from_shared_storage_step { copy_options { label_type: BLOB } }

  input_labels { key: "double-blinded-join-keys" value: "double-blinded-join-keys" }
  output_labels { key: "double-blinded-join-keys" value: "mp-double-blinded-join-keys" }
}

# MP removes their layer of commutative, deterministic encryption.
steps {
  step_id: "remove-blinding"
  party: MODEL_PROVIDER

  commutative_deterministic_decrypt_step {}

  input_labels { key: "encryption-key" value: "mp-commutative-deterministic-key" }
  input_labels { key: "encrypted-data" value: "mp-double-blinded-join-keys" }

  output_labels { key: "decrypted-data" value: "mp-decrypted-join-keys" }
}

# MP generates lookup keys from EDP's identifier hash pepper and decrypted join keys.
steps {
  step_id: "generate-lookup-keys-step"
  party: MODEL_PROVIDER

  generate_lookup_keys_step {}

  input_labels { key: "join-keys" value: "mp-decrypted-join-keys" }
  input_labels { key: "pepper" value: "mp-identifier-hash-pepper" }

  output_labels { key: "lookup-keys" value: "mp-lookup-keys" }
}

# MP generates rlwe private and public keys.
steps {
  step_id: "generate-serialized-rlwe-key-pair"
  party: MODEL_PROVIDER

  generate_serialized_rlwe_key_pair_step {
    parameters: {
      [type.googleapis.com/private_membership.batch.Parameters] {
        shard_parameters: {
          number_of_shards: 1
          number_of_buckets_per_shard: 11
          required_queries_per_shard: 3
          enable_padding_nonces: 1
        }
        crypto_parameters: {
          request_modulus: 18446744073708380161
          request_modulus: 137438953471
          response_modulus: 2056193
          log_degree: 12
          log_t: 1
          variance: 8
          levels_of_recursion: 2
          log_compression_factor: 4
          log_decomposition_modulus: 10
        }
      }
    }
  }

  output_labels { key: "private-key" value: "mp-serialized-rlwe-private-key" }
  output_labels { key: "public-key" value: "mp-serialized-rlwe-public-key" }
}

# MP encrypts their queries.
steps {
  step_id: "prepare-event-lookup-queries"
  party: MODEL_PROVIDER

  build_private_membership_queries_step {
    parameters: {
      [type.googleapis.com/private_membership.batch.Parameters] {
        shard_parameters: {
          number_of_shards: 1
          number_of_buckets_per_shard: 11
          required_queries_per_shard: 3
          enable_padding_nonces: 1
        }
        crypto_parameters: {
          request_modulus: 18446744073708380161
          request_modulus: 137438953471
          response_modulus: 2056193
          log_degree: 12
          log_t: 1
          variance: 8
          levels_of_recursion: 2
          log_compression_factor: 4
          log_decomposition_modulus: 10
        }
      }
    }
    encrypted_query_bundle_file_count: 1
    query_id_to_ids_file_count: 1
    num_shards: 1
    num_buckets_per_shard: 10
    num_queries_per_shard: 3
    add_padding_queries: true
  }

  input_labels { key: "lookup-keys" value: "mp-lookup-keys" }
  input_labels { key: "serialized-rlwe-private-key" value: "mp-serialized-rlwe-private-key" }
  input_labels { key: "serialized-rlwe-public-key" value: "mp-serialized-rlwe-public-key" }

  output_labels { key: "query-to-ids-map" value: "mp-query-to-ids-map" }
  output_labels { key: "encrypted-queries" value: "mp-encrypted-queries" }
}

# MP exports its rlwe public key
steps {
  step_id: "export-serialized-rlwe-public-key"
  party: MODEL_PROVIDER

  copy_to_shared_storage_step { copy_options { label_type: BLOB } }

  input_labels { key: "serialized-rlwe-public-key" value: "mp-serialized-rlwe-public-key" }
  output_labels { key: "serialized-rlwe-public-key" value: "serialized-rlwe-public-key" }
}

# EDP imports MP's rlwe public key.
steps {
  step_id: "import-serialized-rlwe-public-key"
  party: DATA_PROVIDER

  copy_from_shared_storage_step { copy_options { label_type: BLOB } }

  input_labels { key: "serialized-rlwe-public-key" value: "serialized-rlwe-public-key" }
  output_labels { key: "serialized-rlwe-public-key" value: "edp-serialized-rlwe-public-key" }
}

# MP exports their encrypted queries.
steps {
  step_id: "export-encrypted-queries"
  party: MODEL_PROVIDER

  copy_to_shared_storage_step { copy_options { label_type: MANIFEST } }

  input_labels { key: "encrypted-queries" value: "mp-encrypted-queries" }
  output_labels { key: "encrypted-queries" value: "encrypted-queries" }
}

# EDP imports MP's encrypted queries.
steps {
  step_id: "import-encrypted-queries"
  party: DATA_PROVIDER

  copy_from_shared_storage_step { copy_options { label_type: MANIFEST } }

  input_labels { key: "encrypted-queries" value: "encrypted-queries" }
  output_labels { key: "encrypted-queries" value: "edp-encrypted-queries" }
}

# EDP provides symmetrically encrypted compressed event data as input.
steps {
  step_id: "input-encrypted-event-data"
  party: DATA_PROVIDER

  input_step {}

  output_labels { key: "input" value: "edp-encrypted-event-data" }
}

# EDP provides dictionary for compressed event data as input.
steps {
  step_id: "input-compression-parameters"
  party: DATA_PROVIDER

  input_step {}

  output_labels { key: "input" value: "edp-compression-parameters" }
}

# EDP exports its event data dictionary.
steps {
  step_id: "export-compression-parameters"
  party: DATA_PROVIDER

  copy_to_shared_storage_step { copy_options { label_type: BLOB } }

  input_labels { key: "compression-parameters" value: "edp-compression-parameters" }
  output_labels { key: "compression-parameters" value: "compression-parameters" }
}

# MP imports EDP's event data dictionary.
steps {
  step_id: "import-compression-parameters"
  party: MODEL_PROVIDER

  copy_from_shared_storage_step { copy_options { label_type: BLOB } }

  input_labels { key: "compression-parameters" value: "compression-parameters" }
  output_labels { key: "compression-parameters" value: "mp-compression-parameters" }
}

# EDP executes encrypted queries
steps {
  step_id: "execute-encrypted-queries"
  party: DATA_PROVIDER

  execute_private_membership_queries_step {
    parameters: {
      [type.googleapis.com/private_membership.batch.Parameters] {
        shard_parameters: {
          number_of_shards: 1
          number_of_buckets_per_shard: 11
          required_queries_per_shard: 3
          enable_padding_nonces: 1
        }
        crypto_parameters: {
          request_modulus: 18446744073708380161
          request_modulus: 137438953471
          response_modulus: 2056193
          log_degree: 12
          log_t: 1
          variance: 8
          levels_of_recursion: 2
          log_compression_factor: 4
          log_decomposition_modulus: 10
        }
      }
    }
    encrypted_query_result_file_count: 1
    num_shards: 1
    num_buckets_per_shard: 10
    max_queries_per_shard: 10
  }

  input_labels { key: "encrypted-event-data" value: "edp-encrypted-event-data" }
  input_labels { key: "encrypted-queries" value: "edp-encrypted-queries" }
  input_labels { key: "serialized-rlwe-public-key" value: "edp-serialized-rlwe-public-key" }

  output_labels { key: "encrypted-results" value: "edp-encrypted-query-results" }
  output_labels { key: "padding-nonces" value: "edp-padding-nonces" }
}

# EDP exports its encrypted query results.
steps {
  step_id: "export-encrypted-query-results"
  party: DATA_PROVIDER

  copy_to_shared_storage_step { copy_options { label_type: MANIFEST } }

  input_labels { key: "encrypted-results" value: "edp-encrypted-query-results" }
  output_labels { key: "encrypted-results" value: "encrypted-query-results" }
}

# MP imports EDP's encrypted query results.
steps {
  step_id: "import-encrypted-query-results"
  party: MODEL_PROVIDER

  copy_from_shared_storage_step { copy_options { label_type: MANIFEST } }

  input_labels { key: "encrypted-results" value: "encrypted-query-results" }
  output_labels { key: "encrypted-results" value: "mp-encrypted-query-results" }
}

# MP decrypts the encrypted query results.
steps {
  step_id: "decrypt-encrypted-query-results"
  party: MODEL_PROVIDER

  decrypt_private_membership_query_results_step {
    parameters: {
      [type.googleapis.com/private_membership.batch.Parameters] {
        shard_parameters: {
          number_of_shards: 1
          number_of_buckets_per_shard: 11
          required_queries_per_shard: 3
          enable_padding_nonces: 1
        }
        crypto_parameters: {
          request_modulus: 18446744073708380161
          request_modulus: 137438953471
          response_modulus: 2056193
          log_degree: 12
          log_t: 1
          variance: 8
          levels_of_recursion: 2
          log_compression_factor: 4
          log_decomposition_modulus: 10
        }
      }
    }
    decrypt_event_data_set_file_count: 1
  }

  input_labels { key: "serialized-rlwe-private-key" value: "mp-serialized-rlwe-private-key" }
  input_labels { key: "serialized-rlwe-public-key" value: "mp-serialized-rlwe-public-key" }
  input_labels { key: "compression-parameters" value: "mp-compression-parameters" }
  input_labels { key: "query-to-ids-map" value: "mp-query-to-ids-map" }
  input_labels { key: "plaintext-join-keys-to-id-map" value: "mp-plaintext-join-keys" }
  input_labels { key: "decrypted-join-keys-to-id-map" value: "mp-decrypted-join-keys" }
  input_labels { key: "encrypted-results" value: "mp-encrypted-query-results" }
  input_labels { key: "pepper" value: "mp-hkdf-pepper" }

  output_labels { key: "decrypted-event-data" value: "decrypted-event-data" }
}
